"use strict";
(() => {
  var __create = Object.create;
  var __defProp = Object.defineProperty;
  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
  var __getOwnPropNames = Object.getOwnPropertyNames;
  var __getProtoOf = Object.getPrototypeOf;
  var __hasOwnProp = Object.prototype.hasOwnProperty;
  var __commonJS = (cb, mod) => function __require() {
    return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
  };
  var __copyProps = (to, from, except, desc) => {
    if (from && typeof from === "object" || typeof from === "function") {
      for (let key of __getOwnPropNames(from))
        if (!__hasOwnProp.call(to, key) && key !== except)
          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
    }
    return to;
  };
  var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
    // If the importer is in node compatibility mode or this is not an ESM
    // file that has been converted to a CommonJS file using a Babel-
    // compatible transform (i.e. "__esModule" has not been set), then set
    // "default" to the CommonJS "module.exports" for node compatibility.
    isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
    mod
  ));

  // node_modules/fast-safe-stringify/index.js
  var require_fast_safe_stringify = __commonJS({
    "node_modules/fast-safe-stringify/index.js"(exports, module) {
      module.exports = stringify;
      stringify.default = stringify;
      stringify.stable = deterministicStringify;
      stringify.stableStringify = deterministicStringify;
      var LIMIT_REPLACE_NODE = "[...]";
      var CIRCULAR_REPLACE_NODE = "[Circular]";
      var arr = [];
      var replacerStack = [];
      function defaultOptions() {
        return {
          depthLimit: Number.MAX_SAFE_INTEGER,
          edgesLimit: Number.MAX_SAFE_INTEGER
        };
      }
      function stringify(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions();
        }
        decirc(obj, "", 0, [], void 0, 0, options);
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(obj, replacer, spacer);
          } else {
            res = JSON.stringify(obj, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function setReplace(replace, val, k, parent) {
        var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k);
        if (propertyDescriptor.get !== void 0) {
          if (propertyDescriptor.configurable) {
            Object.defineProperty(parent, k, { value: replace });
            arr.push([parent, k, val, propertyDescriptor]);
          } else {
            replacerStack.push([val, k, replace]);
          }
        } else {
          parent[k] = replace;
          arr.push([parent, k, val]);
        }
      }
      function decirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              decirc(val[i], i, i, stack, val, depth, options);
            }
          } else {
            var keys = Object.keys(val);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              decirc(val[key], key, i, stack, val, depth, options);
            }
          }
          stack.pop();
        }
      }
      function compareFunction(a, b) {
        if (a < b) {
          return -1;
        }
        if (a > b) {
          return 1;
        }
        return 0;
      }
      function deterministicStringify(obj, replacer, spacer, options) {
        if (typeof options === "undefined") {
          options = defaultOptions();
        }
        var tmp = deterministicDecirc(obj, "", 0, [], void 0, 0, options) || obj;
        var res;
        try {
          if (replacerStack.length === 0) {
            res = JSON.stringify(tmp, replacer, spacer);
          } else {
            res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer);
          }
        } catch (_) {
          return JSON.stringify("[unable to serialize, circular reference is too complex to analyze]");
        } finally {
          while (arr.length !== 0) {
            var part = arr.pop();
            if (part.length === 4) {
              Object.defineProperty(part[0], part[1], part[3]);
            } else {
              part[0][part[1]] = part[2];
            }
          }
        }
        return res;
      }
      function deterministicDecirc(val, k, edgeIndex, stack, parent, depth, options) {
        depth += 1;
        var i;
        if (typeof val === "object" && val !== null) {
          for (i = 0; i < stack.length; i++) {
            if (stack[i] === val) {
              setReplace(CIRCULAR_REPLACE_NODE, val, k, parent);
              return;
            }
          }
          try {
            if (typeof val.toJSON === "function") {
              return;
            }
          } catch (_) {
            return;
          }
          if (typeof options.depthLimit !== "undefined" && depth > options.depthLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          if (typeof options.edgesLimit !== "undefined" && edgeIndex + 1 > options.edgesLimit) {
            setReplace(LIMIT_REPLACE_NODE, val, k, parent);
            return;
          }
          stack.push(val);
          if (Array.isArray(val)) {
            for (i = 0; i < val.length; i++) {
              deterministicDecirc(val[i], i, i, stack, val, depth, options);
            }
          } else {
            var tmp = {};
            var keys = Object.keys(val).sort(compareFunction);
            for (i = 0; i < keys.length; i++) {
              var key = keys[i];
              deterministicDecirc(val[key], key, i, stack, val, depth, options);
              tmp[key] = val[key];
            }
            if (typeof parent !== "undefined") {
              arr.push([parent, k, val]);
              parent[k] = tmp;
            } else {
              return tmp;
            }
          }
          stack.pop();
        }
      }
      function replaceGetterValues(replacer) {
        replacer = typeof replacer !== "undefined" ? replacer : function(k, v) {
          return v;
        };
        return function(key, val) {
          if (replacerStack.length > 0) {
            for (var i = 0; i < replacerStack.length; i++) {
              var part = replacerStack[i];
              if (part[1] === key && part[0] === val) {
                val = part[2];
                replacerStack.splice(i, 1);
                break;
              }
            }
          }
          return replacer.call(this, key, val);
        };
      }
    }
  });

  // node_modules/eth-rpc-errors/dist/classes.js
  var require_classes = __commonJS({
    "node_modules/eth-rpc-errors/dist/classes.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.EthereumProviderError = exports.EthereumRpcError = void 0;
      var fast_safe_stringify_1 = require_fast_safe_stringify();
      var EthereumRpcError = class extends Error {
        constructor(code, message, data) {
          if (!Number.isInteger(code)) {
            throw new Error('"code" must be an integer.');
          }
          if (!message || typeof message !== "string") {
            throw new Error('"message" must be a nonempty string.');
          }
          super(message);
          this.code = code;
          if (data !== void 0) {
            this.data = data;
          }
        }
        /**
         * Returns a plain object with all public class properties.
         */
        serialize() {
          const serialized = {
            code: this.code,
            message: this.message
          };
          if (this.data !== void 0) {
            serialized.data = this.data;
          }
          if (this.stack) {
            serialized.stack = this.stack;
          }
          return serialized;
        }
        /**
         * Return a string representation of the serialized error, omitting
         * any circular references.
         */
        toString() {
          return fast_safe_stringify_1.default(this.serialize(), stringifyReplacer, 2);
        }
      };
      exports.EthereumRpcError = EthereumRpcError;
      var EthereumProviderError = class extends EthereumRpcError {
        /**
         * Create an Ethereum Provider JSON-RPC error.
         * `code` must be an integer in the 1000 <= 4999 range.
         */
        constructor(code, message, data) {
          if (!isValidEthProviderCode(code)) {
            throw new Error('"code" must be an integer such that: 1000 <= code <= 4999');
          }
          super(code, message, data);
        }
      };
      exports.EthereumProviderError = EthereumProviderError;
      function isValidEthProviderCode(code) {
        return Number.isInteger(code) && code >= 1e3 && code <= 4999;
      }
      function stringifyReplacer(_, value) {
        if (value === "[Circular]") {
          return void 0;
        }
        return value;
      }
    }
  });

  // node_modules/eth-rpc-errors/dist/error-constants.js
  var require_error_constants = __commonJS({
    "node_modules/eth-rpc-errors/dist/error-constants.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.errorValues = exports.errorCodes = void 0;
      exports.errorCodes = {
        rpc: {
          invalidInput: -32e3,
          resourceNotFound: -32001,
          resourceUnavailable: -32002,
          transactionRejected: -32003,
          methodNotSupported: -32004,
          limitExceeded: -32005,
          parse: -32700,
          invalidRequest: -32600,
          methodNotFound: -32601,
          invalidParams: -32602,
          internal: -32603
        },
        provider: {
          userRejectedRequest: 4001,
          unauthorized: 4100,
          unsupportedMethod: 4200,
          disconnected: 4900,
          chainDisconnected: 4901
        }
      };
      exports.errorValues = {
        "-32700": {
          standard: "JSON RPC 2.0",
          message: "Invalid JSON was received by the server. An error occurred on the server while parsing the JSON text."
        },
        "-32600": {
          standard: "JSON RPC 2.0",
          message: "The JSON sent is not a valid Request object."
        },
        "-32601": {
          standard: "JSON RPC 2.0",
          message: "The method does not exist / is not available."
        },
        "-32602": {
          standard: "JSON RPC 2.0",
          message: "Invalid method parameter(s)."
        },
        "-32603": {
          standard: "JSON RPC 2.0",
          message: "Internal JSON-RPC error."
        },
        "-32000": {
          standard: "EIP-1474",
          message: "Invalid input."
        },
        "-32001": {
          standard: "EIP-1474",
          message: "Resource not found."
        },
        "-32002": {
          standard: "EIP-1474",
          message: "Resource unavailable."
        },
        "-32003": {
          standard: "EIP-1474",
          message: "Transaction rejected."
        },
        "-32004": {
          standard: "EIP-1474",
          message: "Method not supported."
        },
        "-32005": {
          standard: "EIP-1474",
          message: "Request limit exceeded."
        },
        "4001": {
          standard: "EIP-1193",
          message: "User rejected the request."
        },
        "4100": {
          standard: "EIP-1193",
          message: "The requested account and/or method has not been authorized by the user."
        },
        "4200": {
          standard: "EIP-1193",
          message: "The requested method is not supported by this Ethereum provider."
        },
        "4900": {
          standard: "EIP-1193",
          message: "The provider is disconnected from all chains."
        },
        "4901": {
          standard: "EIP-1193",
          message: "The provider is disconnected from the specified chain."
        }
      };
    }
  });

  // node_modules/eth-rpc-errors/dist/utils.js
  var require_utils = __commonJS({
    "node_modules/eth-rpc-errors/dist/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.serializeError = exports.isValidCode = exports.getMessageFromCode = exports.JSON_RPC_SERVER_ERROR_MESSAGE = void 0;
      var error_constants_1 = require_error_constants();
      var classes_1 = require_classes();
      var FALLBACK_ERROR_CODE = error_constants_1.errorCodes.rpc.internal;
      var FALLBACK_MESSAGE = "Unspecified error message. This is a bug, please report it.";
      var FALLBACK_ERROR = {
        code: FALLBACK_ERROR_CODE,
        message: getMessageFromCode(FALLBACK_ERROR_CODE)
      };
      exports.JSON_RPC_SERVER_ERROR_MESSAGE = "Unspecified server error.";
      function getMessageFromCode(code, fallbackMessage = FALLBACK_MESSAGE) {
        if (Number.isInteger(code)) {
          const codeString = code.toString();
          if (hasKey(error_constants_1.errorValues, codeString)) {
            return error_constants_1.errorValues[codeString].message;
          }
          if (isJsonRpcServerError(code)) {
            return exports.JSON_RPC_SERVER_ERROR_MESSAGE;
          }
        }
        return fallbackMessage;
      }
      exports.getMessageFromCode = getMessageFromCode;
      function isValidCode(code) {
        if (!Number.isInteger(code)) {
          return false;
        }
        const codeString = code.toString();
        if (error_constants_1.errorValues[codeString]) {
          return true;
        }
        if (isJsonRpcServerError(code)) {
          return true;
        }
        return false;
      }
      exports.isValidCode = isValidCode;
      function serializeError(error, { fallbackError = FALLBACK_ERROR, shouldIncludeStack = false } = {}) {
        var _a, _b;
        if (!fallbackError || !Number.isInteger(fallbackError.code) || typeof fallbackError.message !== "string") {
          throw new Error("Must provide fallback error with integer number code and string message.");
        }
        if (error instanceof classes_1.EthereumRpcError) {
          return error.serialize();
        }
        const serialized = {};
        if (error && typeof error === "object" && !Array.isArray(error) && hasKey(error, "code") && isValidCode(error.code)) {
          const _error = error;
          serialized.code = _error.code;
          if (_error.message && typeof _error.message === "string") {
            serialized.message = _error.message;
            if (hasKey(_error, "data")) {
              serialized.data = _error.data;
            }
          } else {
            serialized.message = getMessageFromCode(serialized.code);
            serialized.data = { originalError: assignOriginalError(error) };
          }
        } else {
          serialized.code = fallbackError.code;
          const message = (_a = error) === null || _a === void 0 ? void 0 : _a.message;
          serialized.message = message && typeof message === "string" ? message : fallbackError.message;
          serialized.data = { originalError: assignOriginalError(error) };
        }
        const stack = (_b = error) === null || _b === void 0 ? void 0 : _b.stack;
        if (shouldIncludeStack && error && stack && typeof stack === "string") {
          serialized.stack = stack;
        }
        return serialized;
      }
      exports.serializeError = serializeError;
      function isJsonRpcServerError(code) {
        return code >= -32099 && code <= -32e3;
      }
      function assignOriginalError(error) {
        if (error && typeof error === "object" && !Array.isArray(error)) {
          return Object.assign({}, error);
        }
        return error;
      }
      function hasKey(obj, key) {
        return Object.prototype.hasOwnProperty.call(obj, key);
      }
    }
  });

  // node_modules/eth-rpc-errors/dist/errors.js
  var require_errors = __commonJS({
    "node_modules/eth-rpc-errors/dist/errors.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ethErrors = void 0;
      var classes_1 = require_classes();
      var utils_1 = require_utils();
      var error_constants_1 = require_error_constants();
      exports.ethErrors = {
        rpc: {
          /**
           * Get a JSON RPC 2.0 Parse (-32700) error.
           */
          parse: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.parse, arg),
          /**
           * Get a JSON RPC 2.0 Invalid Request (-32600) error.
           */
          invalidRequest: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidRequest, arg),
          /**
           * Get a JSON RPC 2.0 Invalid Params (-32602) error.
           */
          invalidParams: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidParams, arg),
          /**
           * Get a JSON RPC 2.0 Method Not Found (-32601) error.
           */
          methodNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotFound, arg),
          /**
           * Get a JSON RPC 2.0 Internal (-32603) error.
           */
          internal: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.internal, arg),
          /**
           * Get a JSON RPC 2.0 Server error.
           * Permits integer error codes in the [ -32099 <= -32005 ] range.
           * Codes -32000 through -32004 are reserved by EIP-1474.
           */
          server: (opts) => {
            if (!opts || typeof opts !== "object" || Array.isArray(opts)) {
              throw new Error("Ethereum RPC Server errors must provide single object argument.");
            }
            const { code } = opts;
            if (!Number.isInteger(code) || code > -32005 || code < -32099) {
              throw new Error('"code" must be an integer such that: -32099 <= code <= -32005');
            }
            return getEthJsonRpcError(code, opts);
          },
          /**
           * Get an Ethereum JSON RPC Invalid Input (-32000) error.
           */
          invalidInput: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.invalidInput, arg),
          /**
           * Get an Ethereum JSON RPC Resource Not Found (-32001) error.
           */
          resourceNotFound: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceNotFound, arg),
          /**
           * Get an Ethereum JSON RPC Resource Unavailable (-32002) error.
           */
          resourceUnavailable: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.resourceUnavailable, arg),
          /**
           * Get an Ethereum JSON RPC Transaction Rejected (-32003) error.
           */
          transactionRejected: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.transactionRejected, arg),
          /**
           * Get an Ethereum JSON RPC Method Not Supported (-32004) error.
           */
          methodNotSupported: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.methodNotSupported, arg),
          /**
           * Get an Ethereum JSON RPC Limit Exceeded (-32005) error.
           */
          limitExceeded: (arg) => getEthJsonRpcError(error_constants_1.errorCodes.rpc.limitExceeded, arg)
        },
        provider: {
          /**
           * Get an Ethereum Provider User Rejected Request (4001) error.
           */
          userRejectedRequest: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.userRejectedRequest, arg);
          },
          /**
           * Get an Ethereum Provider Unauthorized (4100) error.
           */
          unauthorized: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.unauthorized, arg);
          },
          /**
           * Get an Ethereum Provider Unsupported Method (4200) error.
           */
          unsupportedMethod: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.unsupportedMethod, arg);
          },
          /**
           * Get an Ethereum Provider Not Connected (4900) error.
           */
          disconnected: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.disconnected, arg);
          },
          /**
           * Get an Ethereum Provider Chain Not Connected (4901) error.
           */
          chainDisconnected: (arg) => {
            return getEthProviderError(error_constants_1.errorCodes.provider.chainDisconnected, arg);
          },
          /**
           * Get a custom Ethereum Provider error.
           */
          custom: (opts) => {
            if (!opts || typeof opts !== "object" || Array.isArray(opts)) {
              throw new Error("Ethereum Provider custom errors must provide single object argument.");
            }
            const { code, message, data } = opts;
            if (!message || typeof message !== "string") {
              throw new Error('"message" must be a nonempty string');
            }
            return new classes_1.EthereumProviderError(code, message, data);
          }
        }
      };
      function getEthJsonRpcError(code, arg) {
        const [message, data] = parseOpts(arg);
        return new classes_1.EthereumRpcError(code, message || utils_1.getMessageFromCode(code), data);
      }
      function getEthProviderError(code, arg) {
        const [message, data] = parseOpts(arg);
        return new classes_1.EthereumProviderError(code, message || utils_1.getMessageFromCode(code), data);
      }
      function parseOpts(arg) {
        if (arg) {
          if (typeof arg === "string") {
            return [arg];
          } else if (typeof arg === "object" && !Array.isArray(arg)) {
            const { message, data } = arg;
            if (message && typeof message !== "string") {
              throw new Error("Must specify string message.");
            }
            return [message || void 0, data];
          }
        }
        return [];
      }
    }
  });

  // node_modules/eth-rpc-errors/dist/index.js
  var require_dist = __commonJS({
    "node_modules/eth-rpc-errors/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getMessageFromCode = exports.serializeError = exports.EthereumProviderError = exports.EthereumRpcError = exports.ethErrors = exports.errorCodes = void 0;
      var classes_1 = require_classes();
      Object.defineProperty(exports, "EthereumRpcError", { enumerable: true, get: function() {
        return classes_1.EthereumRpcError;
      } });
      Object.defineProperty(exports, "EthereumProviderError", { enumerable: true, get: function() {
        return classes_1.EthereumProviderError;
      } });
      var utils_1 = require_utils();
      Object.defineProperty(exports, "serializeError", { enumerable: true, get: function() {
        return utils_1.serializeError;
      } });
      Object.defineProperty(exports, "getMessageFromCode", { enumerable: true, get: function() {
        return utils_1.getMessageFromCode;
      } });
      var errors_1 = require_errors();
      Object.defineProperty(exports, "ethErrors", { enumerable: true, get: function() {
        return errors_1.ethErrors;
      } });
      var error_constants_1 = require_error_constants();
      Object.defineProperty(exports, "errorCodes", { enumerable: true, get: function() {
        return error_constants_1.errorCodes;
      } });
    }
  });

  // node_modules/events/events.js
  var require_events = __commonJS({
    "node_modules/events/events.js"(exports, module) {
      "use strict";
      var R = typeof Reflect === "object" ? Reflect : null;
      var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
        return Function.prototype.apply.call(target, receiver, args);
      };
      var ReflectOwnKeys;
      if (R && typeof R.ownKeys === "function") {
        ReflectOwnKeys = R.ownKeys;
      } else if (Object.getOwnPropertySymbols) {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
        };
      } else {
        ReflectOwnKeys = function ReflectOwnKeys2(target) {
          return Object.getOwnPropertyNames(target);
        };
      }
      function ProcessEmitWarning(warning) {
        if (console && console.warn)
          console.warn(warning);
      }
      var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
        return value !== value;
      };
      function EventEmitter3() {
        EventEmitter3.init.call(this);
      }
      module.exports = EventEmitter3;
      module.exports.once = once;
      EventEmitter3.EventEmitter = EventEmitter3;
      EventEmitter3.prototype._events = void 0;
      EventEmitter3.prototype._eventsCount = 0;
      EventEmitter3.prototype._maxListeners = void 0;
      var defaultMaxListeners = 10;
      function checkListener(listener) {
        if (typeof listener !== "function") {
          throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
        }
      }
      Object.defineProperty(EventEmitter3, "defaultMaxListeners", {
        enumerable: true,
        get: function() {
          return defaultMaxListeners;
        },
        set: function(arg) {
          if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
            throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
          }
          defaultMaxListeners = arg;
        }
      });
      EventEmitter3.init = function() {
        if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        }
        this._maxListeners = this._maxListeners || void 0;
      };
      EventEmitter3.prototype.setMaxListeners = function setMaxListeners(n) {
        if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
          throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
        }
        this._maxListeners = n;
        return this;
      };
      function _getMaxListeners(that) {
        if (that._maxListeners === void 0)
          return EventEmitter3.defaultMaxListeners;
        return that._maxListeners;
      }
      EventEmitter3.prototype.getMaxListeners = function getMaxListeners() {
        return _getMaxListeners(this);
      };
      EventEmitter3.prototype.emit = function emit(type) {
        var args = [];
        for (var i = 1; i < arguments.length; i++)
          args.push(arguments[i]);
        var doError = type === "error";
        var events = this._events;
        if (events !== void 0)
          doError = doError && events.error === void 0;
        else if (!doError)
          return false;
        if (doError) {
          var er;
          if (args.length > 0)
            er = args[0];
          if (er instanceof Error) {
            throw er;
          }
          var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
          err.context = er;
          throw err;
        }
        var handler = events[type];
        if (handler === void 0)
          return false;
        if (typeof handler === "function") {
          ReflectApply(handler, this, args);
        } else {
          var len = handler.length;
          var listeners = arrayClone(handler, len);
          for (var i = 0; i < len; ++i)
            ReflectApply(listeners[i], this, args);
        }
        return true;
      };
      function _addListener(target, type, listener, prepend) {
        var m;
        var events;
        var existing;
        checkListener(listener);
        events = target._events;
        if (events === void 0) {
          events = target._events = /* @__PURE__ */ Object.create(null);
          target._eventsCount = 0;
        } else {
          if (events.newListener !== void 0) {
            target.emit(
              "newListener",
              type,
              listener.listener ? listener.listener : listener
            );
            events = target._events;
          }
          existing = events[type];
        }
        if (existing === void 0) {
          existing = events[type] = listener;
          ++target._eventsCount;
        } else {
          if (typeof existing === "function") {
            existing = events[type] = prepend ? [listener, existing] : [existing, listener];
          } else if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
          m = _getMaxListeners(target);
          if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
            w.name = "MaxListenersExceededWarning";
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
          }
        }
        return target;
      }
      EventEmitter3.prototype.addListener = function addListener(type, listener) {
        return _addListener(this, type, listener, false);
      };
      EventEmitter3.prototype.on = EventEmitter3.prototype.addListener;
      EventEmitter3.prototype.prependListener = function prependListener(type, listener) {
        return _addListener(this, type, listener, true);
      };
      function onceWrapper() {
        if (!this.fired) {
          this.target.removeListener(this.type, this.wrapFn);
          this.fired = true;
          if (arguments.length === 0)
            return this.listener.call(this.target);
          return this.listener.apply(this.target, arguments);
        }
      }
      function _onceWrap(target, type, listener) {
        var state = { fired: false, wrapFn: void 0, target, type, listener };
        var wrapped = onceWrapper.bind(state);
        wrapped.listener = listener;
        state.wrapFn = wrapped;
        return wrapped;
      }
      EventEmitter3.prototype.once = function once2(type, listener) {
        checkListener(listener);
        this.on(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter3.prototype.prependOnceListener = function prependOnceListener(type, listener) {
        checkListener(listener);
        this.prependListener(type, _onceWrap(this, type, listener));
        return this;
      };
      EventEmitter3.prototype.removeListener = function removeListener(type, listener) {
        var list, events, position, i, originalListener;
        checkListener(listener);
        events = this._events;
        if (events === void 0)
          return this;
        list = events[type];
        if (list === void 0)
          return this;
        if (list === listener || list.listener === listener) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else {
            delete events[type];
            if (events.removeListener)
              this.emit("removeListener", type, list.listener || listener);
          }
        } else if (typeof list !== "function") {
          position = -1;
          for (i = list.length - 1; i >= 0; i--) {
            if (list[i] === listener || list[i].listener === listener) {
              originalListener = list[i].listener;
              position = i;
              break;
            }
          }
          if (position < 0)
            return this;
          if (position === 0)
            list.shift();
          else {
            spliceOne(list, position);
          }
          if (list.length === 1)
            events[type] = list[0];
          if (events.removeListener !== void 0)
            this.emit("removeListener", type, originalListener || listener);
        }
        return this;
      };
      EventEmitter3.prototype.off = EventEmitter3.prototype.removeListener;
      EventEmitter3.prototype.removeAllListeners = function removeAllListeners(type) {
        var listeners, events, i;
        events = this._events;
        if (events === void 0)
          return this;
        if (events.removeListener === void 0) {
          if (arguments.length === 0) {
            this._events = /* @__PURE__ */ Object.create(null);
            this._eventsCount = 0;
          } else if (events[type] !== void 0) {
            if (--this._eventsCount === 0)
              this._events = /* @__PURE__ */ Object.create(null);
            else
              delete events[type];
          }
          return this;
        }
        if (arguments.length === 0) {
          var keys = Object.keys(events);
          var key;
          for (i = 0; i < keys.length; ++i) {
            key = keys[i];
            if (key === "removeListener")
              continue;
            this.removeAllListeners(key);
          }
          this.removeAllListeners("removeListener");
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
          return this;
        }
        listeners = events[type];
        if (typeof listeners === "function") {
          this.removeListener(type, listeners);
        } else if (listeners !== void 0) {
          for (i = listeners.length - 1; i >= 0; i--) {
            this.removeListener(type, listeners[i]);
          }
        }
        return this;
      };
      function _listeners(target, type, unwrap) {
        var events = target._events;
        if (events === void 0)
          return [];
        var evlistener = events[type];
        if (evlistener === void 0)
          return [];
        if (typeof evlistener === "function")
          return unwrap ? [evlistener.listener || evlistener] : [evlistener];
        return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
      }
      EventEmitter3.prototype.listeners = function listeners(type) {
        return _listeners(this, type, true);
      };
      EventEmitter3.prototype.rawListeners = function rawListeners(type) {
        return _listeners(this, type, false);
      };
      EventEmitter3.listenerCount = function(emitter, type) {
        if (typeof emitter.listenerCount === "function") {
          return emitter.listenerCount(type);
        } else {
          return listenerCount.call(emitter, type);
        }
      };
      EventEmitter3.prototype.listenerCount = listenerCount;
      function listenerCount(type) {
        var events = this._events;
        if (events !== void 0) {
          var evlistener = events[type];
          if (typeof evlistener === "function") {
            return 1;
          } else if (evlistener !== void 0) {
            return evlistener.length;
          }
        }
        return 0;
      }
      EventEmitter3.prototype.eventNames = function eventNames() {
        return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
      };
      function arrayClone(arr, n) {
        var copy = new Array(n);
        for (var i = 0; i < n; ++i)
          copy[i] = arr[i];
        return copy;
      }
      function spliceOne(list, index) {
        for (; index + 1 < list.length; index++)
          list[index] = list[index + 1];
        list.pop();
      }
      function unwrapListeners(arr) {
        var ret = new Array(arr.length);
        for (var i = 0; i < ret.length; ++i) {
          ret[i] = arr[i].listener || arr[i];
        }
        return ret;
      }
      function once(emitter, name) {
        return new Promise(function(resolve, reject) {
          function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
          }
          function resolver() {
            if (typeof emitter.removeListener === "function") {
              emitter.removeListener("error", errorListener);
            }
            resolve([].slice.call(arguments));
          }
          ;
          eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
          if (name !== "error") {
            addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
          }
        });
      }
      function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
        if (typeof emitter.on === "function") {
          eventTargetAgnosticAddListener(emitter, "error", handler, flags);
        }
      }
      function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
        if (typeof emitter.on === "function") {
          if (flags.once) {
            emitter.once(name, listener);
          } else {
            emitter.on(name, listener);
          }
        } else if (typeof emitter.addEventListener === "function") {
          emitter.addEventListener(name, function wrapListener(arg) {
            if (flags.once) {
              emitter.removeEventListener(name, wrapListener);
            }
            listener(arg);
          });
        } else {
          throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
        }
      }
    }
  });

  // node_modules/lodash/lodash.js
  var require_lodash = __commonJS({
    "node_modules/lodash/lodash.js"(exports, module) {
      (function() {
        var undefined2;
        var VERSION = "4.17.21";
        var LARGE_ARRAY_SIZE = 200;
        var CORE_ERROR_TEXT = "Unsupported core-js use. Try https://npms.io/search?q=ponyfill.", FUNC_ERROR_TEXT = "Expected a function", INVALID_TEMPL_VAR_ERROR_TEXT = "Invalid `variable` option passed into `_.template`";
        var HASH_UNDEFINED = "__lodash_hash_undefined__";
        var MAX_MEMOIZE_SIZE = 500;
        var PLACEHOLDER = "__lodash_placeholder__";
        var CLONE_DEEP_FLAG = 1, CLONE_FLAT_FLAG = 2, CLONE_SYMBOLS_FLAG = 4;
        var COMPARE_PARTIAL_FLAG = 1, COMPARE_UNORDERED_FLAG = 2;
        var WRAP_BIND_FLAG = 1, WRAP_BIND_KEY_FLAG = 2, WRAP_CURRY_BOUND_FLAG = 4, WRAP_CURRY_FLAG = 8, WRAP_CURRY_RIGHT_FLAG = 16, WRAP_PARTIAL_FLAG = 32, WRAP_PARTIAL_RIGHT_FLAG = 64, WRAP_ARY_FLAG = 128, WRAP_REARG_FLAG = 256, WRAP_FLIP_FLAG = 512;
        var DEFAULT_TRUNC_LENGTH = 30, DEFAULT_TRUNC_OMISSION = "...";
        var HOT_COUNT = 800, HOT_SPAN = 16;
        var LAZY_FILTER_FLAG = 1, LAZY_MAP_FLAG = 2, LAZY_WHILE_FLAG = 3;
        var INFINITY = 1 / 0, MAX_SAFE_INTEGER = 9007199254740991, MAX_INTEGER = 17976931348623157e292, NAN = 0 / 0;
        var MAX_ARRAY_LENGTH = 4294967295, MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1, HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;
        var wrapFlags = [
          ["ary", WRAP_ARY_FLAG],
          ["bind", WRAP_BIND_FLAG],
          ["bindKey", WRAP_BIND_KEY_FLAG],
          ["curry", WRAP_CURRY_FLAG],
          ["curryRight", WRAP_CURRY_RIGHT_FLAG],
          ["flip", WRAP_FLIP_FLAG],
          ["partial", WRAP_PARTIAL_FLAG],
          ["partialRight", WRAP_PARTIAL_RIGHT_FLAG],
          ["rearg", WRAP_REARG_FLAG]
        ];
        var argsTag = "[object Arguments]", arrayTag = "[object Array]", asyncTag = "[object AsyncFunction]", boolTag = "[object Boolean]", dateTag = "[object Date]", domExcTag = "[object DOMException]", errorTag = "[object Error]", funcTag = "[object Function]", genTag = "[object GeneratorFunction]", mapTag = "[object Map]", numberTag = "[object Number]", nullTag = "[object Null]", objectTag = "[object Object]", promiseTag = "[object Promise]", proxyTag = "[object Proxy]", regexpTag = "[object RegExp]", setTag = "[object Set]", stringTag = "[object String]", symbolTag = "[object Symbol]", undefinedTag = "[object Undefined]", weakMapTag = "[object WeakMap]", weakSetTag = "[object WeakSet]";
        var arrayBufferTag = "[object ArrayBuffer]", dataViewTag = "[object DataView]", float32Tag = "[object Float32Array]", float64Tag = "[object Float64Array]", int8Tag = "[object Int8Array]", int16Tag = "[object Int16Array]", int32Tag = "[object Int32Array]", uint8Tag = "[object Uint8Array]", uint8ClampedTag = "[object Uint8ClampedArray]", uint16Tag = "[object Uint16Array]", uint32Tag = "[object Uint32Array]";
        var reEmptyStringLeading = /\b__p \+= '';/g, reEmptyStringMiddle = /\b(__p \+=) '' \+/g, reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;
        var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g, reUnescapedHtml = /[&<>"']/g, reHasEscapedHtml = RegExp(reEscapedHtml.source), reHasUnescapedHtml = RegExp(reUnescapedHtml.source);
        var reEscape = /<%-([\s\S]+?)%>/g, reEvaluate = /<%([\s\S]+?)%>/g, reInterpolate = /<%=([\s\S]+?)%>/g;
        var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/, reIsPlainProp = /^\w*$/, rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;
        var reRegExpChar = /[\\^$.*+?()[\]{}|]/g, reHasRegExpChar = RegExp(reRegExpChar.source);
        var reTrimStart = /^\s+/;
        var reWhitespace = /\s/;
        var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/, reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/, reSplitDetails = /,? & /;
        var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;
        var reForbiddenIdentifierChars = /[()=,{}\[\]\/\s]/;
        var reEscapeChar = /\\(\\)?/g;
        var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;
        var reFlags = /\w*$/;
        var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;
        var reIsBinary = /^0b[01]+$/i;
        var reIsHostCtor = /^\[object .+?Constructor\]$/;
        var reIsOctal = /^0o[0-7]+$/i;
        var reIsUint = /^(?:0|[1-9]\d*)$/;
        var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;
        var reNoMatch = /($^)/;
        var reUnescapedString = /['\n\r\u2028\u2029\\]/g;
        var rsAstralRange = "\\ud800-\\udfff", rsComboMarksRange = "\\u0300-\\u036f", reComboHalfMarksRange = "\\ufe20-\\ufe2f", rsComboSymbolsRange = "\\u20d0-\\u20ff", rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange, rsDingbatRange = "\\u2700-\\u27bf", rsLowerRange = "a-z\\xdf-\\xf6\\xf8-\\xff", rsMathOpRange = "\\xac\\xb1\\xd7\\xf7", rsNonCharRange = "\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf", rsPunctuationRange = "\\u2000-\\u206f", rsSpaceRange = " \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000", rsUpperRange = "A-Z\\xc0-\\xd6\\xd8-\\xde", rsVarRange = "\\ufe0e\\ufe0f", rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;
        var rsApos = "['\u2019]", rsAstral = "[" + rsAstralRange + "]", rsBreak = "[" + rsBreakRange + "]", rsCombo = "[" + rsComboRange + "]", rsDigits = "\\d+", rsDingbat = "[" + rsDingbatRange + "]", rsLower = "[" + rsLowerRange + "]", rsMisc = "[^" + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + "]", rsFitz = "\\ud83c[\\udffb-\\udfff]", rsModifier = "(?:" + rsCombo + "|" + rsFitz + ")", rsNonAstral = "[^" + rsAstralRange + "]", rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}", rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]", rsUpper = "[" + rsUpperRange + "]", rsZWJ = "\\u200d";
        var rsMiscLower = "(?:" + rsLower + "|" + rsMisc + ")", rsMiscUpper = "(?:" + rsUpper + "|" + rsMisc + ")", rsOptContrLower = "(?:" + rsApos + "(?:d|ll|m|re|s|t|ve))?", rsOptContrUpper = "(?:" + rsApos + "(?:D|LL|M|RE|S|T|VE))?", reOptMod = rsModifier + "?", rsOptVar = "[" + rsVarRange + "]?", rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*", rsOrdLower = "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", rsOrdUpper = "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", rsSeq = rsOptVar + reOptMod + rsOptJoin, rsEmoji = "(?:" + [rsDingbat, rsRegional, rsSurrPair].join("|") + ")" + rsSeq, rsSymbol = "(?:" + [rsNonAstral + rsCombo + "?", rsCombo, rsRegional, rsSurrPair, rsAstral].join("|") + ")";
        var reApos = RegExp(rsApos, "g");
        var reComboMark = RegExp(rsCombo, "g");
        var reUnicode = RegExp(rsFitz + "(?=" + rsFitz + ")|" + rsSymbol + rsSeq, "g");
        var reUnicodeWord = RegExp([
          rsUpper + "?" + rsLower + "+" + rsOptContrLower + "(?=" + [rsBreak, rsUpper, "$"].join("|") + ")",
          rsMiscUpper + "+" + rsOptContrUpper + "(?=" + [rsBreak, rsUpper + rsMiscLower, "$"].join("|") + ")",
          rsUpper + "?" + rsMiscLower + "+" + rsOptContrLower,
          rsUpper + "+" + rsOptContrUpper,
          rsOrdUpper,
          rsOrdLower,
          rsDigits,
          rsEmoji
        ].join("|"), "g");
        var reHasUnicode = RegExp("[" + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + "]");
        var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;
        var contextProps = [
          "Array",
          "Buffer",
          "DataView",
          "Date",
          "Error",
          "Float32Array",
          "Float64Array",
          "Function",
          "Int8Array",
          "Int16Array",
          "Int32Array",
          "Map",
          "Math",
          "Object",
          "Promise",
          "RegExp",
          "Set",
          "String",
          "Symbol",
          "TypeError",
          "Uint8Array",
          "Uint8ClampedArray",
          "Uint16Array",
          "Uint32Array",
          "WeakMap",
          "_",
          "clearTimeout",
          "isFinite",
          "parseInt",
          "setTimeout"
        ];
        var templateCounter = -1;
        var typedArrayTags = {};
        typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
        typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
        var cloneableTags = {};
        cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
        cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;
        var deburredLetters = {
          // Latin-1 Supplement block.
          "\xC0": "A",
          "\xC1": "A",
          "\xC2": "A",
          "\xC3": "A",
          "\xC4": "A",
          "\xC5": "A",
          "\xE0": "a",
          "\xE1": "a",
          "\xE2": "a",
          "\xE3": "a",
          "\xE4": "a",
          "\xE5": "a",
          "\xC7": "C",
          "\xE7": "c",
          "\xD0": "D",
          "\xF0": "d",
          "\xC8": "E",
          "\xC9": "E",
          "\xCA": "E",
          "\xCB": "E",
          "\xE8": "e",
          "\xE9": "e",
          "\xEA": "e",
          "\xEB": "e",
          "\xCC": "I",
          "\xCD": "I",
          "\xCE": "I",
          "\xCF": "I",
          "\xEC": "i",
          "\xED": "i",
          "\xEE": "i",
          "\xEF": "i",
          "\xD1": "N",
          "\xF1": "n",
          "\xD2": "O",
          "\xD3": "O",
          "\xD4": "O",
          "\xD5": "O",
          "\xD6": "O",
          "\xD8": "O",
          "\xF2": "o",
          "\xF3": "o",
          "\xF4": "o",
          "\xF5": "o",
          "\xF6": "o",
          "\xF8": "o",
          "\xD9": "U",
          "\xDA": "U",
          "\xDB": "U",
          "\xDC": "U",
          "\xF9": "u",
          "\xFA": "u",
          "\xFB": "u",
          "\xFC": "u",
          "\xDD": "Y",
          "\xFD": "y",
          "\xFF": "y",
          "\xC6": "Ae",
          "\xE6": "ae",
          "\xDE": "Th",
          "\xFE": "th",
          "\xDF": "ss",
          // Latin Extended-A block.
          "\u0100": "A",
          "\u0102": "A",
          "\u0104": "A",
          "\u0101": "a",
          "\u0103": "a",
          "\u0105": "a",
          "\u0106": "C",
          "\u0108": "C",
          "\u010A": "C",
          "\u010C": "C",
          "\u0107": "c",
          "\u0109": "c",
          "\u010B": "c",
          "\u010D": "c",
          "\u010E": "D",
          "\u0110": "D",
          "\u010F": "d",
          "\u0111": "d",
          "\u0112": "E",
          "\u0114": "E",
          "\u0116": "E",
          "\u0118": "E",
          "\u011A": "E",
          "\u0113": "e",
          "\u0115": "e",
          "\u0117": "e",
          "\u0119": "e",
          "\u011B": "e",
          "\u011C": "G",
          "\u011E": "G",
          "\u0120": "G",
          "\u0122": "G",
          "\u011D": "g",
          "\u011F": "g",
          "\u0121": "g",
          "\u0123": "g",
          "\u0124": "H",
          "\u0126": "H",
          "\u0125": "h",
          "\u0127": "h",
          "\u0128": "I",
          "\u012A": "I",
          "\u012C": "I",
          "\u012E": "I",
          "\u0130": "I",
          "\u0129": "i",
          "\u012B": "i",
          "\u012D": "i",
          "\u012F": "i",
          "\u0131": "i",
          "\u0134": "J",
          "\u0135": "j",
          "\u0136": "K",
          "\u0137": "k",
          "\u0138": "k",
          "\u0139": "L",
          "\u013B": "L",
          "\u013D": "L",
          "\u013F": "L",
          "\u0141": "L",
          "\u013A": "l",
          "\u013C": "l",
          "\u013E": "l",
          "\u0140": "l",
          "\u0142": "l",
          "\u0143": "N",
          "\u0145": "N",
          "\u0147": "N",
          "\u014A": "N",
          "\u0144": "n",
          "\u0146": "n",
          "\u0148": "n",
          "\u014B": "n",
          "\u014C": "O",
          "\u014E": "O",
          "\u0150": "O",
          "\u014D": "o",
          "\u014F": "o",
          "\u0151": "o",
          "\u0154": "R",
          "\u0156": "R",
          "\u0158": "R",
          "\u0155": "r",
          "\u0157": "r",
          "\u0159": "r",
          "\u015A": "S",
          "\u015C": "S",
          "\u015E": "S",
          "\u0160": "S",
          "\u015B": "s",
          "\u015D": "s",
          "\u015F": "s",
          "\u0161": "s",
          "\u0162": "T",
          "\u0164": "T",
          "\u0166": "T",
          "\u0163": "t",
          "\u0165": "t",
          "\u0167": "t",
          "\u0168": "U",
          "\u016A": "U",
          "\u016C": "U",
          "\u016E": "U",
          "\u0170": "U",
          "\u0172": "U",
          "\u0169": "u",
          "\u016B": "u",
          "\u016D": "u",
          "\u016F": "u",
          "\u0171": "u",
          "\u0173": "u",
          "\u0174": "W",
          "\u0175": "w",
          "\u0176": "Y",
          "\u0177": "y",
          "\u0178": "Y",
          "\u0179": "Z",
          "\u017B": "Z",
          "\u017D": "Z",
          "\u017A": "z",
          "\u017C": "z",
          "\u017E": "z",
          "\u0132": "IJ",
          "\u0133": "ij",
          "\u0152": "Oe",
          "\u0153": "oe",
          "\u0149": "'n",
          "\u017F": "s"
        };
        var htmlEscapes = {
          "&": "&amp;",
          "<": "&lt;",
          ">": "&gt;",
          '"': "&quot;",
          "'": "&#39;"
        };
        var htmlUnescapes = {
          "&amp;": "&",
          "&lt;": "<",
          "&gt;": ">",
          "&quot;": '"',
          "&#39;": "'"
        };
        var stringEscapes = {
          "\\": "\\",
          "'": "'",
          "\n": "n",
          "\r": "r",
          "\u2028": "u2028",
          "\u2029": "u2029"
        };
        var freeParseFloat = parseFloat, freeParseInt = parseInt;
        var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
        var freeSelf = typeof self == "object" && self && self.Object === Object && self;
        var root = freeGlobal || freeSelf || Function("return this")();
        var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
        var freeModule = freeExports && typeof module == "object" && module && !module.nodeType && module;
        var moduleExports = freeModule && freeModule.exports === freeExports;
        var freeProcess = moduleExports && freeGlobal.process;
        var nodeUtil = function() {
          try {
            var types = freeModule && freeModule.require && freeModule.require("util").types;
            if (types) {
              return types;
            }
            return freeProcess && freeProcess.binding && freeProcess.binding("util");
          } catch (e) {
          }
        }();
        var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer, nodeIsDate = nodeUtil && nodeUtil.isDate, nodeIsMap = nodeUtil && nodeUtil.isMap, nodeIsRegExp = nodeUtil && nodeUtil.isRegExp, nodeIsSet = nodeUtil && nodeUtil.isSet, nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
        function apply(func, thisArg, args) {
          switch (args.length) {
            case 0:
              return func.call(thisArg);
            case 1:
              return func.call(thisArg, args[0]);
            case 2:
              return func.call(thisArg, args[0], args[1]);
            case 3:
              return func.call(thisArg, args[0], args[1], args[2]);
          }
          return func.apply(thisArg, args);
        }
        function arrayAggregator(array, setter, iteratee, accumulator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            var value = array[index];
            setter(accumulator, value, iteratee(value), array);
          }
          return accumulator;
        }
        function arrayEach(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (iteratee(array[index], index, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEachRight(array, iteratee) {
          var length = array == null ? 0 : array.length;
          while (length--) {
            if (iteratee(array[length], length, array) === false) {
              break;
            }
          }
          return array;
        }
        function arrayEvery(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (!predicate(array[index], index, array)) {
              return false;
            }
          }
          return true;
        }
        function arrayFilter(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (predicate(value, index, array)) {
              result[resIndex++] = value;
            }
          }
          return result;
        }
        function arrayIncludes(array, value) {
          var length = array == null ? 0 : array.length;
          return !!length && baseIndexOf(array, value, 0) > -1;
        }
        function arrayIncludesWith(array, value, comparator) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (comparator(value, array[index])) {
              return true;
            }
          }
          return false;
        }
        function arrayMap(array, iteratee) {
          var index = -1, length = array == null ? 0 : array.length, result = Array(length);
          while (++index < length) {
            result[index] = iteratee(array[index], index, array);
          }
          return result;
        }
        function arrayPush(array, values) {
          var index = -1, length = values.length, offset = array.length;
          while (++index < length) {
            array[offset + index] = values[index];
          }
          return array;
        }
        function arrayReduce(array, iteratee, accumulator, initAccum) {
          var index = -1, length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[++index];
          }
          while (++index < length) {
            accumulator = iteratee(accumulator, array[index], index, array);
          }
          return accumulator;
        }
        function arrayReduceRight(array, iteratee, accumulator, initAccum) {
          var length = array == null ? 0 : array.length;
          if (initAccum && length) {
            accumulator = array[--length];
          }
          while (length--) {
            accumulator = iteratee(accumulator, array[length], length, array);
          }
          return accumulator;
        }
        function arraySome(array, predicate) {
          var index = -1, length = array == null ? 0 : array.length;
          while (++index < length) {
            if (predicate(array[index], index, array)) {
              return true;
            }
          }
          return false;
        }
        var asciiSize = baseProperty("length");
        function asciiToArray(string) {
          return string.split("");
        }
        function asciiWords(string) {
          return string.match(reAsciiWord) || [];
        }
        function baseFindKey(collection, predicate, eachFunc) {
          var result;
          eachFunc(collection, function(value, key, collection2) {
            if (predicate(value, key, collection2)) {
              result = key;
              return false;
            }
          });
          return result;
        }
        function baseFindIndex(array, predicate, fromIndex, fromRight) {
          var length = array.length, index = fromIndex + (fromRight ? 1 : -1);
          while (fromRight ? index-- : ++index < length) {
            if (predicate(array[index], index, array)) {
              return index;
            }
          }
          return -1;
        }
        function baseIndexOf(array, value, fromIndex) {
          return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
        }
        function baseIndexOfWith(array, value, fromIndex, comparator) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (comparator(array[index], value)) {
              return index;
            }
          }
          return -1;
        }
        function baseIsNaN(value) {
          return value !== value;
        }
        function baseMean(array, iteratee) {
          var length = array == null ? 0 : array.length;
          return length ? baseSum(array, iteratee) / length : NAN;
        }
        function baseProperty(key) {
          return function(object) {
            return object == null ? undefined2 : object[key];
          };
        }
        function basePropertyOf(object) {
          return function(key) {
            return object == null ? undefined2 : object[key];
          };
        }
        function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
          eachFunc(collection, function(value, index, collection2) {
            accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection2);
          });
          return accumulator;
        }
        function baseSortBy(array, comparer) {
          var length = array.length;
          array.sort(comparer);
          while (length--) {
            array[length] = array[length].value;
          }
          return array;
        }
        function baseSum(array, iteratee) {
          var result, index = -1, length = array.length;
          while (++index < length) {
            var current = iteratee(array[index]);
            if (current !== undefined2) {
              result = result === undefined2 ? current : result + current;
            }
          }
          return result;
        }
        function baseTimes(n, iteratee) {
          var index = -1, result = Array(n);
          while (++index < n) {
            result[index] = iteratee(index);
          }
          return result;
        }
        function baseToPairs(object, props) {
          return arrayMap(props, function(key) {
            return [key, object[key]];
          });
        }
        function baseTrim(string) {
          return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, "") : string;
        }
        function baseUnary(func) {
          return function(value) {
            return func(value);
          };
        }
        function baseValues(object, props) {
          return arrayMap(props, function(key) {
            return object[key];
          });
        }
        function cacheHas(cache, key) {
          return cache.has(key);
        }
        function charsStartIndex(strSymbols, chrSymbols) {
          var index = -1, length = strSymbols.length;
          while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function charsEndIndex(strSymbols, chrSymbols) {
          var index = strSymbols.length;
          while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {
          }
          return index;
        }
        function countHolders(array, placeholder) {
          var length = array.length, result = 0;
          while (length--) {
            if (array[length] === placeholder) {
              ++result;
            }
          }
          return result;
        }
        var deburrLetter = basePropertyOf(deburredLetters);
        var escapeHtmlChar = basePropertyOf(htmlEscapes);
        function escapeStringChar(chr) {
          return "\\" + stringEscapes[chr];
        }
        function getValue(object, key) {
          return object == null ? undefined2 : object[key];
        }
        function hasUnicode(string) {
          return reHasUnicode.test(string);
        }
        function hasUnicodeWord(string) {
          return reHasUnicodeWord.test(string);
        }
        function iteratorToArray(iterator) {
          var data, result = [];
          while (!(data = iterator.next()).done) {
            result.push(data.value);
          }
          return result;
        }
        function mapToArray(map) {
          var index = -1, result = Array(map.size);
          map.forEach(function(value, key) {
            result[++index] = [key, value];
          });
          return result;
        }
        function overArg(func, transform) {
          return function(arg) {
            return func(transform(arg));
          };
        }
        function replaceHolders(array, placeholder) {
          var index = -1, length = array.length, resIndex = 0, result = [];
          while (++index < length) {
            var value = array[index];
            if (value === placeholder || value === PLACEHOLDER) {
              array[index] = PLACEHOLDER;
              result[resIndex++] = index;
            }
          }
          return result;
        }
        function setToArray(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = value;
          });
          return result;
        }
        function setToPairs(set) {
          var index = -1, result = Array(set.size);
          set.forEach(function(value) {
            result[++index] = [value, value];
          });
          return result;
        }
        function strictIndexOf(array, value, fromIndex) {
          var index = fromIndex - 1, length = array.length;
          while (++index < length) {
            if (array[index] === value) {
              return index;
            }
          }
          return -1;
        }
        function strictLastIndexOf(array, value, fromIndex) {
          var index = fromIndex + 1;
          while (index--) {
            if (array[index] === value) {
              return index;
            }
          }
          return index;
        }
        function stringSize(string) {
          return hasUnicode(string) ? unicodeSize(string) : asciiSize(string);
        }
        function stringToArray(string) {
          return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
        }
        function trimmedEndIndex(string) {
          var index = string.length;
          while (index-- && reWhitespace.test(string.charAt(index))) {
          }
          return index;
        }
        var unescapeHtmlChar = basePropertyOf(htmlUnescapes);
        function unicodeSize(string) {
          var result = reUnicode.lastIndex = 0;
          while (reUnicode.test(string)) {
            ++result;
          }
          return result;
        }
        function unicodeToArray(string) {
          return string.match(reUnicode) || [];
        }
        function unicodeWords(string) {
          return string.match(reUnicodeWord) || [];
        }
        var runInContext = function runInContext2(context) {
          context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));
          var Array2 = context.Array, Date2 = context.Date, Error2 = context.Error, Function2 = context.Function, Math2 = context.Math, Object2 = context.Object, RegExp2 = context.RegExp, String2 = context.String, TypeError2 = context.TypeError;
          var arrayProto = Array2.prototype, funcProto = Function2.prototype, objectProto = Object2.prototype;
          var coreJsData = context["__core-js_shared__"];
          var funcToString = funcProto.toString;
          var hasOwnProperty = objectProto.hasOwnProperty;
          var idCounter = 0;
          var maskSrcKey = function() {
            var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
            return uid ? "Symbol(src)_1." + uid : "";
          }();
          var nativeObjectToString = objectProto.toString;
          var objectCtorString = funcToString.call(Object2);
          var oldDash = root._;
          var reIsNative = RegExp2(
            "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
          );
          var Buffer2 = moduleExports ? context.Buffer : undefined2, Symbol2 = context.Symbol, Uint8Array2 = context.Uint8Array, allocUnsafe = Buffer2 ? Buffer2.allocUnsafe : undefined2, getPrototype = overArg(Object2.getPrototypeOf, Object2), objectCreate = Object2.create, propertyIsEnumerable = objectProto.propertyIsEnumerable, splice = arrayProto.splice, spreadableSymbol = Symbol2 ? Symbol2.isConcatSpreadable : undefined2, symIterator = Symbol2 ? Symbol2.iterator : undefined2, symToStringTag = Symbol2 ? Symbol2.toStringTag : undefined2;
          var defineProperty = function() {
            try {
              var func = getNative(Object2, "defineProperty");
              func({}, "", {});
              return func;
            } catch (e) {
            }
          }();
          var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout, ctxNow = Date2 && Date2.now !== root.Date.now && Date2.now, ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;
          var nativeCeil = Math2.ceil, nativeFloor = Math2.floor, nativeGetSymbols = Object2.getOwnPropertySymbols, nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : undefined2, nativeIsFinite = context.isFinite, nativeJoin = arrayProto.join, nativeKeys = overArg(Object2.keys, Object2), nativeMax = Math2.max, nativeMin = Math2.min, nativeNow = Date2.now, nativeParseInt = context.parseInt, nativeRandom = Math2.random, nativeReverse = arrayProto.reverse;
          var DataView2 = getNative(context, "DataView"), Map2 = getNative(context, "Map"), Promise2 = getNative(context, "Promise"), Set2 = getNative(context, "Set"), WeakMap2 = getNative(context, "WeakMap"), nativeCreate = getNative(Object2, "create");
          var metaMap = WeakMap2 && new WeakMap2();
          var realNames = {};
          var dataViewCtorString = toSource(DataView2), mapCtorString = toSource(Map2), promiseCtorString = toSource(Promise2), setCtorString = toSource(Set2), weakMapCtorString = toSource(WeakMap2);
          var symbolProto = Symbol2 ? Symbol2.prototype : undefined2, symbolValueOf = symbolProto ? symbolProto.valueOf : undefined2, symbolToString = symbolProto ? symbolProto.toString : undefined2;
          function lodash(value) {
            if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
              if (value instanceof LodashWrapper) {
                return value;
              }
              if (hasOwnProperty.call(value, "__wrapped__")) {
                return wrapperClone(value);
              }
            }
            return new LodashWrapper(value);
          }
          var baseCreate = function() {
            function object() {
            }
            return function(proto) {
              if (!isObject(proto)) {
                return {};
              }
              if (objectCreate) {
                return objectCreate(proto);
              }
              object.prototype = proto;
              var result2 = new object();
              object.prototype = undefined2;
              return result2;
            };
          }();
          function baseLodash() {
          }
          function LodashWrapper(value, chainAll) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__chain__ = !!chainAll;
            this.__index__ = 0;
            this.__values__ = undefined2;
          }
          lodash.templateSettings = {
            /**
             * Used to detect `data` property values to be HTML-escaped.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "escape": reEscape,
            /**
             * Used to detect code to be evaluated.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "evaluate": reEvaluate,
            /**
             * Used to detect `data` property values to inject.
             *
             * @memberOf _.templateSettings
             * @type {RegExp}
             */
            "interpolate": reInterpolate,
            /**
             * Used to reference the data object in the template text.
             *
             * @memberOf _.templateSettings
             * @type {string}
             */
            "variable": "",
            /**
             * Used to import variables into the compiled template.
             *
             * @memberOf _.templateSettings
             * @type {Object}
             */
            "imports": {
              /**
               * A reference to the `lodash` function.
               *
               * @memberOf _.templateSettings.imports
               * @type {Function}
               */
              "_": lodash
            }
          };
          lodash.prototype = baseLodash.prototype;
          lodash.prototype.constructor = lodash;
          LodashWrapper.prototype = baseCreate(baseLodash.prototype);
          LodashWrapper.prototype.constructor = LodashWrapper;
          function LazyWrapper(value) {
            this.__wrapped__ = value;
            this.__actions__ = [];
            this.__dir__ = 1;
            this.__filtered__ = false;
            this.__iteratees__ = [];
            this.__takeCount__ = MAX_ARRAY_LENGTH;
            this.__views__ = [];
          }
          function lazyClone() {
            var result2 = new LazyWrapper(this.__wrapped__);
            result2.__actions__ = copyArray(this.__actions__);
            result2.__dir__ = this.__dir__;
            result2.__filtered__ = this.__filtered__;
            result2.__iteratees__ = copyArray(this.__iteratees__);
            result2.__takeCount__ = this.__takeCount__;
            result2.__views__ = copyArray(this.__views__);
            return result2;
          }
          function lazyReverse() {
            if (this.__filtered__) {
              var result2 = new LazyWrapper(this);
              result2.__dir__ = -1;
              result2.__filtered__ = true;
            } else {
              result2 = this.clone();
              result2.__dir__ *= -1;
            }
            return result2;
          }
          function lazyValue() {
            var array = this.__wrapped__.value(), dir = this.__dir__, isArr = isArray(array), isRight = dir < 0, arrLength = isArr ? array.length : 0, view = getView(0, arrLength, this.__views__), start = view.start, end = view.end, length = end - start, index = isRight ? end : start - 1, iteratees = this.__iteratees__, iterLength = iteratees.length, resIndex = 0, takeCount = nativeMin(length, this.__takeCount__);
            if (!isArr || !isRight && arrLength == length && takeCount == length) {
              return baseWrapperValue(array, this.__actions__);
            }
            var result2 = [];
            outer:
              while (length-- && resIndex < takeCount) {
                index += dir;
                var iterIndex = -1, value = array[index];
                while (++iterIndex < iterLength) {
                  var data = iteratees[iterIndex], iteratee2 = data.iteratee, type = data.type, computed = iteratee2(value);
                  if (type == LAZY_MAP_FLAG) {
                    value = computed;
                  } else if (!computed) {
                    if (type == LAZY_FILTER_FLAG) {
                      continue outer;
                    } else {
                      break outer;
                    }
                  }
                }
                result2[resIndex++] = value;
              }
            return result2;
          }
          LazyWrapper.prototype = baseCreate(baseLodash.prototype);
          LazyWrapper.prototype.constructor = LazyWrapper;
          function Hash(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function hashClear() {
            this.__data__ = nativeCreate ? nativeCreate(null) : {};
            this.size = 0;
          }
          function hashDelete(key) {
            var result2 = this.has(key) && delete this.__data__[key];
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function hashGet(key) {
            var data = this.__data__;
            if (nativeCreate) {
              var result2 = data[key];
              return result2 === HASH_UNDEFINED ? undefined2 : result2;
            }
            return hasOwnProperty.call(data, key) ? data[key] : undefined2;
          }
          function hashHas(key) {
            var data = this.__data__;
            return nativeCreate ? data[key] !== undefined2 : hasOwnProperty.call(data, key);
          }
          function hashSet(key, value) {
            var data = this.__data__;
            this.size += this.has(key) ? 0 : 1;
            data[key] = nativeCreate && value === undefined2 ? HASH_UNDEFINED : value;
            return this;
          }
          Hash.prototype.clear = hashClear;
          Hash.prototype["delete"] = hashDelete;
          Hash.prototype.get = hashGet;
          Hash.prototype.has = hashHas;
          Hash.prototype.set = hashSet;
          function ListCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function listCacheClear() {
            this.__data__ = [];
            this.size = 0;
          }
          function listCacheDelete(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              return false;
            }
            var lastIndex = data.length - 1;
            if (index == lastIndex) {
              data.pop();
            } else {
              splice.call(data, index, 1);
            }
            --this.size;
            return true;
          }
          function listCacheGet(key) {
            var data = this.__data__, index = assocIndexOf(data, key);
            return index < 0 ? undefined2 : data[index][1];
          }
          function listCacheHas(key) {
            return assocIndexOf(this.__data__, key) > -1;
          }
          function listCacheSet(key, value) {
            var data = this.__data__, index = assocIndexOf(data, key);
            if (index < 0) {
              ++this.size;
              data.push([key, value]);
            } else {
              data[index][1] = value;
            }
            return this;
          }
          ListCache.prototype.clear = listCacheClear;
          ListCache.prototype["delete"] = listCacheDelete;
          ListCache.prototype.get = listCacheGet;
          ListCache.prototype.has = listCacheHas;
          ListCache.prototype.set = listCacheSet;
          function MapCache(entries) {
            var index = -1, length = entries == null ? 0 : entries.length;
            this.clear();
            while (++index < length) {
              var entry = entries[index];
              this.set(entry[0], entry[1]);
            }
          }
          function mapCacheClear() {
            this.size = 0;
            this.__data__ = {
              "hash": new Hash(),
              "map": new (Map2 || ListCache)(),
              "string": new Hash()
            };
          }
          function mapCacheDelete(key) {
            var result2 = getMapData(this, key)["delete"](key);
            this.size -= result2 ? 1 : 0;
            return result2;
          }
          function mapCacheGet(key) {
            return getMapData(this, key).get(key);
          }
          function mapCacheHas(key) {
            return getMapData(this, key).has(key);
          }
          function mapCacheSet(key, value) {
            var data = getMapData(this, key), size2 = data.size;
            data.set(key, value);
            this.size += data.size == size2 ? 0 : 1;
            return this;
          }
          MapCache.prototype.clear = mapCacheClear;
          MapCache.prototype["delete"] = mapCacheDelete;
          MapCache.prototype.get = mapCacheGet;
          MapCache.prototype.has = mapCacheHas;
          MapCache.prototype.set = mapCacheSet;
          function SetCache(values2) {
            var index = -1, length = values2 == null ? 0 : values2.length;
            this.__data__ = new MapCache();
            while (++index < length) {
              this.add(values2[index]);
            }
          }
          function setCacheAdd(value) {
            this.__data__.set(value, HASH_UNDEFINED);
            return this;
          }
          function setCacheHas(value) {
            return this.__data__.has(value);
          }
          SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
          SetCache.prototype.has = setCacheHas;
          function Stack(entries) {
            var data = this.__data__ = new ListCache(entries);
            this.size = data.size;
          }
          function stackClear() {
            this.__data__ = new ListCache();
            this.size = 0;
          }
          function stackDelete(key) {
            var data = this.__data__, result2 = data["delete"](key);
            this.size = data.size;
            return result2;
          }
          function stackGet(key) {
            return this.__data__.get(key);
          }
          function stackHas(key) {
            return this.__data__.has(key);
          }
          function stackSet(key, value) {
            var data = this.__data__;
            if (data instanceof ListCache) {
              var pairs = data.__data__;
              if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
                pairs.push([key, value]);
                this.size = ++data.size;
                return this;
              }
              data = this.__data__ = new MapCache(pairs);
            }
            data.set(key, value);
            this.size = data.size;
            return this;
          }
          Stack.prototype.clear = stackClear;
          Stack.prototype["delete"] = stackDelete;
          Stack.prototype.get = stackGet;
          Stack.prototype.has = stackHas;
          Stack.prototype.set = stackSet;
          function arrayLikeKeys(value, inherited) {
            var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result2 = skipIndexes ? baseTimes(value.length, String2) : [], length = result2.length;
            for (var key in value) {
              if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
              (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
              isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
              isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
              isIndex(key, length)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function arraySample(array) {
            var length = array.length;
            return length ? array[baseRandom(0, length - 1)] : undefined2;
          }
          function arraySampleSize(array, n) {
            return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
          }
          function arrayShuffle(array) {
            return shuffleSelf(copyArray(array));
          }
          function assignMergeValue(object, key, value) {
            if (value !== undefined2 && !eq(object[key], value) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assignValue(object, key, value) {
            var objValue = object[key];
            if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined2 && !(key in object)) {
              baseAssignValue(object, key, value);
            }
          }
          function assocIndexOf(array, key) {
            var length = array.length;
            while (length--) {
              if (eq(array[length][0], key)) {
                return length;
              }
            }
            return -1;
          }
          function baseAggregator(collection, setter, iteratee2, accumulator) {
            baseEach(collection, function(value, key, collection2) {
              setter(accumulator, value, iteratee2(value), collection2);
            });
            return accumulator;
          }
          function baseAssign(object, source) {
            return object && copyObject(source, keys(source), object);
          }
          function baseAssignIn(object, source) {
            return object && copyObject(source, keysIn(source), object);
          }
          function baseAssignValue(object, key, value) {
            if (key == "__proto__" && defineProperty) {
              defineProperty(object, key, {
                "configurable": true,
                "enumerable": true,
                "value": value,
                "writable": true
              });
            } else {
              object[key] = value;
            }
          }
          function baseAt(object, paths) {
            var index = -1, length = paths.length, result2 = Array2(length), skip = object == null;
            while (++index < length) {
              result2[index] = skip ? undefined2 : get(object, paths[index]);
            }
            return result2;
          }
          function baseClamp(number, lower, upper) {
            if (number === number) {
              if (upper !== undefined2) {
                number = number <= upper ? number : upper;
              }
              if (lower !== undefined2) {
                number = number >= lower ? number : lower;
              }
            }
            return number;
          }
          function baseClone(value, bitmask, customizer, key, object, stack) {
            var result2, isDeep = bitmask & CLONE_DEEP_FLAG, isFlat = bitmask & CLONE_FLAT_FLAG, isFull = bitmask & CLONE_SYMBOLS_FLAG;
            if (customizer) {
              result2 = object ? customizer(value, key, object, stack) : customizer(value);
            }
            if (result2 !== undefined2) {
              return result2;
            }
            if (!isObject(value)) {
              return value;
            }
            var isArr = isArray(value);
            if (isArr) {
              result2 = initCloneArray(value);
              if (!isDeep) {
                return copyArray(value, result2);
              }
            } else {
              var tag = getTag(value), isFunc = tag == funcTag || tag == genTag;
              if (isBuffer(value)) {
                return cloneBuffer(value, isDeep);
              }
              if (tag == objectTag || tag == argsTag || isFunc && !object) {
                result2 = isFlat || isFunc ? {} : initCloneObject(value);
                if (!isDeep) {
                  return isFlat ? copySymbolsIn(value, baseAssignIn(result2, value)) : copySymbols(value, baseAssign(result2, value));
                }
              } else {
                if (!cloneableTags[tag]) {
                  return object ? value : {};
                }
                result2 = initCloneByTag(value, tag, isDeep);
              }
            }
            stack || (stack = new Stack());
            var stacked = stack.get(value);
            if (stacked) {
              return stacked;
            }
            stack.set(value, result2);
            if (isSet(value)) {
              value.forEach(function(subValue) {
                result2.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
              });
            } else if (isMap(value)) {
              value.forEach(function(subValue, key2) {
                result2.set(key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
              });
            }
            var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;
            var props = isArr ? undefined2 : keysFunc(value);
            arrayEach(props || value, function(subValue, key2) {
              if (props) {
                key2 = subValue;
                subValue = value[key2];
              }
              assignValue(result2, key2, baseClone(subValue, bitmask, customizer, key2, value, stack));
            });
            return result2;
          }
          function baseConforms(source) {
            var props = keys(source);
            return function(object) {
              return baseConformsTo(object, source, props);
            };
          }
          function baseConformsTo(object, source, props) {
            var length = props.length;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (length--) {
              var key = props[length], predicate = source[key], value = object[key];
              if (value === undefined2 && !(key in object) || !predicate(value)) {
                return false;
              }
            }
            return true;
          }
          function baseDelay(func, wait, args) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return setTimeout(function() {
              func.apply(undefined2, args);
            }, wait);
          }
          function baseDifference(array, values2, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, isCommon = true, length = array.length, result2 = [], valuesLength = values2.length;
            if (!length) {
              return result2;
            }
            if (iteratee2) {
              values2 = arrayMap(values2, baseUnary(iteratee2));
            }
            if (comparator) {
              includes2 = arrayIncludesWith;
              isCommon = false;
            } else if (values2.length >= LARGE_ARRAY_SIZE) {
              includes2 = cacheHas;
              isCommon = false;
              values2 = new SetCache(values2);
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 == null ? value : iteratee2(value);
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var valuesIndex = valuesLength;
                  while (valuesIndex--) {
                    if (values2[valuesIndex] === computed) {
                      continue outer;
                    }
                  }
                  result2.push(value);
                } else if (!includes2(values2, computed, comparator)) {
                  result2.push(value);
                }
              }
            return result2;
          }
          var baseEach = createBaseEach(baseForOwn);
          var baseEachRight = createBaseEach(baseForOwnRight, true);
          function baseEvery(collection, predicate) {
            var result2 = true;
            baseEach(collection, function(value, index, collection2) {
              result2 = !!predicate(value, index, collection2);
              return result2;
            });
            return result2;
          }
          function baseExtremum(array, iteratee2, comparator) {
            var index = -1, length = array.length;
            while (++index < length) {
              var value = array[index], current = iteratee2(value);
              if (current != null && (computed === undefined2 ? current === current && !isSymbol(current) : comparator(current, computed))) {
                var computed = current, result2 = value;
              }
            }
            return result2;
          }
          function baseFill(array, value, start, end) {
            var length = array.length;
            start = toInteger(start);
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end === undefined2 || end > length ? length : toInteger(end);
            if (end < 0) {
              end += length;
            }
            end = start > end ? 0 : toLength(end);
            while (start < end) {
              array[start++] = value;
            }
            return array;
          }
          function baseFilter(collection, predicate) {
            var result2 = [];
            baseEach(collection, function(value, index, collection2) {
              if (predicate(value, index, collection2)) {
                result2.push(value);
              }
            });
            return result2;
          }
          function baseFlatten(array, depth, predicate, isStrict, result2) {
            var index = -1, length = array.length;
            predicate || (predicate = isFlattenable);
            result2 || (result2 = []);
            while (++index < length) {
              var value = array[index];
              if (depth > 0 && predicate(value)) {
                if (depth > 1) {
                  baseFlatten(value, depth - 1, predicate, isStrict, result2);
                } else {
                  arrayPush(result2, value);
                }
              } else if (!isStrict) {
                result2[result2.length] = value;
              }
            }
            return result2;
          }
          var baseFor = createBaseFor();
          var baseForRight = createBaseFor(true);
          function baseForOwn(object, iteratee2) {
            return object && baseFor(object, iteratee2, keys);
          }
          function baseForOwnRight(object, iteratee2) {
            return object && baseForRight(object, iteratee2, keys);
          }
          function baseFunctions(object, props) {
            return arrayFilter(props, function(key) {
              return isFunction(object[key]);
            });
          }
          function baseGet(object, path) {
            path = castPath(path, object);
            var index = 0, length = path.length;
            while (object != null && index < length) {
              object = object[toKey(path[index++])];
            }
            return index && index == length ? object : undefined2;
          }
          function baseGetAllKeys(object, keysFunc, symbolsFunc) {
            var result2 = keysFunc(object);
            return isArray(object) ? result2 : arrayPush(result2, symbolsFunc(object));
          }
          function baseGetTag(value) {
            if (value == null) {
              return value === undefined2 ? undefinedTag : nullTag;
            }
            return symToStringTag && symToStringTag in Object2(value) ? getRawTag(value) : objectToString(value);
          }
          function baseGt(value, other) {
            return value > other;
          }
          function baseHas(object, key) {
            return object != null && hasOwnProperty.call(object, key);
          }
          function baseHasIn(object, key) {
            return object != null && key in Object2(object);
          }
          function baseInRange(number, start, end) {
            return number >= nativeMin(start, end) && number < nativeMax(start, end);
          }
          function baseIntersection(arrays, iteratee2, comparator) {
            var includes2 = comparator ? arrayIncludesWith : arrayIncludes, length = arrays[0].length, othLength = arrays.length, othIndex = othLength, caches = Array2(othLength), maxLength = Infinity, result2 = [];
            while (othIndex--) {
              var array = arrays[othIndex];
              if (othIndex && iteratee2) {
                array = arrayMap(array, baseUnary(iteratee2));
              }
              maxLength = nativeMin(array.length, maxLength);
              caches[othIndex] = !comparator && (iteratee2 || length >= 120 && array.length >= 120) ? new SetCache(othIndex && array) : undefined2;
            }
            array = arrays[0];
            var index = -1, seen = caches[0];
            outer:
              while (++index < length && result2.length < maxLength) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (!(seen ? cacheHas(seen, computed) : includes2(result2, computed, comparator))) {
                  othIndex = othLength;
                  while (--othIndex) {
                    var cache = caches[othIndex];
                    if (!(cache ? cacheHas(cache, computed) : includes2(arrays[othIndex], computed, comparator))) {
                      continue outer;
                    }
                  }
                  if (seen) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseInverter(object, setter, iteratee2, accumulator) {
            baseForOwn(object, function(value, key, object2) {
              setter(accumulator, iteratee2(value), key, object2);
            });
            return accumulator;
          }
          function baseInvoke(object, path, args) {
            path = castPath(path, object);
            object = parent(object, path);
            var func = object == null ? object : object[toKey(last(path))];
            return func == null ? undefined2 : apply(func, object, args);
          }
          function baseIsArguments(value) {
            return isObjectLike(value) && baseGetTag(value) == argsTag;
          }
          function baseIsArrayBuffer(value) {
            return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
          }
          function baseIsDate(value) {
            return isObjectLike(value) && baseGetTag(value) == dateTag;
          }
          function baseIsEqual(value, other, bitmask, customizer, stack) {
            if (value === other) {
              return true;
            }
            if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
              return value !== value && other !== other;
            }
            return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
          }
          function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
            var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag(object), othTag = othIsArr ? arrayTag : getTag(other);
            objTag = objTag == argsTag ? objectTag : objTag;
            othTag = othTag == argsTag ? objectTag : othTag;
            var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
            if (isSameTag && isBuffer(object)) {
              if (!isBuffer(other)) {
                return false;
              }
              objIsArr = true;
              objIsObj = false;
            }
            if (isSameTag && !objIsObj) {
              stack || (stack = new Stack());
              return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
            }
            if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
              var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
              if (objIsWrapped || othIsWrapped) {
                var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
                stack || (stack = new Stack());
                return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
              }
            }
            if (!isSameTag) {
              return false;
            }
            stack || (stack = new Stack());
            return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
          }
          function baseIsMap(value) {
            return isObjectLike(value) && getTag(value) == mapTag;
          }
          function baseIsMatch(object, source, matchData, customizer) {
            var index = matchData.length, length = index, noCustomizer = !customizer;
            if (object == null) {
              return !length;
            }
            object = Object2(object);
            while (index--) {
              var data = matchData[index];
              if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
                return false;
              }
            }
            while (++index < length) {
              data = matchData[index];
              var key = data[0], objValue = object[key], srcValue = data[1];
              if (noCustomizer && data[2]) {
                if (objValue === undefined2 && !(key in object)) {
                  return false;
                }
              } else {
                var stack = new Stack();
                if (customizer) {
                  var result2 = customizer(objValue, srcValue, key, object, source, stack);
                }
                if (!(result2 === undefined2 ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result2)) {
                  return false;
                }
              }
            }
            return true;
          }
          function baseIsNative(value) {
            if (!isObject(value) || isMasked(value)) {
              return false;
            }
            var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
            return pattern.test(toSource(value));
          }
          function baseIsRegExp(value) {
            return isObjectLike(value) && baseGetTag(value) == regexpTag;
          }
          function baseIsSet(value) {
            return isObjectLike(value) && getTag(value) == setTag;
          }
          function baseIsTypedArray(value) {
            return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
          }
          function baseIteratee(value) {
            if (typeof value == "function") {
              return value;
            }
            if (value == null) {
              return identity;
            }
            if (typeof value == "object") {
              return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
            }
            return property(value);
          }
          function baseKeys(object) {
            if (!isPrototype(object)) {
              return nativeKeys(object);
            }
            var result2 = [];
            for (var key in Object2(object)) {
              if (hasOwnProperty.call(object, key) && key != "constructor") {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseKeysIn(object) {
            if (!isObject(object)) {
              return nativeKeysIn(object);
            }
            var isProto = isPrototype(object), result2 = [];
            for (var key in object) {
              if (!(key == "constructor" && (isProto || !hasOwnProperty.call(object, key)))) {
                result2.push(key);
              }
            }
            return result2;
          }
          function baseLt(value, other) {
            return value < other;
          }
          function baseMap(collection, iteratee2) {
            var index = -1, result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value, key, collection2) {
              result2[++index] = iteratee2(value, key, collection2);
            });
            return result2;
          }
          function baseMatches(source) {
            var matchData = getMatchData(source);
            if (matchData.length == 1 && matchData[0][2]) {
              return matchesStrictComparable(matchData[0][0], matchData[0][1]);
            }
            return function(object) {
              return object === source || baseIsMatch(object, source, matchData);
            };
          }
          function baseMatchesProperty(path, srcValue) {
            if (isKey(path) && isStrictComparable(srcValue)) {
              return matchesStrictComparable(toKey(path), srcValue);
            }
            return function(object) {
              var objValue = get(object, path);
              return objValue === undefined2 && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
            };
          }
          function baseMerge(object, source, srcIndex, customizer, stack) {
            if (object === source) {
              return;
            }
            baseFor(source, function(srcValue, key) {
              stack || (stack = new Stack());
              if (isObject(srcValue)) {
                baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
              } else {
                var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + "", object, source, stack) : undefined2;
                if (newValue === undefined2) {
                  newValue = srcValue;
                }
                assignMergeValue(object, key, newValue);
              }
            }, keysIn);
          }
          function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
            var objValue = safeGet(object, key), srcValue = safeGet(source, key), stacked = stack.get(srcValue);
            if (stacked) {
              assignMergeValue(object, key, stacked);
              return;
            }
            var newValue = customizer ? customizer(objValue, srcValue, key + "", object, source, stack) : undefined2;
            var isCommon = newValue === undefined2;
            if (isCommon) {
              var isArr = isArray(srcValue), isBuff = !isArr && isBuffer(srcValue), isTyped = !isArr && !isBuff && isTypedArray(srcValue);
              newValue = srcValue;
              if (isArr || isBuff || isTyped) {
                if (isArray(objValue)) {
                  newValue = objValue;
                } else if (isArrayLikeObject(objValue)) {
                  newValue = copyArray(objValue);
                } else if (isBuff) {
                  isCommon = false;
                  newValue = cloneBuffer(srcValue, true);
                } else if (isTyped) {
                  isCommon = false;
                  newValue = cloneTypedArray(srcValue, true);
                } else {
                  newValue = [];
                }
              } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
                newValue = objValue;
                if (isArguments(objValue)) {
                  newValue = toPlainObject(objValue);
                } else if (!isObject(objValue) || isFunction(objValue)) {
                  newValue = initCloneObject(srcValue);
                }
              } else {
                isCommon = false;
              }
            }
            if (isCommon) {
              stack.set(srcValue, newValue);
              mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
              stack["delete"](srcValue);
            }
            assignMergeValue(object, key, newValue);
          }
          function baseNth(array, n) {
            var length = array.length;
            if (!length) {
              return;
            }
            n += n < 0 ? length : 0;
            return isIndex(n, length) ? array[n] : undefined2;
          }
          function baseOrderBy(collection, iteratees, orders) {
            if (iteratees.length) {
              iteratees = arrayMap(iteratees, function(iteratee2) {
                if (isArray(iteratee2)) {
                  return function(value) {
                    return baseGet(value, iteratee2.length === 1 ? iteratee2[0] : iteratee2);
                  };
                }
                return iteratee2;
              });
            } else {
              iteratees = [identity];
            }
            var index = -1;
            iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
            var result2 = baseMap(collection, function(value, key, collection2) {
              var criteria = arrayMap(iteratees, function(iteratee2) {
                return iteratee2(value);
              });
              return { "criteria": criteria, "index": ++index, "value": value };
            });
            return baseSortBy(result2, function(object, other) {
              return compareMultiple(object, other, orders);
            });
          }
          function basePick(object, paths) {
            return basePickBy(object, paths, function(value, path) {
              return hasIn(object, path);
            });
          }
          function basePickBy(object, paths, predicate) {
            var index = -1, length = paths.length, result2 = {};
            while (++index < length) {
              var path = paths[index], value = baseGet(object, path);
              if (predicate(value, path)) {
                baseSet(result2, castPath(path, object), value);
              }
            }
            return result2;
          }
          function basePropertyDeep(path) {
            return function(object) {
              return baseGet(object, path);
            };
          }
          function basePullAll(array, values2, iteratee2, comparator) {
            var indexOf2 = comparator ? baseIndexOfWith : baseIndexOf, index = -1, length = values2.length, seen = array;
            if (array === values2) {
              values2 = copyArray(values2);
            }
            if (iteratee2) {
              seen = arrayMap(array, baseUnary(iteratee2));
            }
            while (++index < length) {
              var fromIndex = 0, value = values2[index], computed = iteratee2 ? iteratee2(value) : value;
              while ((fromIndex = indexOf2(seen, computed, fromIndex, comparator)) > -1) {
                if (seen !== array) {
                  splice.call(seen, fromIndex, 1);
                }
                splice.call(array, fromIndex, 1);
              }
            }
            return array;
          }
          function basePullAt(array, indexes) {
            var length = array ? indexes.length : 0, lastIndex = length - 1;
            while (length--) {
              var index = indexes[length];
              if (length == lastIndex || index !== previous) {
                var previous = index;
                if (isIndex(index)) {
                  splice.call(array, index, 1);
                } else {
                  baseUnset(array, index);
                }
              }
            }
            return array;
          }
          function baseRandom(lower, upper) {
            return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
          }
          function baseRange(start, end, step, fromRight) {
            var index = -1, length = nativeMax(nativeCeil((end - start) / (step || 1)), 0), result2 = Array2(length);
            while (length--) {
              result2[fromRight ? length : ++index] = start;
              start += step;
            }
            return result2;
          }
          function baseRepeat(string, n) {
            var result2 = "";
            if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
              return result2;
            }
            do {
              if (n % 2) {
                result2 += string;
              }
              n = nativeFloor(n / 2);
              if (n) {
                string += string;
              }
            } while (n);
            return result2;
          }
          function baseRest(func, start) {
            return setToString(overRest(func, start, identity), func + "");
          }
          function baseSample(collection) {
            return arraySample(values(collection));
          }
          function baseSampleSize(collection, n) {
            var array = values(collection);
            return shuffleSelf(array, baseClamp(n, 0, array.length));
          }
          function baseSet(object, path, value, customizer) {
            if (!isObject(object)) {
              return object;
            }
            path = castPath(path, object);
            var index = -1, length = path.length, lastIndex = length - 1, nested = object;
            while (nested != null && ++index < length) {
              var key = toKey(path[index]), newValue = value;
              if (key === "__proto__" || key === "constructor" || key === "prototype") {
                return object;
              }
              if (index != lastIndex) {
                var objValue = nested[key];
                newValue = customizer ? customizer(objValue, key, nested) : undefined2;
                if (newValue === undefined2) {
                  newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
                }
              }
              assignValue(nested, key, newValue);
              nested = nested[key];
            }
            return object;
          }
          var baseSetData = !metaMap ? identity : function(func, data) {
            metaMap.set(func, data);
            return func;
          };
          var baseSetToString = !defineProperty ? identity : function(func, string) {
            return defineProperty(func, "toString", {
              "configurable": true,
              "enumerable": false,
              "value": constant(string),
              "writable": true
            });
          };
          function baseShuffle(collection) {
            return shuffleSelf(values(collection));
          }
          function baseSlice(array, start, end) {
            var index = -1, length = array.length;
            if (start < 0) {
              start = -start > length ? 0 : length + start;
            }
            end = end > length ? length : end;
            if (end < 0) {
              end += length;
            }
            length = start > end ? 0 : end - start >>> 0;
            start >>>= 0;
            var result2 = Array2(length);
            while (++index < length) {
              result2[index] = array[index + start];
            }
            return result2;
          }
          function baseSome(collection, predicate) {
            var result2;
            baseEach(collection, function(value, index, collection2) {
              result2 = predicate(value, index, collection2);
              return !result2;
            });
            return !!result2;
          }
          function baseSortedIndex(array, value, retHighest) {
            var low = 0, high = array == null ? low : array.length;
            if (typeof value == "number" && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
              while (low < high) {
                var mid = low + high >>> 1, computed = array[mid];
                if (computed !== null && !isSymbol(computed) && (retHighest ? computed <= value : computed < value)) {
                  low = mid + 1;
                } else {
                  high = mid;
                }
              }
              return high;
            }
            return baseSortedIndexBy(array, value, identity, retHighest);
          }
          function baseSortedIndexBy(array, value, iteratee2, retHighest) {
            var low = 0, high = array == null ? 0 : array.length;
            if (high === 0) {
              return 0;
            }
            value = iteratee2(value);
            var valIsNaN = value !== value, valIsNull = value === null, valIsSymbol = isSymbol(value), valIsUndefined = value === undefined2;
            while (low < high) {
              var mid = nativeFloor((low + high) / 2), computed = iteratee2(array[mid]), othIsDefined = computed !== undefined2, othIsNull = computed === null, othIsReflexive = computed === computed, othIsSymbol = isSymbol(computed);
              if (valIsNaN) {
                var setLow = retHighest || othIsReflexive;
              } else if (valIsUndefined) {
                setLow = othIsReflexive && (retHighest || othIsDefined);
              } else if (valIsNull) {
                setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
              } else if (valIsSymbol) {
                setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
              } else if (othIsNull || othIsSymbol) {
                setLow = false;
              } else {
                setLow = retHighest ? computed <= value : computed < value;
              }
              if (setLow) {
                low = mid + 1;
              } else {
                high = mid;
              }
            }
            return nativeMin(high, MAX_ARRAY_INDEX);
          }
          function baseSortedUniq(array, iteratee2) {
            var index = -1, length = array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
              if (!index || !eq(computed, seen)) {
                var seen = computed;
                result2[resIndex++] = value === 0 ? 0 : value;
              }
            }
            return result2;
          }
          function baseToNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            return +value;
          }
          function baseToString(value) {
            if (typeof value == "string") {
              return value;
            }
            if (isArray(value)) {
              return arrayMap(value, baseToString) + "";
            }
            if (isSymbol(value)) {
              return symbolToString ? symbolToString.call(value) : "";
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function baseUniq(array, iteratee2, comparator) {
            var index = -1, includes2 = arrayIncludes, length = array.length, isCommon = true, result2 = [], seen = result2;
            if (comparator) {
              isCommon = false;
              includes2 = arrayIncludesWith;
            } else if (length >= LARGE_ARRAY_SIZE) {
              var set2 = iteratee2 ? null : createSet(array);
              if (set2) {
                return setToArray(set2);
              }
              isCommon = false;
              includes2 = cacheHas;
              seen = new SetCache();
            } else {
              seen = iteratee2 ? [] : result2;
            }
            outer:
              while (++index < length) {
                var value = array[index], computed = iteratee2 ? iteratee2(value) : value;
                value = comparator || value !== 0 ? value : 0;
                if (isCommon && computed === computed) {
                  var seenIndex = seen.length;
                  while (seenIndex--) {
                    if (seen[seenIndex] === computed) {
                      continue outer;
                    }
                  }
                  if (iteratee2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                } else if (!includes2(seen, computed, comparator)) {
                  if (seen !== result2) {
                    seen.push(computed);
                  }
                  result2.push(value);
                }
              }
            return result2;
          }
          function baseUnset(object, path) {
            path = castPath(path, object);
            object = parent(object, path);
            return object == null || delete object[toKey(last(path))];
          }
          function baseUpdate(object, path, updater, customizer) {
            return baseSet(object, path, updater(baseGet(object, path)), customizer);
          }
          function baseWhile(array, predicate, isDrop, fromRight) {
            var length = array.length, index = fromRight ? length : -1;
            while ((fromRight ? index-- : ++index < length) && predicate(array[index], index, array)) {
            }
            return isDrop ? baseSlice(array, fromRight ? 0 : index, fromRight ? index + 1 : length) : baseSlice(array, fromRight ? index + 1 : 0, fromRight ? length : index);
          }
          function baseWrapperValue(value, actions) {
            var result2 = value;
            if (result2 instanceof LazyWrapper) {
              result2 = result2.value();
            }
            return arrayReduce(actions, function(result3, action) {
              return action.func.apply(action.thisArg, arrayPush([result3], action.args));
            }, result2);
          }
          function baseXor(arrays, iteratee2, comparator) {
            var length = arrays.length;
            if (length < 2) {
              return length ? baseUniq(arrays[0]) : [];
            }
            var index = -1, result2 = Array2(length);
            while (++index < length) {
              var array = arrays[index], othIndex = -1;
              while (++othIndex < length) {
                if (othIndex != index) {
                  result2[index] = baseDifference(result2[index] || array, arrays[othIndex], iteratee2, comparator);
                }
              }
            }
            return baseUniq(baseFlatten(result2, 1), iteratee2, comparator);
          }
          function baseZipObject(props, values2, assignFunc) {
            var index = -1, length = props.length, valsLength = values2.length, result2 = {};
            while (++index < length) {
              var value = index < valsLength ? values2[index] : undefined2;
              assignFunc(result2, props[index], value);
            }
            return result2;
          }
          function castArrayLikeObject(value) {
            return isArrayLikeObject(value) ? value : [];
          }
          function castFunction(value) {
            return typeof value == "function" ? value : identity;
          }
          function castPath(value, object) {
            if (isArray(value)) {
              return value;
            }
            return isKey(value, object) ? [value] : stringToPath(toString(value));
          }
          var castRest = baseRest;
          function castSlice(array, start, end) {
            var length = array.length;
            end = end === undefined2 ? length : end;
            return !start && end >= length ? array : baseSlice(array, start, end);
          }
          var clearTimeout = ctxClearTimeout || function(id) {
            return root.clearTimeout(id);
          };
          function cloneBuffer(buffer, isDeep) {
            if (isDeep) {
              return buffer.slice();
            }
            var length = buffer.length, result2 = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);
            buffer.copy(result2);
            return result2;
          }
          function cloneArrayBuffer(arrayBuffer) {
            var result2 = new arrayBuffer.constructor(arrayBuffer.byteLength);
            new Uint8Array2(result2).set(new Uint8Array2(arrayBuffer));
            return result2;
          }
          function cloneDataView(dataView, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
            return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
          }
          function cloneRegExp(regexp) {
            var result2 = new regexp.constructor(regexp.source, reFlags.exec(regexp));
            result2.lastIndex = regexp.lastIndex;
            return result2;
          }
          function cloneSymbol(symbol) {
            return symbolValueOf ? Object2(symbolValueOf.call(symbol)) : {};
          }
          function cloneTypedArray(typedArray, isDeep) {
            var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
            return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
          }
          function compareAscending(value, other) {
            if (value !== other) {
              var valIsDefined = value !== undefined2, valIsNull = value === null, valIsReflexive = value === value, valIsSymbol = isSymbol(value);
              var othIsDefined = other !== undefined2, othIsNull = other === null, othIsReflexive = other === other, othIsSymbol = isSymbol(other);
              if (!othIsNull && !othIsSymbol && !valIsSymbol && value > other || valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol || valIsNull && othIsDefined && othIsReflexive || !valIsDefined && othIsReflexive || !valIsReflexive) {
                return 1;
              }
              if (!valIsNull && !valIsSymbol && !othIsSymbol && value < other || othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol || othIsNull && valIsDefined && valIsReflexive || !othIsDefined && valIsReflexive || !othIsReflexive) {
                return -1;
              }
            }
            return 0;
          }
          function compareMultiple(object, other, orders) {
            var index = -1, objCriteria = object.criteria, othCriteria = other.criteria, length = objCriteria.length, ordersLength = orders.length;
            while (++index < length) {
              var result2 = compareAscending(objCriteria[index], othCriteria[index]);
              if (result2) {
                if (index >= ordersLength) {
                  return result2;
                }
                var order = orders[index];
                return result2 * (order == "desc" ? -1 : 1);
              }
            }
            return object.index - other.index;
          }
          function composeArgs(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersLength = holders.length, leftIndex = -1, leftLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(leftLength + rangeLength), isUncurried = !isCurried;
            while (++leftIndex < leftLength) {
              result2[leftIndex] = partials[leftIndex];
            }
            while (++argsIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[holders[argsIndex]] = args[argsIndex];
              }
            }
            while (rangeLength--) {
              result2[leftIndex++] = args[argsIndex++];
            }
            return result2;
          }
          function composeArgsRight(args, partials, holders, isCurried) {
            var argsIndex = -1, argsLength = args.length, holdersIndex = -1, holdersLength = holders.length, rightIndex = -1, rightLength = partials.length, rangeLength = nativeMax(argsLength - holdersLength, 0), result2 = Array2(rangeLength + rightLength), isUncurried = !isCurried;
            while (++argsIndex < rangeLength) {
              result2[argsIndex] = args[argsIndex];
            }
            var offset = argsIndex;
            while (++rightIndex < rightLength) {
              result2[offset + rightIndex] = partials[rightIndex];
            }
            while (++holdersIndex < holdersLength) {
              if (isUncurried || argsIndex < argsLength) {
                result2[offset + holders[holdersIndex]] = args[argsIndex++];
              }
            }
            return result2;
          }
          function copyArray(source, array) {
            var index = -1, length = source.length;
            array || (array = Array2(length));
            while (++index < length) {
              array[index] = source[index];
            }
            return array;
          }
          function copyObject(source, props, object, customizer) {
            var isNew = !object;
            object || (object = {});
            var index = -1, length = props.length;
            while (++index < length) {
              var key = props[index];
              var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined2;
              if (newValue === undefined2) {
                newValue = source[key];
              }
              if (isNew) {
                baseAssignValue(object, key, newValue);
              } else {
                assignValue(object, key, newValue);
              }
            }
            return object;
          }
          function copySymbols(source, object) {
            return copyObject(source, getSymbols(source), object);
          }
          function copySymbolsIn(source, object) {
            return copyObject(source, getSymbolsIn(source), object);
          }
          function createAggregator(setter, initializer) {
            return function(collection, iteratee2) {
              var func = isArray(collection) ? arrayAggregator : baseAggregator, accumulator = initializer ? initializer() : {};
              return func(collection, setter, getIteratee(iteratee2, 2), accumulator);
            };
          }
          function createAssigner(assigner) {
            return baseRest(function(object, sources) {
              var index = -1, length = sources.length, customizer = length > 1 ? sources[length - 1] : undefined2, guard = length > 2 ? sources[2] : undefined2;
              customizer = assigner.length > 3 && typeof customizer == "function" ? (length--, customizer) : undefined2;
              if (guard && isIterateeCall(sources[0], sources[1], guard)) {
                customizer = length < 3 ? undefined2 : customizer;
                length = 1;
              }
              object = Object2(object);
              while (++index < length) {
                var source = sources[index];
                if (source) {
                  assigner(object, source, index, customizer);
                }
              }
              return object;
            });
          }
          function createBaseEach(eachFunc, fromRight) {
            return function(collection, iteratee2) {
              if (collection == null) {
                return collection;
              }
              if (!isArrayLike(collection)) {
                return eachFunc(collection, iteratee2);
              }
              var length = collection.length, index = fromRight ? length : -1, iterable = Object2(collection);
              while (fromRight ? index-- : ++index < length) {
                if (iteratee2(iterable[index], index, iterable) === false) {
                  break;
                }
              }
              return collection;
            };
          }
          function createBaseFor(fromRight) {
            return function(object, iteratee2, keysFunc) {
              var index = -1, iterable = Object2(object), props = keysFunc(object), length = props.length;
              while (length--) {
                var key = props[fromRight ? length : ++index];
                if (iteratee2(iterable[key], key, iterable) === false) {
                  break;
                }
              }
              return object;
            };
          }
          function createBind(func, bitmask, thisArg) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return fn.apply(isBind ? thisArg : this, arguments);
            }
            return wrapper;
          }
          function createCaseFirst(methodName) {
            return function(string) {
              string = toString(string);
              var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined2;
              var chr = strSymbols ? strSymbols[0] : string.charAt(0);
              var trailing = strSymbols ? castSlice(strSymbols, 1).join("") : string.slice(1);
              return chr[methodName]() + trailing;
            };
          }
          function createCompounder(callback) {
            return function(string) {
              return arrayReduce(words(deburr(string).replace(reApos, "")), callback, "");
            };
          }
          function createCtor(Ctor) {
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return new Ctor();
                case 1:
                  return new Ctor(args[0]);
                case 2:
                  return new Ctor(args[0], args[1]);
                case 3:
                  return new Ctor(args[0], args[1], args[2]);
                case 4:
                  return new Ctor(args[0], args[1], args[2], args[3]);
                case 5:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4]);
                case 6:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
                case 7:
                  return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
              }
              var thisBinding = baseCreate(Ctor.prototype), result2 = Ctor.apply(thisBinding, args);
              return isObject(result2) ? result2 : thisBinding;
            };
          }
          function createCurry(func, bitmask, arity) {
            var Ctor = createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length, placeholder = getHolder(wrapper);
              while (index--) {
                args[index] = arguments[index];
              }
              var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);
              length -= holders.length;
              if (length < arity) {
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  undefined2,
                  args,
                  holders,
                  undefined2,
                  undefined2,
                  arity - length
                );
              }
              var fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              return apply(fn, this, args);
            }
            return wrapper;
          }
          function createFind(findIndexFunc) {
            return function(collection, predicate, fromIndex) {
              var iterable = Object2(collection);
              if (!isArrayLike(collection)) {
                var iteratee2 = getIteratee(predicate, 3);
                collection = keys(collection);
                predicate = function(key) {
                  return iteratee2(iterable[key], key, iterable);
                };
              }
              var index = findIndexFunc(collection, predicate, fromIndex);
              return index > -1 ? iterable[iteratee2 ? collection[index] : index] : undefined2;
            };
          }
          function createFlow(fromRight) {
            return flatRest(function(funcs) {
              var length = funcs.length, index = length, prereq = LodashWrapper.prototype.thru;
              if (fromRight) {
                funcs.reverse();
              }
              while (index--) {
                var func = funcs[index];
                if (typeof func != "function") {
                  throw new TypeError2(FUNC_ERROR_TEXT);
                }
                if (prereq && !wrapper && getFuncName(func) == "wrapper") {
                  var wrapper = new LodashWrapper([], true);
                }
              }
              index = wrapper ? index : length;
              while (++index < length) {
                func = funcs[index];
                var funcName = getFuncName(func), data = funcName == "wrapper" ? getData(func) : undefined2;
                if (data && isLaziable(data[0]) && data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) && !data[4].length && data[9] == 1) {
                  wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
                } else {
                  wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);
                }
              }
              return function() {
                var args = arguments, value = args[0];
                if (wrapper && args.length == 1 && isArray(value)) {
                  return wrapper.plant(value).value();
                }
                var index2 = 0, result2 = length ? funcs[index2].apply(this, args) : value;
                while (++index2 < length) {
                  result2 = funcs[index2].call(this, result2);
                }
                return result2;
              };
            });
          }
          function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary2, arity) {
            var isAry = bitmask & WRAP_ARY_FLAG, isBind = bitmask & WRAP_BIND_FLAG, isBindKey = bitmask & WRAP_BIND_KEY_FLAG, isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG), isFlip = bitmask & WRAP_FLIP_FLAG, Ctor = isBindKey ? undefined2 : createCtor(func);
            function wrapper() {
              var length = arguments.length, args = Array2(length), index = length;
              while (index--) {
                args[index] = arguments[index];
              }
              if (isCurried) {
                var placeholder = getHolder(wrapper), holdersCount = countHolders(args, placeholder);
              }
              if (partials) {
                args = composeArgs(args, partials, holders, isCurried);
              }
              if (partialsRight) {
                args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
              }
              length -= holdersCount;
              if (isCurried && length < arity) {
                var newHolders = replaceHolders(args, placeholder);
                return createRecurry(
                  func,
                  bitmask,
                  createHybrid,
                  wrapper.placeholder,
                  thisArg,
                  args,
                  newHolders,
                  argPos,
                  ary2,
                  arity - length
                );
              }
              var thisBinding = isBind ? thisArg : this, fn = isBindKey ? thisBinding[func] : func;
              length = args.length;
              if (argPos) {
                args = reorder(args, argPos);
              } else if (isFlip && length > 1) {
                args.reverse();
              }
              if (isAry && ary2 < length) {
                args.length = ary2;
              }
              if (this && this !== root && this instanceof wrapper) {
                fn = Ctor || createCtor(fn);
              }
              return fn.apply(thisBinding, args);
            }
            return wrapper;
          }
          function createInverter(setter, toIteratee) {
            return function(object, iteratee2) {
              return baseInverter(object, setter, toIteratee(iteratee2), {});
            };
          }
          function createMathOperation(operator, defaultValue) {
            return function(value, other) {
              var result2;
              if (value === undefined2 && other === undefined2) {
                return defaultValue;
              }
              if (value !== undefined2) {
                result2 = value;
              }
              if (other !== undefined2) {
                if (result2 === undefined2) {
                  return other;
                }
                if (typeof value == "string" || typeof other == "string") {
                  value = baseToString(value);
                  other = baseToString(other);
                } else {
                  value = baseToNumber(value);
                  other = baseToNumber(other);
                }
                result2 = operator(value, other);
              }
              return result2;
            };
          }
          function createOver(arrayFunc) {
            return flatRest(function(iteratees) {
              iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
              return baseRest(function(args) {
                var thisArg = this;
                return arrayFunc(iteratees, function(iteratee2) {
                  return apply(iteratee2, thisArg, args);
                });
              });
            });
          }
          function createPadding(length, chars) {
            chars = chars === undefined2 ? " " : baseToString(chars);
            var charsLength = chars.length;
            if (charsLength < 2) {
              return charsLength ? baseRepeat(chars, length) : chars;
            }
            var result2 = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
            return hasUnicode(chars) ? castSlice(stringToArray(result2), 0, length).join("") : result2.slice(0, length);
          }
          function createPartial(func, bitmask, thisArg, partials) {
            var isBind = bitmask & WRAP_BIND_FLAG, Ctor = createCtor(func);
            function wrapper() {
              var argsIndex = -1, argsLength = arguments.length, leftIndex = -1, leftLength = partials.length, args = Array2(leftLength + argsLength), fn = this && this !== root && this instanceof wrapper ? Ctor : func;
              while (++leftIndex < leftLength) {
                args[leftIndex] = partials[leftIndex];
              }
              while (argsLength--) {
                args[leftIndex++] = arguments[++argsIndex];
              }
              return apply(fn, isBind ? thisArg : this, args);
            }
            return wrapper;
          }
          function createRange(fromRight) {
            return function(start, end, step) {
              if (step && typeof step != "number" && isIterateeCall(start, end, step)) {
                end = step = undefined2;
              }
              start = toFinite(start);
              if (end === undefined2) {
                end = start;
                start = 0;
              } else {
                end = toFinite(end);
              }
              step = step === undefined2 ? start < end ? 1 : -1 : toFinite(step);
              return baseRange(start, end, step, fromRight);
            };
          }
          function createRelationalOperation(operator) {
            return function(value, other) {
              if (!(typeof value == "string" && typeof other == "string")) {
                value = toNumber(value);
                other = toNumber(other);
              }
              return operator(value, other);
            };
          }
          function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary2, arity) {
            var isCurry = bitmask & WRAP_CURRY_FLAG, newHolders = isCurry ? holders : undefined2, newHoldersRight = isCurry ? undefined2 : holders, newPartials = isCurry ? partials : undefined2, newPartialsRight = isCurry ? undefined2 : partials;
            bitmask |= isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG;
            bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);
            if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
              bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
            }
            var newData = [
              func,
              bitmask,
              thisArg,
              newPartials,
              newHolders,
              newPartialsRight,
              newHoldersRight,
              argPos,
              ary2,
              arity
            ];
            var result2 = wrapFunc.apply(undefined2, newData);
            if (isLaziable(func)) {
              setData(result2, newData);
            }
            result2.placeholder = placeholder;
            return setWrapToString(result2, func, bitmask);
          }
          function createRound(methodName) {
            var func = Math2[methodName];
            return function(number, precision) {
              number = toNumber(number);
              precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
              if (precision && nativeIsFinite(number)) {
                var pair = (toString(number) + "e").split("e"), value = func(pair[0] + "e" + (+pair[1] + precision));
                pair = (toString(value) + "e").split("e");
                return +(pair[0] + "e" + (+pair[1] - precision));
              }
              return func(number);
            };
          }
          var createSet = !(Set2 && 1 / setToArray(new Set2([, -0]))[1] == INFINITY) ? noop : function(values2) {
            return new Set2(values2);
          };
          function createToPairs(keysFunc) {
            return function(object) {
              var tag = getTag(object);
              if (tag == mapTag) {
                return mapToArray(object);
              }
              if (tag == setTag) {
                return setToPairs(object);
              }
              return baseToPairs(object, keysFunc(object));
            };
          }
          function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary2, arity) {
            var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
            if (!isBindKey && typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var length = partials ? partials.length : 0;
            if (!length) {
              bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
              partials = holders = undefined2;
            }
            ary2 = ary2 === undefined2 ? ary2 : nativeMax(toInteger(ary2), 0);
            arity = arity === undefined2 ? arity : toInteger(arity);
            length -= holders ? holders.length : 0;
            if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
              var partialsRight = partials, holdersRight = holders;
              partials = holders = undefined2;
            }
            var data = isBindKey ? undefined2 : getData(func);
            var newData = [
              func,
              bitmask,
              thisArg,
              partials,
              holders,
              partialsRight,
              holdersRight,
              argPos,
              ary2,
              arity
            ];
            if (data) {
              mergeData(newData, data);
            }
            func = newData[0];
            bitmask = newData[1];
            thisArg = newData[2];
            partials = newData[3];
            holders = newData[4];
            arity = newData[9] = newData[9] === undefined2 ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);
            if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
              bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
            }
            if (!bitmask || bitmask == WRAP_BIND_FLAG) {
              var result2 = createBind(func, bitmask, thisArg);
            } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
              result2 = createCurry(func, bitmask, arity);
            } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
              result2 = createPartial(func, bitmask, thisArg, partials);
            } else {
              result2 = createHybrid.apply(undefined2, newData);
            }
            var setter = data ? baseSetData : setData;
            return setWrapToString(setter(result2, newData), func, bitmask);
          }
          function customDefaultsAssignIn(objValue, srcValue, key, object) {
            if (objValue === undefined2 || eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key)) {
              return srcValue;
            }
            return objValue;
          }
          function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
            if (isObject(objValue) && isObject(srcValue)) {
              stack.set(srcValue, objValue);
              baseMerge(objValue, srcValue, undefined2, customDefaultsMerge, stack);
              stack["delete"](srcValue);
            }
            return objValue;
          }
          function customOmitClone(value) {
            return isPlainObject(value) ? undefined2 : value;
          }
          function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
            if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
              return false;
            }
            var arrStacked = stack.get(array);
            var othStacked = stack.get(other);
            if (arrStacked && othStacked) {
              return arrStacked == other && othStacked == array;
            }
            var index = -1, result2 = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined2;
            stack.set(array, other);
            stack.set(other, array);
            while (++index < arrLength) {
              var arrValue = array[index], othValue = other[index];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
              }
              if (compared !== undefined2) {
                if (compared) {
                  continue;
                }
                result2 = false;
                break;
              }
              if (seen) {
                if (!arraySome(other, function(othValue2, othIndex) {
                  if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
                    return seen.push(othIndex);
                  }
                })) {
                  result2 = false;
                  break;
                }
              } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                result2 = false;
                break;
              }
            }
            stack["delete"](array);
            stack["delete"](other);
            return result2;
          }
          function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
            switch (tag) {
              case dataViewTag:
                if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
                  return false;
                }
                object = object.buffer;
                other = other.buffer;
              case arrayBufferTag:
                if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
                  return false;
                }
                return true;
              case boolTag:
              case dateTag:
              case numberTag:
                return eq(+object, +other);
              case errorTag:
                return object.name == other.name && object.message == other.message;
              case regexpTag:
              case stringTag:
                return object == other + "";
              case mapTag:
                var convert = mapToArray;
              case setTag:
                var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
                convert || (convert = setToArray);
                if (object.size != other.size && !isPartial) {
                  return false;
                }
                var stacked = stack.get(object);
                if (stacked) {
                  return stacked == other;
                }
                bitmask |= COMPARE_UNORDERED_FLAG;
                stack.set(object, other);
                var result2 = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
                stack["delete"](object);
                return result2;
              case symbolTag:
                if (symbolValueOf) {
                  return symbolValueOf.call(object) == symbolValueOf.call(other);
                }
            }
            return false;
          }
          function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
            var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
            if (objLength != othLength && !isPartial) {
              return false;
            }
            var index = objLength;
            while (index--) {
              var key = objProps[index];
              if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
                return false;
              }
            }
            var objStacked = stack.get(object);
            var othStacked = stack.get(other);
            if (objStacked && othStacked) {
              return objStacked == other && othStacked == object;
            }
            var result2 = true;
            stack.set(object, other);
            stack.set(other, object);
            var skipCtor = isPartial;
            while (++index < objLength) {
              key = objProps[index];
              var objValue = object[key], othValue = other[key];
              if (customizer) {
                var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
              }
              if (!(compared === undefined2 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
                result2 = false;
                break;
              }
              skipCtor || (skipCtor = key == "constructor");
            }
            if (result2 && !skipCtor) {
              var objCtor = object.constructor, othCtor = other.constructor;
              if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
                result2 = false;
              }
            }
            stack["delete"](object);
            stack["delete"](other);
            return result2;
          }
          function flatRest(func) {
            return setToString(overRest(func, undefined2, flatten), func + "");
          }
          function getAllKeys(object) {
            return baseGetAllKeys(object, keys, getSymbols);
          }
          function getAllKeysIn(object) {
            return baseGetAllKeys(object, keysIn, getSymbolsIn);
          }
          var getData = !metaMap ? noop : function(func) {
            return metaMap.get(func);
          };
          function getFuncName(func) {
            var result2 = func.name + "", array = realNames[result2], length = hasOwnProperty.call(realNames, result2) ? array.length : 0;
            while (length--) {
              var data = array[length], otherFunc = data.func;
              if (otherFunc == null || otherFunc == func) {
                return data.name;
              }
            }
            return result2;
          }
          function getHolder(func) {
            var object = hasOwnProperty.call(lodash, "placeholder") ? lodash : func;
            return object.placeholder;
          }
          function getIteratee() {
            var result2 = lodash.iteratee || iteratee;
            result2 = result2 === iteratee ? baseIteratee : result2;
            return arguments.length ? result2(arguments[0], arguments[1]) : result2;
          }
          function getMapData(map2, key) {
            var data = map2.__data__;
            return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
          }
          function getMatchData(object) {
            var result2 = keys(object), length = result2.length;
            while (length--) {
              var key = result2[length], value = object[key];
              result2[length] = [key, value, isStrictComparable(value)];
            }
            return result2;
          }
          function getNative(object, key) {
            var value = getValue(object, key);
            return baseIsNative(value) ? value : undefined2;
          }
          function getRawTag(value) {
            var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
            try {
              value[symToStringTag] = undefined2;
              var unmasked = true;
            } catch (e) {
            }
            var result2 = nativeObjectToString.call(value);
            if (unmasked) {
              if (isOwn) {
                value[symToStringTag] = tag;
              } else {
                delete value[symToStringTag];
              }
            }
            return result2;
          }
          var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
            if (object == null) {
              return [];
            }
            object = Object2(object);
            return arrayFilter(nativeGetSymbols(object), function(symbol) {
              return propertyIsEnumerable.call(object, symbol);
            });
          };
          var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
            var result2 = [];
            while (object) {
              arrayPush(result2, getSymbols(object));
              object = getPrototype(object);
            }
            return result2;
          };
          var getTag = baseGetTag;
          if (DataView2 && getTag(new DataView2(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag(new Map2()) != mapTag || Promise2 && getTag(Promise2.resolve()) != promiseTag || Set2 && getTag(new Set2()) != setTag || WeakMap2 && getTag(new WeakMap2()) != weakMapTag) {
            getTag = function(value) {
              var result2 = baseGetTag(value), Ctor = result2 == objectTag ? value.constructor : undefined2, ctorString = Ctor ? toSource(Ctor) : "";
              if (ctorString) {
                switch (ctorString) {
                  case dataViewCtorString:
                    return dataViewTag;
                  case mapCtorString:
                    return mapTag;
                  case promiseCtorString:
                    return promiseTag;
                  case setCtorString:
                    return setTag;
                  case weakMapCtorString:
                    return weakMapTag;
                }
              }
              return result2;
            };
          }
          function getView(start, end, transforms) {
            var index = -1, length = transforms.length;
            while (++index < length) {
              var data = transforms[index], size2 = data.size;
              switch (data.type) {
                case "drop":
                  start += size2;
                  break;
                case "dropRight":
                  end -= size2;
                  break;
                case "take":
                  end = nativeMin(end, start + size2);
                  break;
                case "takeRight":
                  start = nativeMax(start, end - size2);
                  break;
              }
            }
            return { "start": start, "end": end };
          }
          function getWrapDetails(source) {
            var match = source.match(reWrapDetails);
            return match ? match[1].split(reSplitDetails) : [];
          }
          function hasPath(object, path, hasFunc) {
            path = castPath(path, object);
            var index = -1, length = path.length, result2 = false;
            while (++index < length) {
              var key = toKey(path[index]);
              if (!(result2 = object != null && hasFunc(object, key))) {
                break;
              }
              object = object[key];
            }
            if (result2 || ++index != length) {
              return result2;
            }
            length = object == null ? 0 : object.length;
            return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
          }
          function initCloneArray(array) {
            var length = array.length, result2 = new array.constructor(length);
            if (length && typeof array[0] == "string" && hasOwnProperty.call(array, "index")) {
              result2.index = array.index;
              result2.input = array.input;
            }
            return result2;
          }
          function initCloneObject(object) {
            return typeof object.constructor == "function" && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
          }
          function initCloneByTag(object, tag, isDeep) {
            var Ctor = object.constructor;
            switch (tag) {
              case arrayBufferTag:
                return cloneArrayBuffer(object);
              case boolTag:
              case dateTag:
                return new Ctor(+object);
              case dataViewTag:
                return cloneDataView(object, isDeep);
              case float32Tag:
              case float64Tag:
              case int8Tag:
              case int16Tag:
              case int32Tag:
              case uint8Tag:
              case uint8ClampedTag:
              case uint16Tag:
              case uint32Tag:
                return cloneTypedArray(object, isDeep);
              case mapTag:
                return new Ctor();
              case numberTag:
              case stringTag:
                return new Ctor(object);
              case regexpTag:
                return cloneRegExp(object);
              case setTag:
                return new Ctor();
              case symbolTag:
                return cloneSymbol(object);
            }
          }
          function insertWrapDetails(source, details) {
            var length = details.length;
            if (!length) {
              return source;
            }
            var lastIndex = length - 1;
            details[lastIndex] = (length > 1 ? "& " : "") + details[lastIndex];
            details = details.join(length > 2 ? ", " : " ");
            return source.replace(reWrapComment, "{\n/* [wrapped with " + details + "] */\n");
          }
          function isFlattenable(value) {
            return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
          }
          function isIndex(value, length) {
            var type = typeof value;
            length = length == null ? MAX_SAFE_INTEGER : length;
            return !!length && (type == "number" || type != "symbol" && reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
          }
          function isIterateeCall(value, index, object) {
            if (!isObject(object)) {
              return false;
            }
            var type = typeof index;
            if (type == "number" ? isArrayLike(object) && isIndex(index, object.length) : type == "string" && index in object) {
              return eq(object[index], value);
            }
            return false;
          }
          function isKey(value, object) {
            if (isArray(value)) {
              return false;
            }
            var type = typeof value;
            if (type == "number" || type == "symbol" || type == "boolean" || value == null || isSymbol(value)) {
              return true;
            }
            return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object2(object);
          }
          function isKeyable(value) {
            var type = typeof value;
            return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
          }
          function isLaziable(func) {
            var funcName = getFuncName(func), other = lodash[funcName];
            if (typeof other != "function" || !(funcName in LazyWrapper.prototype)) {
              return false;
            }
            if (func === other) {
              return true;
            }
            var data = getData(other);
            return !!data && func === data[0];
          }
          function isMasked(func) {
            return !!maskSrcKey && maskSrcKey in func;
          }
          var isMaskable = coreJsData ? isFunction : stubFalse;
          function isPrototype(value) {
            var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
            return value === proto;
          }
          function isStrictComparable(value) {
            return value === value && !isObject(value);
          }
          function matchesStrictComparable(key, srcValue) {
            return function(object) {
              if (object == null) {
                return false;
              }
              return object[key] === srcValue && (srcValue !== undefined2 || key in Object2(object));
            };
          }
          function memoizeCapped(func) {
            var result2 = memoize(func, function(key) {
              if (cache.size === MAX_MEMOIZE_SIZE) {
                cache.clear();
              }
              return key;
            });
            var cache = result2.cache;
            return result2;
          }
          function mergeData(data, source) {
            var bitmask = data[1], srcBitmask = source[1], newBitmask = bitmask | srcBitmask, isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);
            var isCombo = srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_CURRY_FLAG || srcBitmask == WRAP_ARY_FLAG && bitmask == WRAP_REARG_FLAG && data[7].length <= source[8] || srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG) && source[7].length <= source[8] && bitmask == WRAP_CURRY_FLAG;
            if (!(isCommon || isCombo)) {
              return data;
            }
            if (srcBitmask & WRAP_BIND_FLAG) {
              data[2] = source[2];
              newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
            }
            var value = source[3];
            if (value) {
              var partials = data[3];
              data[3] = partials ? composeArgs(partials, value, source[4]) : value;
              data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
            }
            value = source[5];
            if (value) {
              partials = data[5];
              data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
              data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
            }
            value = source[7];
            if (value) {
              data[7] = value;
            }
            if (srcBitmask & WRAP_ARY_FLAG) {
              data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
            }
            if (data[9] == null) {
              data[9] = source[9];
            }
            data[0] = source[0];
            data[1] = newBitmask;
            return data;
          }
          function nativeKeysIn(object) {
            var result2 = [];
            if (object != null) {
              for (var key in Object2(object)) {
                result2.push(key);
              }
            }
            return result2;
          }
          function objectToString(value) {
            return nativeObjectToString.call(value);
          }
          function overRest(func, start, transform2) {
            start = nativeMax(start === undefined2 ? func.length - 1 : start, 0);
            return function() {
              var args = arguments, index = -1, length = nativeMax(args.length - start, 0), array = Array2(length);
              while (++index < length) {
                array[index] = args[start + index];
              }
              index = -1;
              var otherArgs = Array2(start + 1);
              while (++index < start) {
                otherArgs[index] = args[index];
              }
              otherArgs[start] = transform2(array);
              return apply(func, this, otherArgs);
            };
          }
          function parent(object, path) {
            return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
          }
          function reorder(array, indexes) {
            var arrLength = array.length, length = nativeMin(indexes.length, arrLength), oldArray = copyArray(array);
            while (length--) {
              var index = indexes[length];
              array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined2;
            }
            return array;
          }
          function safeGet(object, key) {
            if (key === "constructor" && typeof object[key] === "function") {
              return;
            }
            if (key == "__proto__") {
              return;
            }
            return object[key];
          }
          var setData = shortOut(baseSetData);
          var setTimeout = ctxSetTimeout || function(func, wait) {
            return root.setTimeout(func, wait);
          };
          var setToString = shortOut(baseSetToString);
          function setWrapToString(wrapper, reference, bitmask) {
            var source = reference + "";
            return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
          }
          function shortOut(func) {
            var count = 0, lastCalled = 0;
            return function() {
              var stamp = nativeNow(), remaining = HOT_SPAN - (stamp - lastCalled);
              lastCalled = stamp;
              if (remaining > 0) {
                if (++count >= HOT_COUNT) {
                  return arguments[0];
                }
              } else {
                count = 0;
              }
              return func.apply(undefined2, arguments);
            };
          }
          function shuffleSelf(array, size2) {
            var index = -1, length = array.length, lastIndex = length - 1;
            size2 = size2 === undefined2 ? length : size2;
            while (++index < size2) {
              var rand = baseRandom(index, lastIndex), value = array[rand];
              array[rand] = array[index];
              array[index] = value;
            }
            array.length = size2;
            return array;
          }
          var stringToPath = memoizeCapped(function(string) {
            var result2 = [];
            if (string.charCodeAt(0) === 46) {
              result2.push("");
            }
            string.replace(rePropName, function(match, number, quote, subString) {
              result2.push(quote ? subString.replace(reEscapeChar, "$1") : number || match);
            });
            return result2;
          });
          function toKey(value) {
            if (typeof value == "string" || isSymbol(value)) {
              return value;
            }
            var result2 = value + "";
            return result2 == "0" && 1 / value == -INFINITY ? "-0" : result2;
          }
          function toSource(func) {
            if (func != null) {
              try {
                return funcToString.call(func);
              } catch (e) {
              }
              try {
                return func + "";
              } catch (e) {
              }
            }
            return "";
          }
          function updateWrapDetails(details, bitmask) {
            arrayEach(wrapFlags, function(pair) {
              var value = "_." + pair[0];
              if (bitmask & pair[1] && !arrayIncludes(details, value)) {
                details.push(value);
              }
            });
            return details.sort();
          }
          function wrapperClone(wrapper) {
            if (wrapper instanceof LazyWrapper) {
              return wrapper.clone();
            }
            var result2 = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
            result2.__actions__ = copyArray(wrapper.__actions__);
            result2.__index__ = wrapper.__index__;
            result2.__values__ = wrapper.__values__;
            return result2;
          }
          function chunk(array, size2, guard) {
            if (guard ? isIterateeCall(array, size2, guard) : size2 === undefined2) {
              size2 = 1;
            } else {
              size2 = nativeMax(toInteger(size2), 0);
            }
            var length = array == null ? 0 : array.length;
            if (!length || size2 < 1) {
              return [];
            }
            var index = 0, resIndex = 0, result2 = Array2(nativeCeil(length / size2));
            while (index < length) {
              result2[resIndex++] = baseSlice(array, index, index += size2);
            }
            return result2;
          }
          function compact(array) {
            var index = -1, length = array == null ? 0 : array.length, resIndex = 0, result2 = [];
            while (++index < length) {
              var value = array[index];
              if (value) {
                result2[resIndex++] = value;
              }
            }
            return result2;
          }
          function concat() {
            var length = arguments.length;
            if (!length) {
              return [];
            }
            var args = Array2(length - 1), array = arguments[0], index = length;
            while (index--) {
              args[index - 1] = arguments[index];
            }
            return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
          }
          var difference = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true)) : [];
          });
          var differenceBy = baseRest(function(array, values2) {
            var iteratee2 = last(values2);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2)) : [];
          });
          var differenceWith = baseRest(function(array, values2) {
            var comparator = last(values2);
            if (isArrayLikeObject(comparator)) {
              comparator = undefined2;
            }
            return isArrayLikeObject(array) ? baseDifference(array, baseFlatten(values2, 1, isArrayLikeObject, true), undefined2, comparator) : [];
          });
          function drop(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function dropRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function dropRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true, true) : [];
          }
          function dropWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), true) : [];
          }
          function fill(array, value, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (start && typeof start != "number" && isIterateeCall(array, value, start)) {
              start = 0;
              end = length;
            }
            return baseFill(array, value, start, end);
          }
          function findIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index);
          }
          function findLastIndex(array, predicate, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length - 1;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = fromIndex < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return baseFindIndex(array, getIteratee(predicate, 3), index, true);
          }
          function flatten(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, 1) : [];
          }
          function flattenDeep(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseFlatten(array, INFINITY) : [];
          }
          function flattenDepth(array, depth) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(array, depth);
          }
          function fromPairs(pairs) {
            var index = -1, length = pairs == null ? 0 : pairs.length, result2 = {};
            while (++index < length) {
              var pair = pairs[index];
              result2[pair[0]] = pair[1];
            }
            return result2;
          }
          function head(array) {
            return array && array.length ? array[0] : undefined2;
          }
          function indexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = fromIndex == null ? 0 : toInteger(fromIndex);
            if (index < 0) {
              index = nativeMax(length + index, 0);
            }
            return baseIndexOf(array, value, index);
          }
          function initial(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 0, -1) : [];
          }
          var intersection = baseRest(function(arrays) {
            var mapped = arrayMap(arrays, castArrayLikeObject);
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped) : [];
          });
          var intersectionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            if (iteratee2 === last(mapped)) {
              iteratee2 = undefined2;
            } else {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, getIteratee(iteratee2, 2)) : [];
          });
          var intersectionWith = baseRest(function(arrays) {
            var comparator = last(arrays), mapped = arrayMap(arrays, castArrayLikeObject);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            if (comparator) {
              mapped.pop();
            }
            return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined2, comparator) : [];
          });
          function join(array, separator) {
            return array == null ? "" : nativeJoin.call(array, separator);
          }
          function last(array) {
            var length = array == null ? 0 : array.length;
            return length ? array[length - 1] : undefined2;
          }
          function lastIndexOf(array, value, fromIndex) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return -1;
            }
            var index = length;
            if (fromIndex !== undefined2) {
              index = toInteger(fromIndex);
              index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
            }
            return value === value ? strictLastIndexOf(array, value, index) : baseFindIndex(array, baseIsNaN, index, true);
          }
          function nth(array, n) {
            return array && array.length ? baseNth(array, toInteger(n)) : undefined2;
          }
          var pull = baseRest(pullAll);
          function pullAll(array, values2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2) : array;
          }
          function pullAllBy(array, values2, iteratee2) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, getIteratee(iteratee2, 2)) : array;
          }
          function pullAllWith(array, values2, comparator) {
            return array && array.length && values2 && values2.length ? basePullAll(array, values2, undefined2, comparator) : array;
          }
          var pullAt = flatRest(function(array, indexes) {
            var length = array == null ? 0 : array.length, result2 = baseAt(array, indexes);
            basePullAt(array, arrayMap(indexes, function(index) {
              return isIndex(index, length) ? +index : index;
            }).sort(compareAscending));
            return result2;
          });
          function remove(array, predicate) {
            var result2 = [];
            if (!(array && array.length)) {
              return result2;
            }
            var index = -1, indexes = [], length = array.length;
            predicate = getIteratee(predicate, 3);
            while (++index < length) {
              var value = array[index];
              if (predicate(value, index, array)) {
                result2.push(value);
                indexes.push(index);
              }
            }
            basePullAt(array, indexes);
            return result2;
          }
          function reverse(array) {
            return array == null ? array : nativeReverse.call(array);
          }
          function slice(array, start, end) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            if (end && typeof end != "number" && isIterateeCall(array, start, end)) {
              start = 0;
              end = length;
            } else {
              start = start == null ? 0 : toInteger(start);
              end = end === undefined2 ? length : toInteger(end);
            }
            return baseSlice(array, start, end);
          }
          function sortedIndex(array, value) {
            return baseSortedIndex(array, value);
          }
          function sortedIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2));
          }
          function sortedIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value);
              if (index < length && eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedLastIndex(array, value) {
            return baseSortedIndex(array, value, true);
          }
          function sortedLastIndexBy(array, value, iteratee2) {
            return baseSortedIndexBy(array, value, getIteratee(iteratee2, 2), true);
          }
          function sortedLastIndexOf(array, value) {
            var length = array == null ? 0 : array.length;
            if (length) {
              var index = baseSortedIndex(array, value, true) - 1;
              if (eq(array[index], value)) {
                return index;
              }
            }
            return -1;
          }
          function sortedUniq(array) {
            return array && array.length ? baseSortedUniq(array) : [];
          }
          function sortedUniqBy(array, iteratee2) {
            return array && array.length ? baseSortedUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function tail(array) {
            var length = array == null ? 0 : array.length;
            return length ? baseSlice(array, 1, length) : [];
          }
          function take(array, n, guard) {
            if (!(array && array.length)) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            return baseSlice(array, 0, n < 0 ? 0 : n);
          }
          function takeRight(array, n, guard) {
            var length = array == null ? 0 : array.length;
            if (!length) {
              return [];
            }
            n = guard || n === undefined2 ? 1 : toInteger(n);
            n = length - n;
            return baseSlice(array, n < 0 ? 0 : n, length);
          }
          function takeRightWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3), false, true) : [];
          }
          function takeWhile(array, predicate) {
            return array && array.length ? baseWhile(array, getIteratee(predicate, 3)) : [];
          }
          var union = baseRest(function(arrays) {
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
          });
          var unionBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee2, 2));
          });
          var unionWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined2, comparator);
          });
          function uniq(array) {
            return array && array.length ? baseUniq(array) : [];
          }
          function uniqBy(array, iteratee2) {
            return array && array.length ? baseUniq(array, getIteratee(iteratee2, 2)) : [];
          }
          function uniqWith(array, comparator) {
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return array && array.length ? baseUniq(array, undefined2, comparator) : [];
          }
          function unzip(array) {
            if (!(array && array.length)) {
              return [];
            }
            var length = 0;
            array = arrayFilter(array, function(group) {
              if (isArrayLikeObject(group)) {
                length = nativeMax(group.length, length);
                return true;
              }
            });
            return baseTimes(length, function(index) {
              return arrayMap(array, baseProperty(index));
            });
          }
          function unzipWith(array, iteratee2) {
            if (!(array && array.length)) {
              return [];
            }
            var result2 = unzip(array);
            if (iteratee2 == null) {
              return result2;
            }
            return arrayMap(result2, function(group) {
              return apply(iteratee2, undefined2, group);
            });
          }
          var without = baseRest(function(array, values2) {
            return isArrayLikeObject(array) ? baseDifference(array, values2) : [];
          });
          var xor = baseRest(function(arrays) {
            return baseXor(arrayFilter(arrays, isArrayLikeObject));
          });
          var xorBy = baseRest(function(arrays) {
            var iteratee2 = last(arrays);
            if (isArrayLikeObject(iteratee2)) {
              iteratee2 = undefined2;
            }
            return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee2, 2));
          });
          var xorWith = baseRest(function(arrays) {
            var comparator = last(arrays);
            comparator = typeof comparator == "function" ? comparator : undefined2;
            return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined2, comparator);
          });
          var zip = baseRest(unzip);
          function zipObject(props, values2) {
            return baseZipObject(props || [], values2 || [], assignValue);
          }
          function zipObjectDeep(props, values2) {
            return baseZipObject(props || [], values2 || [], baseSet);
          }
          var zipWith = baseRest(function(arrays) {
            var length = arrays.length, iteratee2 = length > 1 ? arrays[length - 1] : undefined2;
            iteratee2 = typeof iteratee2 == "function" ? (arrays.pop(), iteratee2) : undefined2;
            return unzipWith(arrays, iteratee2);
          });
          function chain(value) {
            var result2 = lodash(value);
            result2.__chain__ = true;
            return result2;
          }
          function tap(value, interceptor) {
            interceptor(value);
            return value;
          }
          function thru(value, interceptor) {
            return interceptor(value);
          }
          var wrapperAt = flatRest(function(paths) {
            var length = paths.length, start = length ? paths[0] : 0, value = this.__wrapped__, interceptor = function(object) {
              return baseAt(object, paths);
            };
            if (length > 1 || this.__actions__.length || !(value instanceof LazyWrapper) || !isIndex(start)) {
              return this.thru(interceptor);
            }
            value = value.slice(start, +start + (length ? 1 : 0));
            value.__actions__.push({
              "func": thru,
              "args": [interceptor],
              "thisArg": undefined2
            });
            return new LodashWrapper(value, this.__chain__).thru(function(array) {
              if (length && !array.length) {
                array.push(undefined2);
              }
              return array;
            });
          });
          function wrapperChain() {
            return chain(this);
          }
          function wrapperCommit() {
            return new LodashWrapper(this.value(), this.__chain__);
          }
          function wrapperNext() {
            if (this.__values__ === undefined2) {
              this.__values__ = toArray(this.value());
            }
            var done = this.__index__ >= this.__values__.length, value = done ? undefined2 : this.__values__[this.__index__++];
            return { "done": done, "value": value };
          }
          function wrapperToIterator() {
            return this;
          }
          function wrapperPlant(value) {
            var result2, parent2 = this;
            while (parent2 instanceof baseLodash) {
              var clone2 = wrapperClone(parent2);
              clone2.__index__ = 0;
              clone2.__values__ = undefined2;
              if (result2) {
                previous.__wrapped__ = clone2;
              } else {
                result2 = clone2;
              }
              var previous = clone2;
              parent2 = parent2.__wrapped__;
            }
            previous.__wrapped__ = value;
            return result2;
          }
          function wrapperReverse() {
            var value = this.__wrapped__;
            if (value instanceof LazyWrapper) {
              var wrapped = value;
              if (this.__actions__.length) {
                wrapped = new LazyWrapper(this);
              }
              wrapped = wrapped.reverse();
              wrapped.__actions__.push({
                "func": thru,
                "args": [reverse],
                "thisArg": undefined2
              });
              return new LodashWrapper(wrapped, this.__chain__);
            }
            return this.thru(reverse);
          }
          function wrapperValue() {
            return baseWrapperValue(this.__wrapped__, this.__actions__);
          }
          var countBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              ++result2[key];
            } else {
              baseAssignValue(result2, key, 1);
            }
          });
          function every(collection, predicate, guard) {
            var func = isArray(collection) ? arrayEvery : baseEvery;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          function filter(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, getIteratee(predicate, 3));
          }
          var find = createFind(findIndex);
          var findLast = createFind(findLastIndex);
          function flatMap(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), 1);
          }
          function flatMapDeep(collection, iteratee2) {
            return baseFlatten(map(collection, iteratee2), INFINITY);
          }
          function flatMapDepth(collection, iteratee2, depth) {
            depth = depth === undefined2 ? 1 : toInteger(depth);
            return baseFlatten(map(collection, iteratee2), depth);
          }
          function forEach(collection, iteratee2) {
            var func = isArray(collection) ? arrayEach : baseEach;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function forEachRight(collection, iteratee2) {
            var func = isArray(collection) ? arrayEachRight : baseEachRight;
            return func(collection, getIteratee(iteratee2, 3));
          }
          var groupBy = createAggregator(function(result2, value, key) {
            if (hasOwnProperty.call(result2, key)) {
              result2[key].push(value);
            } else {
              baseAssignValue(result2, key, [value]);
            }
          });
          function includes(collection, value, fromIndex, guard) {
            collection = isArrayLike(collection) ? collection : values(collection);
            fromIndex = fromIndex && !guard ? toInteger(fromIndex) : 0;
            var length = collection.length;
            if (fromIndex < 0) {
              fromIndex = nativeMax(length + fromIndex, 0);
            }
            return isString(collection) ? fromIndex <= length && collection.indexOf(value, fromIndex) > -1 : !!length && baseIndexOf(collection, value, fromIndex) > -1;
          }
          var invokeMap = baseRest(function(collection, path, args) {
            var index = -1, isFunc = typeof path == "function", result2 = isArrayLike(collection) ? Array2(collection.length) : [];
            baseEach(collection, function(value) {
              result2[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
            });
            return result2;
          });
          var keyBy2 = createAggregator(function(result2, value, key) {
            baseAssignValue(result2, key, value);
          });
          function map(collection, iteratee2) {
            var func = isArray(collection) ? arrayMap : baseMap;
            return func(collection, getIteratee(iteratee2, 3));
          }
          function orderBy(collection, iteratees, orders, guard) {
            if (collection == null) {
              return [];
            }
            if (!isArray(iteratees)) {
              iteratees = iteratees == null ? [] : [iteratees];
            }
            orders = guard ? undefined2 : orders;
            if (!isArray(orders)) {
              orders = orders == null ? [] : [orders];
            }
            return baseOrderBy(collection, iteratees, orders);
          }
          var partition = createAggregator(function(result2, value, key) {
            result2[key ? 0 : 1].push(value);
          }, function() {
            return [[], []];
          });
          function reduce(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduce : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEach);
          }
          function reduceRight(collection, iteratee2, accumulator) {
            var func = isArray(collection) ? arrayReduceRight : baseReduce, initAccum = arguments.length < 3;
            return func(collection, getIteratee(iteratee2, 4), accumulator, initAccum, baseEachRight);
          }
          function reject(collection, predicate) {
            var func = isArray(collection) ? arrayFilter : baseFilter;
            return func(collection, negate(getIteratee(predicate, 3)));
          }
          function sample(collection) {
            var func = isArray(collection) ? arraySample : baseSample;
            return func(collection);
          }
          function sampleSize(collection, n, guard) {
            if (guard ? isIterateeCall(collection, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            var func = isArray(collection) ? arraySampleSize : baseSampleSize;
            return func(collection, n);
          }
          function shuffle(collection) {
            var func = isArray(collection) ? arrayShuffle : baseShuffle;
            return func(collection);
          }
          function size(collection) {
            if (collection == null) {
              return 0;
            }
            if (isArrayLike(collection)) {
              return isString(collection) ? stringSize(collection) : collection.length;
            }
            var tag = getTag(collection);
            if (tag == mapTag || tag == setTag) {
              return collection.size;
            }
            return baseKeys(collection).length;
          }
          function some(collection, predicate, guard) {
            var func = isArray(collection) ? arraySome : baseSome;
            if (guard && isIterateeCall(collection, predicate, guard)) {
              predicate = undefined2;
            }
            return func(collection, getIteratee(predicate, 3));
          }
          var sortBy = baseRest(function(collection, iteratees) {
            if (collection == null) {
              return [];
            }
            var length = iteratees.length;
            if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
              iteratees = [];
            } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
              iteratees = [iteratees[0]];
            }
            return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
          });
          var now = ctxNow || function() {
            return root.Date.now();
          };
          function after(n, func) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n < 1) {
                return func.apply(this, arguments);
              }
            };
          }
          function ary(func, n, guard) {
            n = guard ? undefined2 : n;
            n = func && n == null ? func.length : n;
            return createWrap(func, WRAP_ARY_FLAG, undefined2, undefined2, undefined2, undefined2, n);
          }
          function before(n, func) {
            var result2;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            n = toInteger(n);
            return function() {
              if (--n > 0) {
                result2 = func.apply(this, arguments);
              }
              if (n <= 1) {
                func = undefined2;
              }
              return result2;
            };
          }
          var bind = baseRest(function(func, thisArg, partials) {
            var bitmask = WRAP_BIND_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bind));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(func, bitmask, thisArg, partials, holders);
          });
          var bindKey = baseRest(function(object, key, partials) {
            var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
            if (partials.length) {
              var holders = replaceHolders(partials, getHolder(bindKey));
              bitmask |= WRAP_PARTIAL_FLAG;
            }
            return createWrap(key, bitmask, object, partials, holders);
          });
          function curry(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curry.placeholder;
            return result2;
          }
          function curryRight(func, arity, guard) {
            arity = guard ? undefined2 : arity;
            var result2 = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined2, undefined2, undefined2, undefined2, undefined2, arity);
            result2.placeholder = curryRight.placeholder;
            return result2;
          }
          function debounce(func, wait, options) {
            var lastArgs, lastThis, maxWait, result2, timerId, lastCallTime, lastInvokeTime = 0, leading = false, maxing = false, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            wait = toNumber(wait) || 0;
            if (isObject(options)) {
              leading = !!options.leading;
              maxing = "maxWait" in options;
              maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            function invokeFunc(time) {
              var args = lastArgs, thisArg = lastThis;
              lastArgs = lastThis = undefined2;
              lastInvokeTime = time;
              result2 = func.apply(thisArg, args);
              return result2;
            }
            function leadingEdge(time) {
              lastInvokeTime = time;
              timerId = setTimeout(timerExpired, wait);
              return leading ? invokeFunc(time) : result2;
            }
            function remainingWait(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime, timeWaiting = wait - timeSinceLastCall;
              return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;
            }
            function shouldInvoke(time) {
              var timeSinceLastCall = time - lastCallTime, timeSinceLastInvoke = time - lastInvokeTime;
              return lastCallTime === undefined2 || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
            }
            function timerExpired() {
              var time = now();
              if (shouldInvoke(time)) {
                return trailingEdge(time);
              }
              timerId = setTimeout(timerExpired, remainingWait(time));
            }
            function trailingEdge(time) {
              timerId = undefined2;
              if (trailing && lastArgs) {
                return invokeFunc(time);
              }
              lastArgs = lastThis = undefined2;
              return result2;
            }
            function cancel() {
              if (timerId !== undefined2) {
                clearTimeout(timerId);
              }
              lastInvokeTime = 0;
              lastArgs = lastCallTime = lastThis = timerId = undefined2;
            }
            function flush() {
              return timerId === undefined2 ? result2 : trailingEdge(now());
            }
            function debounced() {
              var time = now(), isInvoking = shouldInvoke(time);
              lastArgs = arguments;
              lastThis = this;
              lastCallTime = time;
              if (isInvoking) {
                if (timerId === undefined2) {
                  return leadingEdge(lastCallTime);
                }
                if (maxing) {
                  clearTimeout(timerId);
                  timerId = setTimeout(timerExpired, wait);
                  return invokeFunc(lastCallTime);
                }
              }
              if (timerId === undefined2) {
                timerId = setTimeout(timerExpired, wait);
              }
              return result2;
            }
            debounced.cancel = cancel;
            debounced.flush = flush;
            return debounced;
          }
          var defer = baseRest(function(func, args) {
            return baseDelay(func, 1, args);
          });
          var delay = baseRest(function(func, wait, args) {
            return baseDelay(func, toNumber(wait) || 0, args);
          });
          function flip(func) {
            return createWrap(func, WRAP_FLIP_FLAG);
          }
          function memoize(func, resolver) {
            if (typeof func != "function" || resolver != null && typeof resolver != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            var memoized = function() {
              var args = arguments, key = resolver ? resolver.apply(this, args) : args[0], cache = memoized.cache;
              if (cache.has(key)) {
                return cache.get(key);
              }
              var result2 = func.apply(this, args);
              memoized.cache = cache.set(key, result2) || cache;
              return result2;
            };
            memoized.cache = new (memoize.Cache || MapCache)();
            return memoized;
          }
          memoize.Cache = MapCache;
          function negate(predicate) {
            if (typeof predicate != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            return function() {
              var args = arguments;
              switch (args.length) {
                case 0:
                  return !predicate.call(this);
                case 1:
                  return !predicate.call(this, args[0]);
                case 2:
                  return !predicate.call(this, args[0], args[1]);
                case 3:
                  return !predicate.call(this, args[0], args[1], args[2]);
              }
              return !predicate.apply(this, args);
            };
          }
          function once(func) {
            return before(2, func);
          }
          var overArgs = castRest(function(func, transforms) {
            transforms = transforms.length == 1 && isArray(transforms[0]) ? arrayMap(transforms[0], baseUnary(getIteratee())) : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));
            var funcsLength = transforms.length;
            return baseRest(function(args) {
              var index = -1, length = nativeMin(args.length, funcsLength);
              while (++index < length) {
                args[index] = transforms[index].call(this, args[index]);
              }
              return apply(func, this, args);
            });
          });
          var partial = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partial));
            return createWrap(func, WRAP_PARTIAL_FLAG, undefined2, partials, holders);
          });
          var partialRight = baseRest(function(func, partials) {
            var holders = replaceHolders(partials, getHolder(partialRight));
            return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined2, partials, holders);
          });
          var rearg = flatRest(function(func, indexes) {
            return createWrap(func, WRAP_REARG_FLAG, undefined2, undefined2, undefined2, indexes);
          });
          function rest(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start === undefined2 ? start : toInteger(start);
            return baseRest(func, start);
          }
          function spread(func, start) {
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            start = start == null ? 0 : nativeMax(toInteger(start), 0);
            return baseRest(function(args) {
              var array = args[start], otherArgs = castSlice(args, 0, start);
              if (array) {
                arrayPush(otherArgs, array);
              }
              return apply(func, this, otherArgs);
            });
          }
          function throttle(func, wait, options) {
            var leading = true, trailing = true;
            if (typeof func != "function") {
              throw new TypeError2(FUNC_ERROR_TEXT);
            }
            if (isObject(options)) {
              leading = "leading" in options ? !!options.leading : leading;
              trailing = "trailing" in options ? !!options.trailing : trailing;
            }
            return debounce(func, wait, {
              "leading": leading,
              "maxWait": wait,
              "trailing": trailing
            });
          }
          function unary(func) {
            return ary(func, 1);
          }
          function wrap(value, wrapper) {
            return partial(castFunction(wrapper), value);
          }
          function castArray() {
            if (!arguments.length) {
              return [];
            }
            var value = arguments[0];
            return isArray(value) ? value : [value];
          }
          function clone(value) {
            return baseClone(value, CLONE_SYMBOLS_FLAG);
          }
          function cloneWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
          }
          function cloneDeep(value) {
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
          }
          function cloneDeepWith(value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
          }
          function conformsTo(object, source) {
            return source == null || baseConformsTo(object, source, keys(source));
          }
          function eq(value, other) {
            return value === other || value !== value && other !== other;
          }
          var gt = createRelationalOperation(baseGt);
          var gte = createRelationalOperation(function(value, other) {
            return value >= other;
          });
          var isArguments = baseIsArguments(function() {
            return arguments;
          }()) ? baseIsArguments : function(value) {
            return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
          };
          var isArray = Array2.isArray;
          var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;
          function isArrayLike(value) {
            return value != null && isLength(value.length) && !isFunction(value);
          }
          function isArrayLikeObject(value) {
            return isObjectLike(value) && isArrayLike(value);
          }
          function isBoolean(value) {
            return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
          }
          var isBuffer = nativeIsBuffer || stubFalse;
          var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;
          function isElement(value) {
            return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
          }
          function isEmpty(value) {
            if (value == null) {
              return true;
            }
            if (isArrayLike(value) && (isArray(value) || typeof value == "string" || typeof value.splice == "function" || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
              return !value.length;
            }
            var tag = getTag(value);
            if (tag == mapTag || tag == setTag) {
              return !value.size;
            }
            if (isPrototype(value)) {
              return !baseKeys(value).length;
            }
            for (var key in value) {
              if (hasOwnProperty.call(value, key)) {
                return false;
              }
            }
            return true;
          }
          function isEqual(value, other) {
            return baseIsEqual(value, other);
          }
          function isEqualWith(value, other, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            var result2 = customizer ? customizer(value, other) : undefined2;
            return result2 === undefined2 ? baseIsEqual(value, other, undefined2, customizer) : !!result2;
          }
          function isError(value) {
            if (!isObjectLike(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == errorTag || tag == domExcTag || typeof value.message == "string" && typeof value.name == "string" && !isPlainObject(value);
          }
          function isFinite2(value) {
            return typeof value == "number" && nativeIsFinite(value);
          }
          function isFunction(value) {
            if (!isObject(value)) {
              return false;
            }
            var tag = baseGetTag(value);
            return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
          }
          function isInteger(value) {
            return typeof value == "number" && value == toInteger(value);
          }
          function isLength(value) {
            return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
          }
          function isObject(value) {
            var type = typeof value;
            return value != null && (type == "object" || type == "function");
          }
          function isObjectLike(value) {
            return value != null && typeof value == "object";
          }
          var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;
          function isMatch(object, source) {
            return object === source || baseIsMatch(object, source, getMatchData(source));
          }
          function isMatchWith(object, source, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return baseIsMatch(object, source, getMatchData(source), customizer);
          }
          function isNaN2(value) {
            return isNumber(value) && value != +value;
          }
          function isNative(value) {
            if (isMaskable(value)) {
              throw new Error2(CORE_ERROR_TEXT);
            }
            return baseIsNative(value);
          }
          function isNull(value) {
            return value === null;
          }
          function isNil(value) {
            return value == null;
          }
          function isNumber(value) {
            return typeof value == "number" || isObjectLike(value) && baseGetTag(value) == numberTag;
          }
          function isPlainObject(value) {
            if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
              return false;
            }
            var proto = getPrototype(value);
            if (proto === null) {
              return true;
            }
            var Ctor = hasOwnProperty.call(proto, "constructor") && proto.constructor;
            return typeof Ctor == "function" && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
          }
          var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;
          function isSafeInteger(value) {
            return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
          }
          var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;
          function isString(value) {
            return typeof value == "string" || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
          }
          function isSymbol(value) {
            return typeof value == "symbol" || isObjectLike(value) && baseGetTag(value) == symbolTag;
          }
          var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
          function isUndefined(value) {
            return value === undefined2;
          }
          function isWeakMap(value) {
            return isObjectLike(value) && getTag(value) == weakMapTag;
          }
          function isWeakSet(value) {
            return isObjectLike(value) && baseGetTag(value) == weakSetTag;
          }
          var lt = createRelationalOperation(baseLt);
          var lte = createRelationalOperation(function(value, other) {
            return value <= other;
          });
          function toArray(value) {
            if (!value) {
              return [];
            }
            if (isArrayLike(value)) {
              return isString(value) ? stringToArray(value) : copyArray(value);
            }
            if (symIterator && value[symIterator]) {
              return iteratorToArray(value[symIterator]());
            }
            var tag = getTag(value), func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;
            return func(value);
          }
          function toFinite(value) {
            if (!value) {
              return value === 0 ? value : 0;
            }
            value = toNumber(value);
            if (value === INFINITY || value === -INFINITY) {
              var sign = value < 0 ? -1 : 1;
              return sign * MAX_INTEGER;
            }
            return value === value ? value : 0;
          }
          function toInteger(value) {
            var result2 = toFinite(value), remainder = result2 % 1;
            return result2 === result2 ? remainder ? result2 - remainder : result2 : 0;
          }
          function toLength(value) {
            return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
          }
          function toNumber(value) {
            if (typeof value == "number") {
              return value;
            }
            if (isSymbol(value)) {
              return NAN;
            }
            if (isObject(value)) {
              var other = typeof value.valueOf == "function" ? value.valueOf() : value;
              value = isObject(other) ? other + "" : other;
            }
            if (typeof value != "string") {
              return value === 0 ? value : +value;
            }
            value = baseTrim(value);
            var isBinary = reIsBinary.test(value);
            return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
          }
          function toPlainObject(value) {
            return copyObject(value, keysIn(value));
          }
          function toSafeInteger(value) {
            return value ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER) : value === 0 ? value : 0;
          }
          function toString(value) {
            return value == null ? "" : baseToString(value);
          }
          var assign = createAssigner(function(object, source) {
            if (isPrototype(source) || isArrayLike(source)) {
              copyObject(source, keys(source), object);
              return;
            }
            for (var key in source) {
              if (hasOwnProperty.call(source, key)) {
                assignValue(object, key, source[key]);
              }
            }
          });
          var assignIn = createAssigner(function(object, source) {
            copyObject(source, keysIn(source), object);
          });
          var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keysIn(source), object, customizer);
          });
          var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
            copyObject(source, keys(source), object, customizer);
          });
          var at = flatRest(baseAt);
          function create(prototype, properties) {
            var result2 = baseCreate(prototype);
            return properties == null ? result2 : baseAssign(result2, properties);
          }
          var defaults = baseRest(function(object, sources) {
            object = Object2(object);
            var index = -1;
            var length = sources.length;
            var guard = length > 2 ? sources[2] : undefined2;
            if (guard && isIterateeCall(sources[0], sources[1], guard)) {
              length = 1;
            }
            while (++index < length) {
              var source = sources[index];
              var props = keysIn(source);
              var propsIndex = -1;
              var propsLength = props.length;
              while (++propsIndex < propsLength) {
                var key = props[propsIndex];
                var value = object[key];
                if (value === undefined2 || eq(value, objectProto[key]) && !hasOwnProperty.call(object, key)) {
                  object[key] = source[key];
                }
              }
            }
            return object;
          });
          var defaultsDeep = baseRest(function(args) {
            args.push(undefined2, customDefaultsMerge);
            return apply(mergeWith, undefined2, args);
          });
          function findKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
          }
          function findLastKey(object, predicate) {
            return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
          }
          function forIn(object, iteratee2) {
            return object == null ? object : baseFor(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forInRight(object, iteratee2) {
            return object == null ? object : baseForRight(object, getIteratee(iteratee2, 3), keysIn);
          }
          function forOwn(object, iteratee2) {
            return object && baseForOwn(object, getIteratee(iteratee2, 3));
          }
          function forOwnRight(object, iteratee2) {
            return object && baseForOwnRight(object, getIteratee(iteratee2, 3));
          }
          function functions(object) {
            return object == null ? [] : baseFunctions(object, keys(object));
          }
          function functionsIn(object) {
            return object == null ? [] : baseFunctions(object, keysIn(object));
          }
          function get(object, path, defaultValue) {
            var result2 = object == null ? undefined2 : baseGet(object, path);
            return result2 === undefined2 ? defaultValue : result2;
          }
          function has(object, path) {
            return object != null && hasPath(object, path, baseHas);
          }
          function hasIn(object, path) {
            return object != null && hasPath(object, path, baseHasIn);
          }
          var invert = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            result2[value] = key;
          }, constant(identity));
          var invertBy = createInverter(function(result2, value, key) {
            if (value != null && typeof value.toString != "function") {
              value = nativeObjectToString.call(value);
            }
            if (hasOwnProperty.call(result2, value)) {
              result2[value].push(key);
            } else {
              result2[value] = [key];
            }
          }, getIteratee);
          var invoke = baseRest(baseInvoke);
          function keys(object) {
            return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
          }
          function keysIn(object) {
            return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
          }
          function mapKeys(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, iteratee2(value, key, object2), value);
            });
            return result2;
          }
          function mapValues(object, iteratee2) {
            var result2 = {};
            iteratee2 = getIteratee(iteratee2, 3);
            baseForOwn(object, function(value, key, object2) {
              baseAssignValue(result2, key, iteratee2(value, key, object2));
            });
            return result2;
          }
          var merge = createAssigner(function(object, source, srcIndex) {
            baseMerge(object, source, srcIndex);
          });
          var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
            baseMerge(object, source, srcIndex, customizer);
          });
          var omit = flatRest(function(object, paths) {
            var result2 = {};
            if (object == null) {
              return result2;
            }
            var isDeep = false;
            paths = arrayMap(paths, function(path) {
              path = castPath(path, object);
              isDeep || (isDeep = path.length > 1);
              return path;
            });
            copyObject(object, getAllKeysIn(object), result2);
            if (isDeep) {
              result2 = baseClone(result2, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
            }
            var length = paths.length;
            while (length--) {
              baseUnset(result2, paths[length]);
            }
            return result2;
          });
          function omitBy(object, predicate) {
            return pickBy(object, negate(getIteratee(predicate)));
          }
          var pick = flatRest(function(object, paths) {
            return object == null ? {} : basePick(object, paths);
          });
          function pickBy(object, predicate) {
            if (object == null) {
              return {};
            }
            var props = arrayMap(getAllKeysIn(object), function(prop) {
              return [prop];
            });
            predicate = getIteratee(predicate);
            return basePickBy(object, props, function(value, path) {
              return predicate(value, path[0]);
            });
          }
          function result(object, path, defaultValue) {
            path = castPath(path, object);
            var index = -1, length = path.length;
            if (!length) {
              length = 1;
              object = undefined2;
            }
            while (++index < length) {
              var value = object == null ? undefined2 : object[toKey(path[index])];
              if (value === undefined2) {
                index = length;
                value = defaultValue;
              }
              object = isFunction(value) ? value.call(object) : value;
            }
            return object;
          }
          function set(object, path, value) {
            return object == null ? object : baseSet(object, path, value);
          }
          function setWith(object, path, value, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseSet(object, path, value, customizer);
          }
          var toPairs = createToPairs(keys);
          var toPairsIn = createToPairs(keysIn);
          function transform(object, iteratee2, accumulator) {
            var isArr = isArray(object), isArrLike = isArr || isBuffer(object) || isTypedArray(object);
            iteratee2 = getIteratee(iteratee2, 4);
            if (accumulator == null) {
              var Ctor = object && object.constructor;
              if (isArrLike) {
                accumulator = isArr ? new Ctor() : [];
              } else if (isObject(object)) {
                accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
              } else {
                accumulator = {};
              }
            }
            (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object2) {
              return iteratee2(accumulator, value, index, object2);
            });
            return accumulator;
          }
          function unset(object, path) {
            return object == null ? true : baseUnset(object, path);
          }
          function update(object, path, updater) {
            return object == null ? object : baseUpdate(object, path, castFunction(updater));
          }
          function updateWith(object, path, updater, customizer) {
            customizer = typeof customizer == "function" ? customizer : undefined2;
            return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
          }
          function values(object) {
            return object == null ? [] : baseValues(object, keys(object));
          }
          function valuesIn(object) {
            return object == null ? [] : baseValues(object, keysIn(object));
          }
          function clamp(number, lower, upper) {
            if (upper === undefined2) {
              upper = lower;
              lower = undefined2;
            }
            if (upper !== undefined2) {
              upper = toNumber(upper);
              upper = upper === upper ? upper : 0;
            }
            if (lower !== undefined2) {
              lower = toNumber(lower);
              lower = lower === lower ? lower : 0;
            }
            return baseClamp(toNumber(number), lower, upper);
          }
          function inRange(number, start, end) {
            start = toFinite(start);
            if (end === undefined2) {
              end = start;
              start = 0;
            } else {
              end = toFinite(end);
            }
            number = toNumber(number);
            return baseInRange(number, start, end);
          }
          function random(lower, upper, floating) {
            if (floating && typeof floating != "boolean" && isIterateeCall(lower, upper, floating)) {
              upper = floating = undefined2;
            }
            if (floating === undefined2) {
              if (typeof upper == "boolean") {
                floating = upper;
                upper = undefined2;
              } else if (typeof lower == "boolean") {
                floating = lower;
                lower = undefined2;
              }
            }
            if (lower === undefined2 && upper === undefined2) {
              lower = 0;
              upper = 1;
            } else {
              lower = toFinite(lower);
              if (upper === undefined2) {
                upper = lower;
                lower = 0;
              } else {
                upper = toFinite(upper);
              }
            }
            if (lower > upper) {
              var temp = lower;
              lower = upper;
              upper = temp;
            }
            if (floating || lower % 1 || upper % 1) {
              var rand = nativeRandom();
              return nativeMin(lower + rand * (upper - lower + freeParseFloat("1e-" + ((rand + "").length - 1))), upper);
            }
            return baseRandom(lower, upper);
          }
          var camelCase = createCompounder(function(result2, word, index) {
            word = word.toLowerCase();
            return result2 + (index ? capitalize(word) : word);
          });
          function capitalize(string) {
            return upperFirst(toString(string).toLowerCase());
          }
          function deburr(string) {
            string = toString(string);
            return string && string.replace(reLatin, deburrLetter).replace(reComboMark, "");
          }
          function endsWith(string, target, position) {
            string = toString(string);
            target = baseToString(target);
            var length = string.length;
            position = position === undefined2 ? length : baseClamp(toInteger(position), 0, length);
            var end = position;
            position -= target.length;
            return position >= 0 && string.slice(position, end) == target;
          }
          function escape(string) {
            string = toString(string);
            return string && reHasUnescapedHtml.test(string) ? string.replace(reUnescapedHtml, escapeHtmlChar) : string;
          }
          function escapeRegExp(string) {
            string = toString(string);
            return string && reHasRegExpChar.test(string) ? string.replace(reRegExpChar, "\\$&") : string;
          }
          var kebabCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "-" : "") + word.toLowerCase();
          });
          var lowerCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toLowerCase();
          });
          var lowerFirst = createCaseFirst("toLowerCase");
          function pad(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            if (!length || strLength >= length) {
              return string;
            }
            var mid = (length - strLength) / 2;
            return createPadding(nativeFloor(mid), chars) + string + createPadding(nativeCeil(mid), chars);
          }
          function padEnd(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? string + createPadding(length - strLength, chars) : string;
          }
          function padStart(string, length, chars) {
            string = toString(string);
            length = toInteger(length);
            var strLength = length ? stringSize(string) : 0;
            return length && strLength < length ? createPadding(length - strLength, chars) + string : string;
          }
          function parseInt2(string, radix, guard) {
            if (guard || radix == null) {
              radix = 0;
            } else if (radix) {
              radix = +radix;
            }
            return nativeParseInt(toString(string).replace(reTrimStart, ""), radix || 0);
          }
          function repeat(string, n, guard) {
            if (guard ? isIterateeCall(string, n, guard) : n === undefined2) {
              n = 1;
            } else {
              n = toInteger(n);
            }
            return baseRepeat(toString(string), n);
          }
          function replace() {
            var args = arguments, string = toString(args[0]);
            return args.length < 3 ? string : string.replace(args[1], args[2]);
          }
          var snakeCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? "_" : "") + word.toLowerCase();
          });
          function split(string, separator, limit) {
            if (limit && typeof limit != "number" && isIterateeCall(string, separator, limit)) {
              separator = limit = undefined2;
            }
            limit = limit === undefined2 ? MAX_ARRAY_LENGTH : limit >>> 0;
            if (!limit) {
              return [];
            }
            string = toString(string);
            if (string && (typeof separator == "string" || separator != null && !isRegExp(separator))) {
              separator = baseToString(separator);
              if (!separator && hasUnicode(string)) {
                return castSlice(stringToArray(string), 0, limit);
              }
            }
            return string.split(separator, limit);
          }
          var startCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + upperFirst(word);
          });
          function startsWith(string, target, position) {
            string = toString(string);
            position = position == null ? 0 : baseClamp(toInteger(position), 0, string.length);
            target = baseToString(target);
            return string.slice(position, position + target.length) == target;
          }
          function template(string, options, guard) {
            var settings = lodash.templateSettings;
            if (guard && isIterateeCall(string, options, guard)) {
              options = undefined2;
            }
            string = toString(string);
            options = assignInWith({}, options, settings, customDefaultsAssignIn);
            var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn), importsKeys = keys(imports), importsValues = baseValues(imports, importsKeys);
            var isEscaping, isEvaluating, index = 0, interpolate = options.interpolate || reNoMatch, source = "__p += '";
            var reDelimiters = RegExp2(
              (options.escape || reNoMatch).source + "|" + interpolate.source + "|" + (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + "|" + (options.evaluate || reNoMatch).source + "|$",
              "g"
            );
            var sourceURL = "//# sourceURL=" + (hasOwnProperty.call(options, "sourceURL") ? (options.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++templateCounter + "]") + "\n";
            string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
              interpolateValue || (interpolateValue = esTemplateValue);
              source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);
              if (escapeValue) {
                isEscaping = true;
                source += "' +\n__e(" + escapeValue + ") +\n'";
              }
              if (evaluateValue) {
                isEvaluating = true;
                source += "';\n" + evaluateValue + ";\n__p += '";
              }
              if (interpolateValue) {
                source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
              }
              index = offset + match.length;
              return match;
            });
            source += "';\n";
            var variable = hasOwnProperty.call(options, "variable") && options.variable;
            if (!variable) {
              source = "with (obj) {\n" + source + "\n}\n";
            } else if (reForbiddenIdentifierChars.test(variable)) {
              throw new Error2(INVALID_TEMPL_VAR_ERROR_TEXT);
            }
            source = (isEvaluating ? source.replace(reEmptyStringLeading, "") : source).replace(reEmptyStringMiddle, "$1").replace(reEmptyStringTrailing, "$1;");
            source = "function(" + (variable || "obj") + ") {\n" + (variable ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (isEscaping ? ", __e = _.escape" : "") + (isEvaluating ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + source + "return __p\n}";
            var result2 = attempt(function() {
              return Function2(importsKeys, sourceURL + "return " + source).apply(undefined2, importsValues);
            });
            result2.source = source;
            if (isError(result2)) {
              throw result2;
            }
            return result2;
          }
          function toLower(value) {
            return toString(value).toLowerCase();
          }
          function toUpper(value) {
            return toString(value).toUpperCase();
          }
          function trim(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return baseTrim(string);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), chrSymbols = stringToArray(chars), start = charsStartIndex(strSymbols, chrSymbols), end = charsEndIndex(strSymbols, chrSymbols) + 1;
            return castSlice(strSymbols, start, end).join("");
          }
          function trimEnd(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.slice(0, trimmedEndIndex(string) + 1);
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;
            return castSlice(strSymbols, 0, end).join("");
          }
          function trimStart(string, chars, guard) {
            string = toString(string);
            if (string && (guard || chars === undefined2)) {
              return string.replace(reTrimStart, "");
            }
            if (!string || !(chars = baseToString(chars))) {
              return string;
            }
            var strSymbols = stringToArray(string), start = charsStartIndex(strSymbols, stringToArray(chars));
            return castSlice(strSymbols, start).join("");
          }
          function truncate(string, options) {
            var length = DEFAULT_TRUNC_LENGTH, omission = DEFAULT_TRUNC_OMISSION;
            if (isObject(options)) {
              var separator = "separator" in options ? options.separator : separator;
              length = "length" in options ? toInteger(options.length) : length;
              omission = "omission" in options ? baseToString(options.omission) : omission;
            }
            string = toString(string);
            var strLength = string.length;
            if (hasUnicode(string)) {
              var strSymbols = stringToArray(string);
              strLength = strSymbols.length;
            }
            if (length >= strLength) {
              return string;
            }
            var end = length - stringSize(omission);
            if (end < 1) {
              return omission;
            }
            var result2 = strSymbols ? castSlice(strSymbols, 0, end).join("") : string.slice(0, end);
            if (separator === undefined2) {
              return result2 + omission;
            }
            if (strSymbols) {
              end += result2.length - end;
            }
            if (isRegExp(separator)) {
              if (string.slice(end).search(separator)) {
                var match, substring = result2;
                if (!separator.global) {
                  separator = RegExp2(separator.source, toString(reFlags.exec(separator)) + "g");
                }
                separator.lastIndex = 0;
                while (match = separator.exec(substring)) {
                  var newEnd = match.index;
                }
                result2 = result2.slice(0, newEnd === undefined2 ? end : newEnd);
              }
            } else if (string.indexOf(baseToString(separator), end) != end) {
              var index = result2.lastIndexOf(separator);
              if (index > -1) {
                result2 = result2.slice(0, index);
              }
            }
            return result2 + omission;
          }
          function unescape(string) {
            string = toString(string);
            return string && reHasEscapedHtml.test(string) ? string.replace(reEscapedHtml, unescapeHtmlChar) : string;
          }
          var upperCase = createCompounder(function(result2, word, index) {
            return result2 + (index ? " " : "") + word.toUpperCase();
          });
          var upperFirst = createCaseFirst("toUpperCase");
          function words(string, pattern, guard) {
            string = toString(string);
            pattern = guard ? undefined2 : pattern;
            if (pattern === undefined2) {
              return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
            }
            return string.match(pattern) || [];
          }
          var attempt = baseRest(function(func, args) {
            try {
              return apply(func, undefined2, args);
            } catch (e) {
              return isError(e) ? e : new Error2(e);
            }
          });
          var bindAll = flatRest(function(object, methodNames) {
            arrayEach(methodNames, function(key) {
              key = toKey(key);
              baseAssignValue(object, key, bind(object[key], object));
            });
            return object;
          });
          function cond(pairs) {
            var length = pairs == null ? 0 : pairs.length, toIteratee = getIteratee();
            pairs = !length ? [] : arrayMap(pairs, function(pair) {
              if (typeof pair[1] != "function") {
                throw new TypeError2(FUNC_ERROR_TEXT);
              }
              return [toIteratee(pair[0]), pair[1]];
            });
            return baseRest(function(args) {
              var index = -1;
              while (++index < length) {
                var pair = pairs[index];
                if (apply(pair[0], this, args)) {
                  return apply(pair[1], this, args);
                }
              }
            });
          }
          function conforms(source) {
            return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
          }
          function constant(value) {
            return function() {
              return value;
            };
          }
          function defaultTo(value, defaultValue) {
            return value == null || value !== value ? defaultValue : value;
          }
          var flow = createFlow();
          var flowRight = createFlow(true);
          function identity(value) {
            return value;
          }
          function iteratee(func) {
            return baseIteratee(typeof func == "function" ? func : baseClone(func, CLONE_DEEP_FLAG));
          }
          function matches(source) {
            return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
          }
          function matchesProperty(path, srcValue) {
            return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
          }
          var method = baseRest(function(path, args) {
            return function(object) {
              return baseInvoke(object, path, args);
            };
          });
          var methodOf = baseRest(function(object, args) {
            return function(path) {
              return baseInvoke(object, path, args);
            };
          });
          function mixin(object, source, options) {
            var props = keys(source), methodNames = baseFunctions(source, props);
            if (options == null && !(isObject(source) && (methodNames.length || !props.length))) {
              options = source;
              source = object;
              object = this;
              methodNames = baseFunctions(source, keys(source));
            }
            var chain2 = !(isObject(options) && "chain" in options) || !!options.chain, isFunc = isFunction(object);
            arrayEach(methodNames, function(methodName) {
              var func = source[methodName];
              object[methodName] = func;
              if (isFunc) {
                object.prototype[methodName] = function() {
                  var chainAll = this.__chain__;
                  if (chain2 || chainAll) {
                    var result2 = object(this.__wrapped__), actions = result2.__actions__ = copyArray(this.__actions__);
                    actions.push({ "func": func, "args": arguments, "thisArg": object });
                    result2.__chain__ = chainAll;
                    return result2;
                  }
                  return func.apply(object, arrayPush([this.value()], arguments));
                };
              }
            });
            return object;
          }
          function noConflict() {
            if (root._ === this) {
              root._ = oldDash;
            }
            return this;
          }
          function noop() {
          }
          function nthArg(n) {
            n = toInteger(n);
            return baseRest(function(args) {
              return baseNth(args, n);
            });
          }
          var over = createOver(arrayMap);
          var overEvery = createOver(arrayEvery);
          var overSome = createOver(arraySome);
          function property(path) {
            return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
          }
          function propertyOf(object) {
            return function(path) {
              return object == null ? undefined2 : baseGet(object, path);
            };
          }
          var range = createRange();
          var rangeRight = createRange(true);
          function stubArray() {
            return [];
          }
          function stubFalse() {
            return false;
          }
          function stubObject() {
            return {};
          }
          function stubString() {
            return "";
          }
          function stubTrue() {
            return true;
          }
          function times(n, iteratee2) {
            n = toInteger(n);
            if (n < 1 || n > MAX_SAFE_INTEGER) {
              return [];
            }
            var index = MAX_ARRAY_LENGTH, length = nativeMin(n, MAX_ARRAY_LENGTH);
            iteratee2 = getIteratee(iteratee2);
            n -= MAX_ARRAY_LENGTH;
            var result2 = baseTimes(length, iteratee2);
            while (++index < n) {
              iteratee2(index);
            }
            return result2;
          }
          function toPath(value) {
            if (isArray(value)) {
              return arrayMap(value, toKey);
            }
            return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
          }
          function uniqueId(prefix) {
            var id = ++idCounter;
            return toString(prefix) + id;
          }
          var add = createMathOperation(function(augend, addend) {
            return augend + addend;
          }, 0);
          var ceil = createRound("ceil");
          var divide = createMathOperation(function(dividend, divisor) {
            return dividend / divisor;
          }, 1);
          var floor = createRound("floor");
          function max(array) {
            return array && array.length ? baseExtremum(array, identity, baseGt) : undefined2;
          }
          function maxBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseGt) : undefined2;
          }
          function mean(array) {
            return baseMean(array, identity);
          }
          function meanBy(array, iteratee2) {
            return baseMean(array, getIteratee(iteratee2, 2));
          }
          function min(array) {
            return array && array.length ? baseExtremum(array, identity, baseLt) : undefined2;
          }
          function minBy(array, iteratee2) {
            return array && array.length ? baseExtremum(array, getIteratee(iteratee2, 2), baseLt) : undefined2;
          }
          var multiply = createMathOperation(function(multiplier, multiplicand) {
            return multiplier * multiplicand;
          }, 1);
          var round = createRound("round");
          var subtract = createMathOperation(function(minuend, subtrahend) {
            return minuend - subtrahend;
          }, 0);
          function sum(array) {
            return array && array.length ? baseSum(array, identity) : 0;
          }
          function sumBy(array, iteratee2) {
            return array && array.length ? baseSum(array, getIteratee(iteratee2, 2)) : 0;
          }
          lodash.after = after;
          lodash.ary = ary;
          lodash.assign = assign;
          lodash.assignIn = assignIn;
          lodash.assignInWith = assignInWith;
          lodash.assignWith = assignWith;
          lodash.at = at;
          lodash.before = before;
          lodash.bind = bind;
          lodash.bindAll = bindAll;
          lodash.bindKey = bindKey;
          lodash.castArray = castArray;
          lodash.chain = chain;
          lodash.chunk = chunk;
          lodash.compact = compact;
          lodash.concat = concat;
          lodash.cond = cond;
          lodash.conforms = conforms;
          lodash.constant = constant;
          lodash.countBy = countBy;
          lodash.create = create;
          lodash.curry = curry;
          lodash.curryRight = curryRight;
          lodash.debounce = debounce;
          lodash.defaults = defaults;
          lodash.defaultsDeep = defaultsDeep;
          lodash.defer = defer;
          lodash.delay = delay;
          lodash.difference = difference;
          lodash.differenceBy = differenceBy;
          lodash.differenceWith = differenceWith;
          lodash.drop = drop;
          lodash.dropRight = dropRight;
          lodash.dropRightWhile = dropRightWhile;
          lodash.dropWhile = dropWhile;
          lodash.fill = fill;
          lodash.filter = filter;
          lodash.flatMap = flatMap;
          lodash.flatMapDeep = flatMapDeep;
          lodash.flatMapDepth = flatMapDepth;
          lodash.flatten = flatten;
          lodash.flattenDeep = flattenDeep;
          lodash.flattenDepth = flattenDepth;
          lodash.flip = flip;
          lodash.flow = flow;
          lodash.flowRight = flowRight;
          lodash.fromPairs = fromPairs;
          lodash.functions = functions;
          lodash.functionsIn = functionsIn;
          lodash.groupBy = groupBy;
          lodash.initial = initial;
          lodash.intersection = intersection;
          lodash.intersectionBy = intersectionBy;
          lodash.intersectionWith = intersectionWith;
          lodash.invert = invert;
          lodash.invertBy = invertBy;
          lodash.invokeMap = invokeMap;
          lodash.iteratee = iteratee;
          lodash.keyBy = keyBy2;
          lodash.keys = keys;
          lodash.keysIn = keysIn;
          lodash.map = map;
          lodash.mapKeys = mapKeys;
          lodash.mapValues = mapValues;
          lodash.matches = matches;
          lodash.matchesProperty = matchesProperty;
          lodash.memoize = memoize;
          lodash.merge = merge;
          lodash.mergeWith = mergeWith;
          lodash.method = method;
          lodash.methodOf = methodOf;
          lodash.mixin = mixin;
          lodash.negate = negate;
          lodash.nthArg = nthArg;
          lodash.omit = omit;
          lodash.omitBy = omitBy;
          lodash.once = once;
          lodash.orderBy = orderBy;
          lodash.over = over;
          lodash.overArgs = overArgs;
          lodash.overEvery = overEvery;
          lodash.overSome = overSome;
          lodash.partial = partial;
          lodash.partialRight = partialRight;
          lodash.partition = partition;
          lodash.pick = pick;
          lodash.pickBy = pickBy;
          lodash.property = property;
          lodash.propertyOf = propertyOf;
          lodash.pull = pull;
          lodash.pullAll = pullAll;
          lodash.pullAllBy = pullAllBy;
          lodash.pullAllWith = pullAllWith;
          lodash.pullAt = pullAt;
          lodash.range = range;
          lodash.rangeRight = rangeRight;
          lodash.rearg = rearg;
          lodash.reject = reject;
          lodash.remove = remove;
          lodash.rest = rest;
          lodash.reverse = reverse;
          lodash.sampleSize = sampleSize;
          lodash.set = set;
          lodash.setWith = setWith;
          lodash.shuffle = shuffle;
          lodash.slice = slice;
          lodash.sortBy = sortBy;
          lodash.sortedUniq = sortedUniq;
          lodash.sortedUniqBy = sortedUniqBy;
          lodash.split = split;
          lodash.spread = spread;
          lodash.tail = tail;
          lodash.take = take;
          lodash.takeRight = takeRight;
          lodash.takeRightWhile = takeRightWhile;
          lodash.takeWhile = takeWhile;
          lodash.tap = tap;
          lodash.throttle = throttle;
          lodash.thru = thru;
          lodash.toArray = toArray;
          lodash.toPairs = toPairs;
          lodash.toPairsIn = toPairsIn;
          lodash.toPath = toPath;
          lodash.toPlainObject = toPlainObject;
          lodash.transform = transform;
          lodash.unary = unary;
          lodash.union = union;
          lodash.unionBy = unionBy;
          lodash.unionWith = unionWith;
          lodash.uniq = uniq;
          lodash.uniqBy = uniqBy;
          lodash.uniqWith = uniqWith;
          lodash.unset = unset;
          lodash.unzip = unzip;
          lodash.unzipWith = unzipWith;
          lodash.update = update;
          lodash.updateWith = updateWith;
          lodash.values = values;
          lodash.valuesIn = valuesIn;
          lodash.without = without;
          lodash.words = words;
          lodash.wrap = wrap;
          lodash.xor = xor;
          lodash.xorBy = xorBy;
          lodash.xorWith = xorWith;
          lodash.zip = zip;
          lodash.zipObject = zipObject;
          lodash.zipObjectDeep = zipObjectDeep;
          lodash.zipWith = zipWith;
          lodash.entries = toPairs;
          lodash.entriesIn = toPairsIn;
          lodash.extend = assignIn;
          lodash.extendWith = assignInWith;
          mixin(lodash, lodash);
          lodash.add = add;
          lodash.attempt = attempt;
          lodash.camelCase = camelCase;
          lodash.capitalize = capitalize;
          lodash.ceil = ceil;
          lodash.clamp = clamp;
          lodash.clone = clone;
          lodash.cloneDeep = cloneDeep;
          lodash.cloneDeepWith = cloneDeepWith;
          lodash.cloneWith = cloneWith;
          lodash.conformsTo = conformsTo;
          lodash.deburr = deburr;
          lodash.defaultTo = defaultTo;
          lodash.divide = divide;
          lodash.endsWith = endsWith;
          lodash.eq = eq;
          lodash.escape = escape;
          lodash.escapeRegExp = escapeRegExp;
          lodash.every = every;
          lodash.find = find;
          lodash.findIndex = findIndex;
          lodash.findKey = findKey;
          lodash.findLast = findLast;
          lodash.findLastIndex = findLastIndex;
          lodash.findLastKey = findLastKey;
          lodash.floor = floor;
          lodash.forEach = forEach;
          lodash.forEachRight = forEachRight;
          lodash.forIn = forIn;
          lodash.forInRight = forInRight;
          lodash.forOwn = forOwn;
          lodash.forOwnRight = forOwnRight;
          lodash.get = get;
          lodash.gt = gt;
          lodash.gte = gte;
          lodash.has = has;
          lodash.hasIn = hasIn;
          lodash.head = head;
          lodash.identity = identity;
          lodash.includes = includes;
          lodash.indexOf = indexOf;
          lodash.inRange = inRange;
          lodash.invoke = invoke;
          lodash.isArguments = isArguments;
          lodash.isArray = isArray;
          lodash.isArrayBuffer = isArrayBuffer;
          lodash.isArrayLike = isArrayLike;
          lodash.isArrayLikeObject = isArrayLikeObject;
          lodash.isBoolean = isBoolean;
          lodash.isBuffer = isBuffer;
          lodash.isDate = isDate;
          lodash.isElement = isElement;
          lodash.isEmpty = isEmpty;
          lodash.isEqual = isEqual;
          lodash.isEqualWith = isEqualWith;
          lodash.isError = isError;
          lodash.isFinite = isFinite2;
          lodash.isFunction = isFunction;
          lodash.isInteger = isInteger;
          lodash.isLength = isLength;
          lodash.isMap = isMap;
          lodash.isMatch = isMatch;
          lodash.isMatchWith = isMatchWith;
          lodash.isNaN = isNaN2;
          lodash.isNative = isNative;
          lodash.isNil = isNil;
          lodash.isNull = isNull;
          lodash.isNumber = isNumber;
          lodash.isObject = isObject;
          lodash.isObjectLike = isObjectLike;
          lodash.isPlainObject = isPlainObject;
          lodash.isRegExp = isRegExp;
          lodash.isSafeInteger = isSafeInteger;
          lodash.isSet = isSet;
          lodash.isString = isString;
          lodash.isSymbol = isSymbol;
          lodash.isTypedArray = isTypedArray;
          lodash.isUndefined = isUndefined;
          lodash.isWeakMap = isWeakMap;
          lodash.isWeakSet = isWeakSet;
          lodash.join = join;
          lodash.kebabCase = kebabCase;
          lodash.last = last;
          lodash.lastIndexOf = lastIndexOf;
          lodash.lowerCase = lowerCase;
          lodash.lowerFirst = lowerFirst;
          lodash.lt = lt;
          lodash.lte = lte;
          lodash.max = max;
          lodash.maxBy = maxBy;
          lodash.mean = mean;
          lodash.meanBy = meanBy;
          lodash.min = min;
          lodash.minBy = minBy;
          lodash.stubArray = stubArray;
          lodash.stubFalse = stubFalse;
          lodash.stubObject = stubObject;
          lodash.stubString = stubString;
          lodash.stubTrue = stubTrue;
          lodash.multiply = multiply;
          lodash.nth = nth;
          lodash.noConflict = noConflict;
          lodash.noop = noop;
          lodash.now = now;
          lodash.pad = pad;
          lodash.padEnd = padEnd;
          lodash.padStart = padStart;
          lodash.parseInt = parseInt2;
          lodash.random = random;
          lodash.reduce = reduce;
          lodash.reduceRight = reduceRight;
          lodash.repeat = repeat;
          lodash.replace = replace;
          lodash.result = result;
          lodash.round = round;
          lodash.runInContext = runInContext2;
          lodash.sample = sample;
          lodash.size = size;
          lodash.snakeCase = snakeCase;
          lodash.some = some;
          lodash.sortedIndex = sortedIndex;
          lodash.sortedIndexBy = sortedIndexBy;
          lodash.sortedIndexOf = sortedIndexOf;
          lodash.sortedLastIndex = sortedLastIndex;
          lodash.sortedLastIndexBy = sortedLastIndexBy;
          lodash.sortedLastIndexOf = sortedLastIndexOf;
          lodash.startCase = startCase;
          lodash.startsWith = startsWith;
          lodash.subtract = subtract;
          lodash.sum = sum;
          lodash.sumBy = sumBy;
          lodash.template = template;
          lodash.times = times;
          lodash.toFinite = toFinite;
          lodash.toInteger = toInteger;
          lodash.toLength = toLength;
          lodash.toLower = toLower;
          lodash.toNumber = toNumber;
          lodash.toSafeInteger = toSafeInteger;
          lodash.toString = toString;
          lodash.toUpper = toUpper;
          lodash.trim = trim;
          lodash.trimEnd = trimEnd;
          lodash.trimStart = trimStart;
          lodash.truncate = truncate;
          lodash.unescape = unescape;
          lodash.uniqueId = uniqueId;
          lodash.upperCase = upperCase;
          lodash.upperFirst = upperFirst;
          lodash.each = forEach;
          lodash.eachRight = forEachRight;
          lodash.first = head;
          mixin(lodash, function() {
            var source = {};
            baseForOwn(lodash, function(func, methodName) {
              if (!hasOwnProperty.call(lodash.prototype, methodName)) {
                source[methodName] = func;
              }
            });
            return source;
          }(), { "chain": false });
          lodash.VERSION = VERSION;
          arrayEach(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], function(methodName) {
            lodash[methodName].placeholder = lodash;
          });
          arrayEach(["drop", "take"], function(methodName, index) {
            LazyWrapper.prototype[methodName] = function(n) {
              n = n === undefined2 ? 1 : nativeMax(toInteger(n), 0);
              var result2 = this.__filtered__ && !index ? new LazyWrapper(this) : this.clone();
              if (result2.__filtered__) {
                result2.__takeCount__ = nativeMin(n, result2.__takeCount__);
              } else {
                result2.__views__.push({
                  "size": nativeMin(n, MAX_ARRAY_LENGTH),
                  "type": methodName + (result2.__dir__ < 0 ? "Right" : "")
                });
              }
              return result2;
            };
            LazyWrapper.prototype[methodName + "Right"] = function(n) {
              return this.reverse()[methodName](n).reverse();
            };
          });
          arrayEach(["filter", "map", "takeWhile"], function(methodName, index) {
            var type = index + 1, isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;
            LazyWrapper.prototype[methodName] = function(iteratee2) {
              var result2 = this.clone();
              result2.__iteratees__.push({
                "iteratee": getIteratee(iteratee2, 3),
                "type": type
              });
              result2.__filtered__ = result2.__filtered__ || isFilter;
              return result2;
            };
          });
          arrayEach(["head", "last"], function(methodName, index) {
            var takeName = "take" + (index ? "Right" : "");
            LazyWrapper.prototype[methodName] = function() {
              return this[takeName](1).value()[0];
            };
          });
          arrayEach(["initial", "tail"], function(methodName, index) {
            var dropName = "drop" + (index ? "" : "Right");
            LazyWrapper.prototype[methodName] = function() {
              return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
            };
          });
          LazyWrapper.prototype.compact = function() {
            return this.filter(identity);
          };
          LazyWrapper.prototype.find = function(predicate) {
            return this.filter(predicate).head();
          };
          LazyWrapper.prototype.findLast = function(predicate) {
            return this.reverse().find(predicate);
          };
          LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
            if (typeof path == "function") {
              return new LazyWrapper(this);
            }
            return this.map(function(value) {
              return baseInvoke(value, path, args);
            });
          });
          LazyWrapper.prototype.reject = function(predicate) {
            return this.filter(negate(getIteratee(predicate)));
          };
          LazyWrapper.prototype.slice = function(start, end) {
            start = toInteger(start);
            var result2 = this;
            if (result2.__filtered__ && (start > 0 || end < 0)) {
              return new LazyWrapper(result2);
            }
            if (start < 0) {
              result2 = result2.takeRight(-start);
            } else if (start) {
              result2 = result2.drop(start);
            }
            if (end !== undefined2) {
              end = toInteger(end);
              result2 = end < 0 ? result2.dropRight(-end) : result2.take(end - start);
            }
            return result2;
          };
          LazyWrapper.prototype.takeRightWhile = function(predicate) {
            return this.reverse().takeWhile(predicate).reverse();
          };
          LazyWrapper.prototype.toArray = function() {
            return this.take(MAX_ARRAY_LENGTH);
          };
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName), isTaker = /^(?:head|last)$/.test(methodName), lodashFunc = lodash[isTaker ? "take" + (methodName == "last" ? "Right" : "") : methodName], retUnwrapped = isTaker || /^find/.test(methodName);
            if (!lodashFunc) {
              return;
            }
            lodash.prototype[methodName] = function() {
              var value = this.__wrapped__, args = isTaker ? [1] : arguments, isLazy = value instanceof LazyWrapper, iteratee2 = args[0], useLazy = isLazy || isArray(value);
              var interceptor = function(value2) {
                var result3 = lodashFunc.apply(lodash, arrayPush([value2], args));
                return isTaker && chainAll ? result3[0] : result3;
              };
              if (useLazy && checkIteratee && typeof iteratee2 == "function" && iteratee2.length != 1) {
                isLazy = useLazy = false;
              }
              var chainAll = this.__chain__, isHybrid = !!this.__actions__.length, isUnwrapped = retUnwrapped && !chainAll, onlyLazy = isLazy && !isHybrid;
              if (!retUnwrapped && useLazy) {
                value = onlyLazy ? value : new LazyWrapper(this);
                var result2 = func.apply(value, args);
                result2.__actions__.push({ "func": thru, "args": [interceptor], "thisArg": undefined2 });
                return new LodashWrapper(result2, chainAll);
              }
              if (isUnwrapped && onlyLazy) {
                return func.apply(this, args);
              }
              result2 = this.thru(interceptor);
              return isUnwrapped ? isTaker ? result2.value()[0] : result2.value() : result2;
            };
          });
          arrayEach(["pop", "push", "shift", "sort", "splice", "unshift"], function(methodName) {
            var func = arrayProto[methodName], chainName = /^(?:push|sort|unshift)$/.test(methodName) ? "tap" : "thru", retUnwrapped = /^(?:pop|shift)$/.test(methodName);
            lodash.prototype[methodName] = function() {
              var args = arguments;
              if (retUnwrapped && !this.__chain__) {
                var value = this.value();
                return func.apply(isArray(value) ? value : [], args);
              }
              return this[chainName](function(value2) {
                return func.apply(isArray(value2) ? value2 : [], args);
              });
            };
          });
          baseForOwn(LazyWrapper.prototype, function(func, methodName) {
            var lodashFunc = lodash[methodName];
            if (lodashFunc) {
              var key = lodashFunc.name + "";
              if (!hasOwnProperty.call(realNames, key)) {
                realNames[key] = [];
              }
              realNames[key].push({ "name": methodName, "func": lodashFunc });
            }
          });
          realNames[createHybrid(undefined2, WRAP_BIND_KEY_FLAG).name] = [{
            "name": "wrapper",
            "func": undefined2
          }];
          LazyWrapper.prototype.clone = lazyClone;
          LazyWrapper.prototype.reverse = lazyReverse;
          LazyWrapper.prototype.value = lazyValue;
          lodash.prototype.at = wrapperAt;
          lodash.prototype.chain = wrapperChain;
          lodash.prototype.commit = wrapperCommit;
          lodash.prototype.next = wrapperNext;
          lodash.prototype.plant = wrapperPlant;
          lodash.prototype.reverse = wrapperReverse;
          lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;
          lodash.prototype.first = lodash.prototype.head;
          if (symIterator) {
            lodash.prototype[symIterator] = wrapperToIterator;
          }
          return lodash;
        };
        var _ = runInContext();
        if (typeof define == "function" && typeof define.amd == "object" && define.amd) {
          root._ = _;
          define(function() {
            return _;
          });
        } else if (freeModule) {
          (freeModule.exports = _)._ = _;
          freeExports._ = _;
        } else {
          root._ = _;
        }
      }).call(exports);
    }
  });

  // node_modules/@metamask/browser-passworder/dist/index.js
  var require_dist2 = __commonJS({
    "node_modules/@metamask/browser-passworder/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.generateSalt = exports.serializeBufferForStorage = exports.serializeBufferFromStorage = exports.keyFromPassword = exports.exportKey = exports.importKey = exports.decryptWithKey = exports.decryptWithDetail = exports.decrypt = exports.encryptWithKey = exports.encryptWithDetail = exports.encrypt = void 0;
      var EXPORT_FORMAT = "jwk";
      var DERIVED_KEY_FORMAT = "AES-GCM";
      var STRING_ENCODING = "utf-8";
      async function encrypt2(password, dataObj, key, salt = generateSalt()) {
        const cryptoKey = key || await keyFromPassword(password, salt);
        const payload = await encryptWithKey(cryptoKey, dataObj);
        payload.salt = salt;
        return JSON.stringify(payload);
      }
      exports.encrypt = encrypt2;
      async function encryptWithDetail(password, dataObj, salt = generateSalt()) {
        const key = await keyFromPassword(password, salt, true);
        const exportedKeyString = await exportKey(key);
        const vault = await encrypt2(password, dataObj, key, salt);
        return {
          vault,
          exportedKeyString
        };
      }
      exports.encryptWithDetail = encryptWithDetail;
      async function encryptWithKey(key, dataObj) {
        const data = JSON.stringify(dataObj);
        const dataBuffer = Buffer.from(data, STRING_ENCODING);
        const vector = global.crypto.getRandomValues(new Uint8Array(16));
        const buf = await global.crypto.subtle.encrypt({
          name: DERIVED_KEY_FORMAT,
          iv: vector
        }, key, dataBuffer);
        const buffer = new Uint8Array(buf);
        const vectorStr = Buffer.from(vector).toString("base64");
        const vaultStr = Buffer.from(buffer).toString("base64");
        return {
          data: vaultStr,
          iv: vectorStr
        };
      }
      exports.encryptWithKey = encryptWithKey;
      async function decrypt2(password, text, key) {
        const payload = JSON.parse(text);
        const { salt } = payload;
        const cryptoKey = key || await keyFromPassword(password, salt);
        const result = await decryptWithKey(cryptoKey, payload);
        return result;
      }
      exports.decrypt = decrypt2;
      async function decryptWithDetail(password, text) {
        const payload = JSON.parse(text);
        const { salt } = payload;
        const key = await keyFromPassword(password, salt, true);
        const exportedKeyString = await exportKey(key);
        const vault = await decrypt2(password, text, key);
        return {
          exportedKeyString,
          vault,
          salt
        };
      }
      exports.decryptWithDetail = decryptWithDetail;
      async function decryptWithKey(key, payload) {
        const encryptedData = Buffer.from(payload.data, "base64");
        const vector = Buffer.from(payload.iv, "base64");
        let decryptedObj;
        try {
          const result = await crypto.subtle.decrypt({ name: DERIVED_KEY_FORMAT, iv: vector }, key, encryptedData);
          const decryptedData = new Uint8Array(result);
          const decryptedStr = Buffer.from(decryptedData).toString(STRING_ENCODING);
          decryptedObj = JSON.parse(decryptedStr);
        } catch (e) {
          throw new Error("Incorrect password");
        }
        return decryptedObj;
      }
      exports.decryptWithKey = decryptWithKey;
      async function importKey(keyString) {
        const key = await window.crypto.subtle.importKey(EXPORT_FORMAT, JSON.parse(keyString), DERIVED_KEY_FORMAT, true, ["encrypt", "decrypt"]);
        return key;
      }
      exports.importKey = importKey;
      async function exportKey(key) {
        const exportedKey = await window.crypto.subtle.exportKey(EXPORT_FORMAT, key);
        return JSON.stringify(exportedKey);
      }
      exports.exportKey = exportKey;
      async function keyFromPassword(password, salt, exportable = false) {
        const passBuffer = Buffer.from(password, STRING_ENCODING);
        const saltBuffer = Buffer.from(salt, "base64");
        const key = await global.crypto.subtle.importKey("raw", passBuffer, { name: "PBKDF2" }, false, ["deriveBits", "deriveKey"]);
        const derivedKey = await global.crypto.subtle.deriveKey({
          name: "PBKDF2",
          salt: saltBuffer,
          iterations: 1e4,
          hash: "SHA-256"
        }, key, { name: DERIVED_KEY_FORMAT, length: 256 }, exportable, ["encrypt", "decrypt"]);
        return derivedKey;
      }
      exports.keyFromPassword = keyFromPassword;
      function serializeBufferFromStorage(str) {
        const stripStr = str.slice(0, 2) === "0x" ? str.slice(2) : str;
        const buf = new Uint8Array(stripStr.length / 2);
        for (let i = 0; i < stripStr.length; i += 2) {
          const seg = stripStr.substr(i, 2);
          buf[i / 2] = parseInt(seg, 16);
        }
        return buf;
      }
      exports.serializeBufferFromStorage = serializeBufferFromStorage;
      function serializeBufferForStorage(buffer) {
        let result = "0x";
        buffer.forEach((value) => {
          result += unprefixedHex(value);
        });
        return result;
      }
      exports.serializeBufferForStorage = serializeBufferForStorage;
      function unprefixedHex(num) {
        let hex = num.toString(16);
        while (hex.length < 2) {
          hex = `0${hex}`;
        }
        return hex;
      }
      function generateSalt(byteCount = 32) {
        const view = new Uint8Array(byteCount);
        global.crypto.getRandomValues(view);
        const b64encoded = btoa(String.fromCharCode.apply(null, view));
        return b64encoded;
      }
      exports.generateSalt = generateSalt;
    }
  });

  // node_modules/react/cjs/react.development.js
  var require_react_development = __commonJS({
    "node_modules/react/cjs/react.development.js"(exports, module) {
      "use strict";
      if (true) {
        (function() {
          "use strict";
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
          }
          var ReactVersion = "18.2.0";
          var REACT_ELEMENT_TYPE = Symbol.for("react.element");
          var REACT_PORTAL_TYPE = Symbol.for("react.portal");
          var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
          var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
          var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
          var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
          var REACT_CONTEXT_TYPE = Symbol.for("react.context");
          var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
          var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
          var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
          var REACT_MEMO_TYPE = Symbol.for("react.memo");
          var REACT_LAZY_TYPE = Symbol.for("react.lazy");
          var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
          var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
          var FAUX_ITERATOR_SYMBOL = "@@iterator";
          function getIteratorFn(maybeIterable) {
            if (maybeIterable === null || typeof maybeIterable !== "object") {
              return null;
            }
            var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
            if (typeof maybeIterator === "function") {
              return maybeIterator;
            }
            return null;
          }
          var ReactCurrentDispatcher = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactCurrentBatchConfig = {
            transition: null
          };
          var ReactCurrentActQueue = {
            current: null,
            // Used to reproduce behavior of `batchedUpdates` in legacy mode.
            isBatchingLegacy: false,
            didScheduleLegacyUpdate: false
          };
          var ReactCurrentOwner = {
            /**
             * @internal
             * @type {ReactComponent}
             */
            current: null
          };
          var ReactDebugCurrentFrame = {};
          var currentExtraStackFrame = null;
          function setExtraStackFrame(stack) {
            {
              currentExtraStackFrame = stack;
            }
          }
          {
            ReactDebugCurrentFrame.setExtraStackFrame = function(stack) {
              {
                currentExtraStackFrame = stack;
              }
            };
            ReactDebugCurrentFrame.getCurrentStack = null;
            ReactDebugCurrentFrame.getStackAddendum = function() {
              var stack = "";
              if (currentExtraStackFrame) {
                stack += currentExtraStackFrame;
              }
              var impl = ReactDebugCurrentFrame.getCurrentStack;
              if (impl) {
                stack += impl() || "";
              }
              return stack;
            };
          }
          var enableScopeAPI = false;
          var enableCacheElement = false;
          var enableTransitionTracing = false;
          var enableLegacyHidden = false;
          var enableDebugTracing = false;
          var ReactSharedInternals = {
            ReactCurrentDispatcher,
            ReactCurrentBatchConfig,
            ReactCurrentOwner
          };
          {
            ReactSharedInternals.ReactDebugCurrentFrame = ReactDebugCurrentFrame;
            ReactSharedInternals.ReactCurrentActQueue = ReactCurrentActQueue;
          }
          function warn(format) {
            {
              {
                for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                  args[_key - 1] = arguments[_key];
                }
                printWarning("warn", format, args);
              }
            }
          }
          function error(format) {
            {
              {
                for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                  args[_key2 - 1] = arguments[_key2];
                }
                printWarning("error", format, args);
              }
            }
          }
          function printWarning(level, format, args) {
            {
              var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
              var stack = ReactDebugCurrentFrame2.getStackAddendum();
              if (stack !== "") {
                format += "%s";
                args = args.concat([stack]);
              }
              var argsWithFormat = args.map(function(item) {
                return String(item);
              });
              argsWithFormat.unshift("Warning: " + format);
              Function.prototype.apply.call(console[level], console, argsWithFormat);
            }
          }
          var didWarnStateUpdateForUnmountedComponent = {};
          function warnNoop(publicInstance, callerName) {
            {
              var _constructor = publicInstance.constructor;
              var componentName = _constructor && (_constructor.displayName || _constructor.name) || "ReactClass";
              var warningKey = componentName + "." + callerName;
              if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
                return;
              }
              error("Can't call %s on a component that is not yet mounted. This is a no-op, but it might indicate a bug in your application. Instead, assign to `this.state` directly or define a `state = {};` class property with the desired state in the %s component.", callerName, componentName);
              didWarnStateUpdateForUnmountedComponent[warningKey] = true;
            }
          }
          var ReactNoopUpdateQueue = {
            /**
             * Checks whether or not this composite component is mounted.
             * @param {ReactClass} publicInstance The instance we want to test.
             * @return {boolean} True if mounted, false otherwise.
             * @protected
             * @final
             */
            isMounted: function(publicInstance) {
              return false;
            },
            /**
             * Forces an update. This should only be invoked when it is known with
             * certainty that we are **not** in a DOM transaction.
             *
             * You may want to call this when you know that some deeper aspect of the
             * component's state has changed but `setState` was not called.
             *
             * This will not invoke `shouldComponentUpdate`, but it will invoke
             * `componentWillUpdate` and `componentDidUpdate`.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueForceUpdate: function(publicInstance, callback, callerName) {
              warnNoop(publicInstance, "forceUpdate");
            },
            /**
             * Replaces all of the state. Always use this or `setState` to mutate state.
             * You should treat `this.state` as immutable.
             *
             * There is no guarantee that `this.state` will be immediately updated, so
             * accessing `this.state` after calling this method may return the old value.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} completeState Next state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} callerName name of the calling function in the public API.
             * @internal
             */
            enqueueReplaceState: function(publicInstance, completeState, callback, callerName) {
              warnNoop(publicInstance, "replaceState");
            },
            /**
             * Sets a subset of the state. This only exists because _pendingState is
             * internal. This provides a merging strategy that is not available to deep
             * properties which is confusing. TODO: Expose pendingState or don't use it
             * during the merge.
             *
             * @param {ReactClass} publicInstance The instance that should rerender.
             * @param {object} partialState Next partial state to be merged with state.
             * @param {?function} callback Called after component is updated.
             * @param {?string} Name of the calling function in the public API.
             * @internal
             */
            enqueueSetState: function(publicInstance, partialState, callback, callerName) {
              warnNoop(publicInstance, "setState");
            }
          };
          var assign = Object.assign;
          var emptyObject = {};
          {
            Object.freeze(emptyObject);
          }
          function Component(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          Component.prototype.isReactComponent = {};
          Component.prototype.setState = function(partialState, callback) {
            if (typeof partialState !== "object" && typeof partialState !== "function" && partialState != null) {
              throw new Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");
            }
            this.updater.enqueueSetState(this, partialState, callback, "setState");
          };
          Component.prototype.forceUpdate = function(callback) {
            this.updater.enqueueForceUpdate(this, callback, "forceUpdate");
          };
          {
            var deprecatedAPIs = {
              isMounted: ["isMounted", "Instead, make sure to clean up subscriptions and pending requests in componentWillUnmount to prevent memory leaks."],
              replaceState: ["replaceState", "Refactor your code to use setState instead (see https://github.com/facebook/react/issues/3236)."]
            };
            var defineDeprecationWarning = function(methodName, info) {
              Object.defineProperty(Component.prototype, methodName, {
                get: function() {
                  warn("%s(...) is deprecated in plain JavaScript React classes. %s", info[0], info[1]);
                  return void 0;
                }
              });
            };
            for (var fnName in deprecatedAPIs) {
              if (deprecatedAPIs.hasOwnProperty(fnName)) {
                defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
              }
            }
          }
          function ComponentDummy() {
          }
          ComponentDummy.prototype = Component.prototype;
          function PureComponent(props, context, updater) {
            this.props = props;
            this.context = context;
            this.refs = emptyObject;
            this.updater = updater || ReactNoopUpdateQueue;
          }
          var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
          pureComponentPrototype.constructor = PureComponent;
          assign(pureComponentPrototype, Component.prototype);
          pureComponentPrototype.isPureReactComponent = true;
          function createRef() {
            var refObject = {
              current: null
            };
            {
              Object.seal(refObject);
            }
            return refObject;
          }
          var isArrayImpl = Array.isArray;
          function isArray(a) {
            return isArrayImpl(a);
          }
          function typeName(value) {
            {
              var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
              var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
              return type;
            }
          }
          function willCoercionThrow(value) {
            {
              try {
                testStringCoercion(value);
                return false;
              } catch (e) {
                return true;
              }
            }
          }
          function testStringCoercion(value) {
            return "" + value;
          }
          function checkKeyStringCoercion(value) {
            {
              if (willCoercionThrow(value)) {
                error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
                return testStringCoercion(value);
              }
            }
          }
          function getWrappedName(outerType, innerType, wrapperName) {
            var displayName = outerType.displayName;
            if (displayName) {
              return displayName;
            }
            var functionName = innerType.displayName || innerType.name || "";
            return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
          }
          function getContextName(type) {
            return type.displayName || "Context";
          }
          function getComponentNameFromType(type) {
            if (type == null) {
              return null;
            }
            {
              if (typeof type.tag === "number") {
                error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
              }
            }
            if (typeof type === "function") {
              return type.displayName || type.name || null;
            }
            if (typeof type === "string") {
              return type;
            }
            switch (type) {
              case REACT_FRAGMENT_TYPE:
                return "Fragment";
              case REACT_PORTAL_TYPE:
                return "Portal";
              case REACT_PROFILER_TYPE:
                return "Profiler";
              case REACT_STRICT_MODE_TYPE:
                return "StrictMode";
              case REACT_SUSPENSE_TYPE:
                return "Suspense";
              case REACT_SUSPENSE_LIST_TYPE:
                return "SuspenseList";
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_CONTEXT_TYPE:
                  var context = type;
                  return getContextName(context) + ".Consumer";
                case REACT_PROVIDER_TYPE:
                  var provider = type;
                  return getContextName(provider._context) + ".Provider";
                case REACT_FORWARD_REF_TYPE:
                  return getWrappedName(type, type.render, "ForwardRef");
                case REACT_MEMO_TYPE:
                  var outerName = type.displayName || null;
                  if (outerName !== null) {
                    return outerName;
                  }
                  return getComponentNameFromType(type.type) || "Memo";
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return getComponentNameFromType(init(payload));
                  } catch (x) {
                    return null;
                  }
                }
              }
            }
            return null;
          }
          var hasOwnProperty = Object.prototype.hasOwnProperty;
          var RESERVED_PROPS = {
            key: true,
            ref: true,
            __self: true,
            __source: true
          };
          var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;
          {
            didWarnAboutStringRefs = {};
          }
          function hasValidRef(config) {
            {
              if (hasOwnProperty.call(config, "ref")) {
                var getter = Object.getOwnPropertyDescriptor(config, "ref").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.ref !== void 0;
          }
          function hasValidKey(config) {
            {
              if (hasOwnProperty.call(config, "key")) {
                var getter = Object.getOwnPropertyDescriptor(config, "key").get;
                if (getter && getter.isReactWarning) {
                  return false;
                }
              }
            }
            return config.key !== void 0;
          }
          function defineKeyPropWarningGetter(props, displayName) {
            var warnAboutAccessingKey = function() {
              {
                if (!specialPropKeyWarningShown) {
                  specialPropKeyWarningShown = true;
                  error("%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingKey.isReactWarning = true;
            Object.defineProperty(props, "key", {
              get: warnAboutAccessingKey,
              configurable: true
            });
          }
          function defineRefPropWarningGetter(props, displayName) {
            var warnAboutAccessingRef = function() {
              {
                if (!specialPropRefWarningShown) {
                  specialPropRefWarningShown = true;
                  error("%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)", displayName);
                }
              }
            };
            warnAboutAccessingRef.isReactWarning = true;
            Object.defineProperty(props, "ref", {
              get: warnAboutAccessingRef,
              configurable: true
            });
          }
          function warnIfStringRefCannotBeAutoConverted(config) {
            {
              if (typeof config.ref === "string" && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
                var componentName = getComponentNameFromType(ReactCurrentOwner.current.type);
                if (!didWarnAboutStringRefs[componentName]) {
                  error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, config.ref);
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
          }
          var ReactElement = function(type, key, ref, self2, source, owner, props) {
            var element = {
              // This tag allows us to uniquely identify this as a React Element
              $$typeof: REACT_ELEMENT_TYPE,
              // Built-in properties that belong on the element
              type,
              key,
              ref,
              props,
              // Record the component responsible for creating this element.
              _owner: owner
            };
            {
              element._store = {};
              Object.defineProperty(element._store, "validated", {
                configurable: false,
                enumerable: false,
                writable: true,
                value: false
              });
              Object.defineProperty(element, "_self", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: self2
              });
              Object.defineProperty(element, "_source", {
                configurable: false,
                enumerable: false,
                writable: false,
                value: source
              });
              if (Object.freeze) {
                Object.freeze(element.props);
                Object.freeze(element);
              }
            }
            return element;
          };
          function createElement(type, config, children) {
            var propName;
            var props = {};
            var key = null;
            var ref = null;
            var self2 = null;
            var source = null;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                {
                  warnIfStringRefCannotBeAutoConverted(config);
                }
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              self2 = config.__self === void 0 ? null : config.__self;
              source = config.__source === void 0 ? null : config.__source;
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  props[propName] = config[propName];
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              {
                if (Object.freeze) {
                  Object.freeze(childArray);
                }
              }
              props.children = childArray;
            }
            if (type && type.defaultProps) {
              var defaultProps = type.defaultProps;
              for (propName in defaultProps) {
                if (props[propName] === void 0) {
                  props[propName] = defaultProps[propName];
                }
              }
            }
            {
              if (key || ref) {
                var displayName = typeof type === "function" ? type.displayName || type.name || "Unknown" : type;
                if (key) {
                  defineKeyPropWarningGetter(props, displayName);
                }
                if (ref) {
                  defineRefPropWarningGetter(props, displayName);
                }
              }
            }
            return ReactElement(type, key, ref, self2, source, ReactCurrentOwner.current, props);
          }
          function cloneAndReplaceKey(oldElement, newKey) {
            var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
            return newElement;
          }
          function cloneElement(element, config, children) {
            if (element === null || element === void 0) {
              throw new Error("React.cloneElement(...): The argument must be a React element, but you passed " + element + ".");
            }
            var propName;
            var props = assign({}, element.props);
            var key = element.key;
            var ref = element.ref;
            var self2 = element._self;
            var source = element._source;
            var owner = element._owner;
            if (config != null) {
              if (hasValidRef(config)) {
                ref = config.ref;
                owner = ReactCurrentOwner.current;
              }
              if (hasValidKey(config)) {
                {
                  checkKeyStringCoercion(config.key);
                }
                key = "" + config.key;
              }
              var defaultProps;
              if (element.type && element.type.defaultProps) {
                defaultProps = element.type.defaultProps;
              }
              for (propName in config) {
                if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
                  if (config[propName] === void 0 && defaultProps !== void 0) {
                    props[propName] = defaultProps[propName];
                  } else {
                    props[propName] = config[propName];
                  }
                }
              }
            }
            var childrenLength = arguments.length - 2;
            if (childrenLength === 1) {
              props.children = children;
            } else if (childrenLength > 1) {
              var childArray = Array(childrenLength);
              for (var i = 0; i < childrenLength; i++) {
                childArray[i] = arguments[i + 2];
              }
              props.children = childArray;
            }
            return ReactElement(element.type, key, ref, self2, source, owner, props);
          }
          function isValidElement(object) {
            return typeof object === "object" && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
          }
          var SEPARATOR = ".";
          var SUBSEPARATOR = ":";
          function escape(key) {
            var escapeRegex = /[=:]/g;
            var escaperLookup = {
              "=": "=0",
              ":": "=2"
            };
            var escapedString = key.replace(escapeRegex, function(match) {
              return escaperLookup[match];
            });
            return "$" + escapedString;
          }
          var didWarnAboutMaps = false;
          var userProvidedKeyEscapeRegex = /\/+/g;
          function escapeUserProvidedKey(text) {
            return text.replace(userProvidedKeyEscapeRegex, "$&/");
          }
          function getElementKey(element, index) {
            if (typeof element === "object" && element !== null && element.key != null) {
              {
                checkKeyStringCoercion(element.key);
              }
              return escape("" + element.key);
            }
            return index.toString(36);
          }
          function mapIntoArray(children, array, escapedPrefix, nameSoFar, callback) {
            var type = typeof children;
            if (type === "undefined" || type === "boolean") {
              children = null;
            }
            var invokeCallback = false;
            if (children === null) {
              invokeCallback = true;
            } else {
              switch (type) {
                case "string":
                case "number":
                  invokeCallback = true;
                  break;
                case "object":
                  switch (children.$$typeof) {
                    case REACT_ELEMENT_TYPE:
                    case REACT_PORTAL_TYPE:
                      invokeCallback = true;
                  }
              }
            }
            if (invokeCallback) {
              var _child = children;
              var mappedChild = callback(_child);
              var childKey = nameSoFar === "" ? SEPARATOR + getElementKey(_child, 0) : nameSoFar;
              if (isArray(mappedChild)) {
                var escapedChildKey = "";
                if (childKey != null) {
                  escapedChildKey = escapeUserProvidedKey(childKey) + "/";
                }
                mapIntoArray(mappedChild, array, escapedChildKey, "", function(c) {
                  return c;
                });
              } else if (mappedChild != null) {
                if (isValidElement(mappedChild)) {
                  {
                    if (mappedChild.key && (!_child || _child.key !== mappedChild.key)) {
                      checkKeyStringCoercion(mappedChild.key);
                    }
                  }
                  mappedChild = cloneAndReplaceKey(
                    mappedChild,
                    // Keep both the (mapped) and old keys if they differ, just as
                    // traverseAllChildren used to do for objects as children
                    escapedPrefix + // $FlowFixMe Flow incorrectly thinks React.Portal doesn't have a key
                    (mappedChild.key && (!_child || _child.key !== mappedChild.key) ? (
                      // $FlowFixMe Flow incorrectly thinks existing element's key can be a number
                      // eslint-disable-next-line react-internal/safe-string-coercion
                      escapeUserProvidedKey("" + mappedChild.key) + "/"
                    ) : "") + childKey
                  );
                }
                array.push(mappedChild);
              }
              return 1;
            }
            var child;
            var nextName;
            var subtreeCount = 0;
            var nextNamePrefix = nameSoFar === "" ? SEPARATOR : nameSoFar + SUBSEPARATOR;
            if (isArray(children)) {
              for (var i = 0; i < children.length; i++) {
                child = children[i];
                nextName = nextNamePrefix + getElementKey(child, i);
                subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
              }
            } else {
              var iteratorFn = getIteratorFn(children);
              if (typeof iteratorFn === "function") {
                var iterableChildren = children;
                {
                  if (iteratorFn === iterableChildren.entries) {
                    if (!didWarnAboutMaps) {
                      warn("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                    }
                    didWarnAboutMaps = true;
                  }
                }
                var iterator = iteratorFn.call(iterableChildren);
                var step;
                var ii = 0;
                while (!(step = iterator.next()).done) {
                  child = step.value;
                  nextName = nextNamePrefix + getElementKey(child, ii++);
                  subtreeCount += mapIntoArray(child, array, escapedPrefix, nextName, callback);
                }
              } else if (type === "object") {
                var childrenString = String(children);
                throw new Error("Objects are not valid as a React child (found: " + (childrenString === "[object Object]" ? "object with keys {" + Object.keys(children).join(", ") + "}" : childrenString) + "). If you meant to render a collection of children, use an array instead.");
              }
            }
            return subtreeCount;
          }
          function mapChildren(children, func, context) {
            if (children == null) {
              return children;
            }
            var result = [];
            var count = 0;
            mapIntoArray(children, result, "", "", function(child) {
              return func.call(context, child, count++);
            });
            return result;
          }
          function countChildren(children) {
            var n = 0;
            mapChildren(children, function() {
              n++;
            });
            return n;
          }
          function forEachChildren(children, forEachFunc, forEachContext) {
            mapChildren(children, function() {
              forEachFunc.apply(this, arguments);
            }, forEachContext);
          }
          function toArray(children) {
            return mapChildren(children, function(child) {
              return child;
            }) || [];
          }
          function onlyChild(children) {
            if (!isValidElement(children)) {
              throw new Error("React.Children.only expected to receive a single React element child.");
            }
            return children;
          }
          function createContext(defaultValue) {
            var context = {
              $$typeof: REACT_CONTEXT_TYPE,
              // As a workaround to support multiple concurrent renderers, we categorize
              // some renderers as primary and others as secondary. We only expect
              // there to be two concurrent renderers at most: React Native (primary) and
              // Fabric (secondary); React DOM (primary) and React ART (secondary).
              // Secondary renderers store their context values on separate fields.
              _currentValue: defaultValue,
              _currentValue2: defaultValue,
              // Used to track how many concurrent renderers this context currently
              // supports within in a single renderer. Such as parallel server rendering.
              _threadCount: 0,
              // These are circular
              Provider: null,
              Consumer: null,
              // Add these to use same hidden class in VM as ServerContext
              _defaultValue: null,
              _globalName: null
            };
            context.Provider = {
              $$typeof: REACT_PROVIDER_TYPE,
              _context: context
            };
            var hasWarnedAboutUsingNestedContextConsumers = false;
            var hasWarnedAboutUsingConsumerProvider = false;
            var hasWarnedAboutDisplayNameOnConsumer = false;
            {
              var Consumer = {
                $$typeof: REACT_CONTEXT_TYPE,
                _context: context
              };
              Object.defineProperties(Consumer, {
                Provider: {
                  get: function() {
                    if (!hasWarnedAboutUsingConsumerProvider) {
                      hasWarnedAboutUsingConsumerProvider = true;
                      error("Rendering <Context.Consumer.Provider> is not supported and will be removed in a future major release. Did you mean to render <Context.Provider> instead?");
                    }
                    return context.Provider;
                  },
                  set: function(_Provider) {
                    context.Provider = _Provider;
                  }
                },
                _currentValue: {
                  get: function() {
                    return context._currentValue;
                  },
                  set: function(_currentValue) {
                    context._currentValue = _currentValue;
                  }
                },
                _currentValue2: {
                  get: function() {
                    return context._currentValue2;
                  },
                  set: function(_currentValue2) {
                    context._currentValue2 = _currentValue2;
                  }
                },
                _threadCount: {
                  get: function() {
                    return context._threadCount;
                  },
                  set: function(_threadCount) {
                    context._threadCount = _threadCount;
                  }
                },
                Consumer: {
                  get: function() {
                    if (!hasWarnedAboutUsingNestedContextConsumers) {
                      hasWarnedAboutUsingNestedContextConsumers = true;
                      error("Rendering <Context.Consumer.Consumer> is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                    }
                    return context.Consumer;
                  }
                },
                displayName: {
                  get: function() {
                    return context.displayName;
                  },
                  set: function(displayName) {
                    if (!hasWarnedAboutDisplayNameOnConsumer) {
                      warn("Setting `displayName` on Context.Consumer has no effect. You should set it directly on the context with Context.displayName = '%s'.", displayName);
                      hasWarnedAboutDisplayNameOnConsumer = true;
                    }
                  }
                }
              });
              context.Consumer = Consumer;
            }
            {
              context._currentRenderer = null;
              context._currentRenderer2 = null;
            }
            return context;
          }
          var Uninitialized = -1;
          var Pending = 0;
          var Resolved = 1;
          var Rejected = 2;
          function lazyInitializer(payload) {
            if (payload._status === Uninitialized) {
              var ctor = payload._result;
              var thenable = ctor();
              thenable.then(function(moduleObject2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var resolved = payload;
                  resolved._status = Resolved;
                  resolved._result = moduleObject2;
                }
              }, function(error2) {
                if (payload._status === Pending || payload._status === Uninitialized) {
                  var rejected = payload;
                  rejected._status = Rejected;
                  rejected._result = error2;
                }
              });
              if (payload._status === Uninitialized) {
                var pending = payload;
                pending._status = Pending;
                pending._result = thenable;
              }
            }
            if (payload._status === Resolved) {
              var moduleObject = payload._result;
              {
                if (moduleObject === void 0) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))\n\nDid you accidentally put curly braces around the import?", moduleObject);
                }
              }
              {
                if (!("default" in moduleObject)) {
                  error("lazy: Expected the result of a dynamic import() call. Instead received: %s\n\nYour code should look like: \n  const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
                }
              }
              return moduleObject.default;
            } else {
              throw payload._result;
            }
          }
          function lazy(ctor) {
            var payload = {
              // We use these fields to store the result.
              _status: Uninitialized,
              _result: ctor
            };
            var lazyType = {
              $$typeof: REACT_LAZY_TYPE,
              _payload: payload,
              _init: lazyInitializer
            };
            {
              var defaultProps;
              var propTypes;
              Object.defineProperties(lazyType, {
                defaultProps: {
                  configurable: true,
                  get: function() {
                    return defaultProps;
                  },
                  set: function(newDefaultProps) {
                    error("React.lazy(...): It is not supported to assign `defaultProps` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    defaultProps = newDefaultProps;
                    Object.defineProperty(lazyType, "defaultProps", {
                      enumerable: true
                    });
                  }
                },
                propTypes: {
                  configurable: true,
                  get: function() {
                    return propTypes;
                  },
                  set: function(newPropTypes) {
                    error("React.lazy(...): It is not supported to assign `propTypes` to a lazy component import. Either specify them where the component is defined, or create a wrapping component around it.");
                    propTypes = newPropTypes;
                    Object.defineProperty(lazyType, "propTypes", {
                      enumerable: true
                    });
                  }
                }
              });
            }
            return lazyType;
          }
          function forwardRef(render) {
            {
              if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
                error("forwardRef requires a render function but received a `memo` component. Instead of forwardRef(memo(...)), use memo(forwardRef(...)).");
              } else if (typeof render !== "function") {
                error("forwardRef requires a render function but was given %s.", render === null ? "null" : typeof render);
              } else {
                if (render.length !== 0 && render.length !== 2) {
                  error("forwardRef render functions accept exactly two parameters: props and ref. %s", render.length === 1 ? "Did you forget to use the ref parameter?" : "Any additional parameter will be undefined.");
                }
              }
              if (render != null) {
                if (render.defaultProps != null || render.propTypes != null) {
                  error("forwardRef render functions do not support propTypes or defaultProps. Did you accidentally pass a React component?");
                }
              }
            }
            var elementType = {
              $$typeof: REACT_FORWARD_REF_TYPE,
              render
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!render.name && !render.displayName) {
                    render.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          var REACT_MODULE_REFERENCE;
          {
            REACT_MODULE_REFERENCE = Symbol.for("react.module.reference");
          }
          function isValidElementType(type) {
            if (typeof type === "string" || typeof type === "function") {
              return true;
            }
            if (type === REACT_FRAGMENT_TYPE || type === REACT_PROFILER_TYPE || enableDebugTracing || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || enableLegacyHidden || type === REACT_OFFSCREEN_TYPE || enableScopeAPI || enableCacheElement || enableTransitionTracing) {
              return true;
            }
            if (typeof type === "object" && type !== null) {
              if (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || // This needs to include all possible module reference object
              // types supported by any Flight configuration anywhere since
              // we don't know which Flight build this will end up being used
              // with.
              type.$$typeof === REACT_MODULE_REFERENCE || type.getModuleId !== void 0) {
                return true;
              }
            }
            return false;
          }
          function memo(type, compare) {
            {
              if (!isValidElementType(type)) {
                error("memo: The first argument must be a component. Instead received: %s", type === null ? "null" : typeof type);
              }
            }
            var elementType = {
              $$typeof: REACT_MEMO_TYPE,
              type,
              compare: compare === void 0 ? null : compare
            };
            {
              var ownName;
              Object.defineProperty(elementType, "displayName", {
                enumerable: false,
                configurable: true,
                get: function() {
                  return ownName;
                },
                set: function(name) {
                  ownName = name;
                  if (!type.name && !type.displayName) {
                    type.displayName = name;
                  }
                }
              });
            }
            return elementType;
          }
          function resolveDispatcher() {
            var dispatcher = ReactCurrentDispatcher.current;
            {
              if (dispatcher === null) {
                error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
              }
            }
            return dispatcher;
          }
          function useContext(Context) {
            var dispatcher = resolveDispatcher();
            {
              if (Context._context !== void 0) {
                var realContext = Context._context;
                if (realContext.Consumer === Context) {
                  error("Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be removed in a future major release. Did you mean to call useContext(Context) instead?");
                } else if (realContext.Provider === Context) {
                  error("Calling useContext(Context.Provider) is not supported. Did you mean to call useContext(Context) instead?");
                }
              }
            }
            return dispatcher.useContext(Context);
          }
          function useState2(initialState) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useState(initialState);
          }
          function useReducer(reducer, initialArg, init) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useReducer(reducer, initialArg, init);
          }
          function useRef(initialValue) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useRef(initialValue);
          }
          function useEffect2(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useEffect(create, deps);
          }
          function useInsertionEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useInsertionEffect(create, deps);
          }
          function useLayoutEffect(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useLayoutEffect(create, deps);
          }
          function useCallback2(callback, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useCallback(callback, deps);
          }
          function useMemo(create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useMemo(create, deps);
          }
          function useImperativeHandle(ref, create, deps) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useImperativeHandle(ref, create, deps);
          }
          function useDebugValue(value, formatterFn) {
            {
              var dispatcher = resolveDispatcher();
              return dispatcher.useDebugValue(value, formatterFn);
            }
          }
          function useTransition() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useTransition();
          }
          function useDeferredValue(value) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useDeferredValue(value);
          }
          function useId() {
            var dispatcher = resolveDispatcher();
            return dispatcher.useId();
          }
          function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
            var dispatcher = resolveDispatcher();
            return dispatcher.useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
          }
          var disabledDepth = 0;
          var prevLog;
          var prevInfo;
          var prevWarn;
          var prevError;
          var prevGroup;
          var prevGroupCollapsed;
          var prevGroupEnd;
          function disabledLog() {
          }
          disabledLog.__reactDisabledLog = true;
          function disableLogs() {
            {
              if (disabledDepth === 0) {
                prevLog = console.log;
                prevInfo = console.info;
                prevWarn = console.warn;
                prevError = console.error;
                prevGroup = console.group;
                prevGroupCollapsed = console.groupCollapsed;
                prevGroupEnd = console.groupEnd;
                var props = {
                  configurable: true,
                  enumerable: true,
                  value: disabledLog,
                  writable: true
                };
                Object.defineProperties(console, {
                  info: props,
                  log: props,
                  warn: props,
                  error: props,
                  group: props,
                  groupCollapsed: props,
                  groupEnd: props
                });
              }
              disabledDepth++;
            }
          }
          function reenableLogs() {
            {
              disabledDepth--;
              if (disabledDepth === 0) {
                var props = {
                  configurable: true,
                  enumerable: true,
                  writable: true
                };
                Object.defineProperties(console, {
                  log: assign({}, props, {
                    value: prevLog
                  }),
                  info: assign({}, props, {
                    value: prevInfo
                  }),
                  warn: assign({}, props, {
                    value: prevWarn
                  }),
                  error: assign({}, props, {
                    value: prevError
                  }),
                  group: assign({}, props, {
                    value: prevGroup
                  }),
                  groupCollapsed: assign({}, props, {
                    value: prevGroupCollapsed
                  }),
                  groupEnd: assign({}, props, {
                    value: prevGroupEnd
                  })
                });
              }
              if (disabledDepth < 0) {
                error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
              }
            }
          }
          var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher;
          var prefix;
          function describeBuiltInComponentFrame(name, source, ownerFn) {
            {
              if (prefix === void 0) {
                try {
                  throw Error();
                } catch (x) {
                  var match = x.stack.trim().match(/\n( *(at )?)/);
                  prefix = match && match[1] || "";
                }
              }
              return "\n" + prefix + name;
            }
          }
          var reentry = false;
          var componentFrameCache;
          {
            var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
            componentFrameCache = new PossiblyWeakMap();
          }
          function describeNativeComponentFrame(fn, construct) {
            if (!fn || reentry) {
              return "";
            }
            {
              var frame = componentFrameCache.get(fn);
              if (frame !== void 0) {
                return frame;
              }
            }
            var control;
            reentry = true;
            var previousPrepareStackTrace = Error.prepareStackTrace;
            Error.prepareStackTrace = void 0;
            var previousDispatcher;
            {
              previousDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = null;
              disableLogs();
            }
            try {
              if (construct) {
                var Fake = function() {
                  throw Error();
                };
                Object.defineProperty(Fake.prototype, "props", {
                  set: function() {
                    throw Error();
                  }
                });
                if (typeof Reflect === "object" && Reflect.construct) {
                  try {
                    Reflect.construct(Fake, []);
                  } catch (x) {
                    control = x;
                  }
                  Reflect.construct(fn, [], Fake);
                } else {
                  try {
                    Fake.call();
                  } catch (x) {
                    control = x;
                  }
                  fn.call(Fake.prototype);
                }
              } else {
                try {
                  throw Error();
                } catch (x) {
                  control = x;
                }
                fn();
              }
            } catch (sample) {
              if (sample && control && typeof sample.stack === "string") {
                var sampleLines = sample.stack.split("\n");
                var controlLines = control.stack.split("\n");
                var s = sampleLines.length - 1;
                var c = controlLines.length - 1;
                while (s >= 1 && c >= 0 && sampleLines[s] !== controlLines[c]) {
                  c--;
                }
                for (; s >= 1 && c >= 0; s--, c--) {
                  if (sampleLines[s] !== controlLines[c]) {
                    if (s !== 1 || c !== 1) {
                      do {
                        s--;
                        c--;
                        if (c < 0 || sampleLines[s] !== controlLines[c]) {
                          var _frame = "\n" + sampleLines[s].replace(" at new ", " at ");
                          if (fn.displayName && _frame.includes("<anonymous>")) {
                            _frame = _frame.replace("<anonymous>", fn.displayName);
                          }
                          {
                            if (typeof fn === "function") {
                              componentFrameCache.set(fn, _frame);
                            }
                          }
                          return _frame;
                        }
                      } while (s >= 1 && c >= 0);
                    }
                    break;
                  }
                }
              }
            } finally {
              reentry = false;
              {
                ReactCurrentDispatcher$1.current = previousDispatcher;
                reenableLogs();
              }
              Error.prepareStackTrace = previousPrepareStackTrace;
            }
            var name = fn ? fn.displayName || fn.name : "";
            var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
            {
              if (typeof fn === "function") {
                componentFrameCache.set(fn, syntheticFrame);
              }
            }
            return syntheticFrame;
          }
          function describeFunctionComponentFrame(fn, source, ownerFn) {
            {
              return describeNativeComponentFrame(fn, false);
            }
          }
          function shouldConstruct(Component2) {
            var prototype = Component2.prototype;
            return !!(prototype && prototype.isReactComponent);
          }
          function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
            if (type == null) {
              return "";
            }
            if (typeof type === "function") {
              {
                return describeNativeComponentFrame(type, shouldConstruct(type));
              }
            }
            if (typeof type === "string") {
              return describeBuiltInComponentFrame(type);
            }
            switch (type) {
              case REACT_SUSPENSE_TYPE:
                return describeBuiltInComponentFrame("Suspense");
              case REACT_SUSPENSE_LIST_TYPE:
                return describeBuiltInComponentFrame("SuspenseList");
            }
            if (typeof type === "object") {
              switch (type.$$typeof) {
                case REACT_FORWARD_REF_TYPE:
                  return describeFunctionComponentFrame(type.render);
                case REACT_MEMO_TYPE:
                  return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
                case REACT_LAZY_TYPE: {
                  var lazyComponent = type;
                  var payload = lazyComponent._payload;
                  var init = lazyComponent._init;
                  try {
                    return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                  } catch (x) {
                  }
                }
              }
            }
            return "";
          }
          var loggedTypeFailures = {};
          var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
          function setCurrentlyValidatingElement(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
              } else {
                ReactDebugCurrentFrame$1.setExtraStackFrame(null);
              }
            }
          }
          function checkPropTypes(typeSpecs, values, location, componentName, element) {
            {
              var has = Function.call.bind(hasOwnProperty);
              for (var typeSpecName in typeSpecs) {
                if (has(typeSpecs, typeSpecName)) {
                  var error$1 = void 0;
                  try {
                    if (typeof typeSpecs[typeSpecName] !== "function") {
                      var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                      err.name = "Invariant Violation";
                      throw err;
                    }
                    error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                  } catch (ex) {
                    error$1 = ex;
                  }
                  if (error$1 && !(error$1 instanceof Error)) {
                    setCurrentlyValidatingElement(element);
                    error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                    setCurrentlyValidatingElement(null);
                  }
                  if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                    loggedTypeFailures[error$1.message] = true;
                    setCurrentlyValidatingElement(element);
                    error("Failed %s type: %s", location, error$1.message);
                    setCurrentlyValidatingElement(null);
                  }
                }
              }
            }
          }
          function setCurrentlyValidatingElement$1(element) {
            {
              if (element) {
                var owner = element._owner;
                var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
                setExtraStackFrame(stack);
              } else {
                setExtraStackFrame(null);
              }
            }
          }
          var propTypesMisspellWarningShown;
          {
            propTypesMisspellWarningShown = false;
          }
          function getDeclarationErrorAddendum() {
            if (ReactCurrentOwner.current) {
              var name = getComponentNameFromType(ReactCurrentOwner.current.type);
              if (name) {
                return "\n\nCheck the render method of `" + name + "`.";
              }
            }
            return "";
          }
          function getSourceInfoErrorAddendum(source) {
            if (source !== void 0) {
              var fileName = source.fileName.replace(/^.*[\\\/]/, "");
              var lineNumber = source.lineNumber;
              return "\n\nCheck your code at " + fileName + ":" + lineNumber + ".";
            }
            return "";
          }
          function getSourceInfoErrorAddendumForProps(elementProps) {
            if (elementProps !== null && elementProps !== void 0) {
              return getSourceInfoErrorAddendum(elementProps.__source);
            }
            return "";
          }
          var ownerHasKeyUseWarning = {};
          function getCurrentComponentErrorInfo(parentType) {
            var info = getDeclarationErrorAddendum();
            if (!info) {
              var parentName = typeof parentType === "string" ? parentType : parentType.displayName || parentType.name;
              if (parentName) {
                info = "\n\nCheck the top-level render call using <" + parentName + ">.";
              }
            }
            return info;
          }
          function validateExplicitKey(element, parentType) {
            if (!element._store || element._store.validated || element.key != null) {
              return;
            }
            element._store.validated = true;
            var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);
            if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
              return;
            }
            ownerHasKeyUseWarning[currentComponentErrorInfo] = true;
            var childOwner = "";
            if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
              childOwner = " It was passed a child from " + getComponentNameFromType(element._owner.type) + ".";
            }
            {
              setCurrentlyValidatingElement$1(element);
              error('Each child in a list should have a unique "key" prop.%s%s See https://reactjs.org/link/warning-keys for more information.', currentComponentErrorInfo, childOwner);
              setCurrentlyValidatingElement$1(null);
            }
          }
          function validateChildKeys(node, parentType) {
            if (typeof node !== "object") {
              return;
            }
            if (isArray(node)) {
              for (var i = 0; i < node.length; i++) {
                var child = node[i];
                if (isValidElement(child)) {
                  validateExplicitKey(child, parentType);
                }
              }
            } else if (isValidElement(node)) {
              if (node._store) {
                node._store.validated = true;
              }
            } else if (node) {
              var iteratorFn = getIteratorFn(node);
              if (typeof iteratorFn === "function") {
                if (iteratorFn !== node.entries) {
                  var iterator = iteratorFn.call(node);
                  var step;
                  while (!(step = iterator.next()).done) {
                    if (isValidElement(step.value)) {
                      validateExplicitKey(step.value, parentType);
                    }
                  }
                }
              }
            }
          }
          function validatePropTypes(element) {
            {
              var type = element.type;
              if (type === null || type === void 0 || typeof type === "string") {
                return;
              }
              var propTypes;
              if (typeof type === "function") {
                propTypes = type.propTypes;
              } else if (typeof type === "object" && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
              // Inner props are checked in the reconciler.
              type.$$typeof === REACT_MEMO_TYPE)) {
                propTypes = type.propTypes;
              } else {
                return;
              }
              if (propTypes) {
                var name = getComponentNameFromType(type);
                checkPropTypes(propTypes, element.props, "prop", name, element);
              } else if (type.PropTypes !== void 0 && !propTypesMisspellWarningShown) {
                propTypesMisspellWarningShown = true;
                var _name = getComponentNameFromType(type);
                error("Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?", _name || "Unknown");
              }
              if (typeof type.getDefaultProps === "function" && !type.getDefaultProps.isReactClassApproved) {
                error("getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.");
              }
            }
          }
          function validateFragmentProps(fragment) {
            {
              var keys = Object.keys(fragment.props);
              for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                if (key !== "children" && key !== "key") {
                  setCurrentlyValidatingElement$1(fragment);
                  error("Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.", key);
                  setCurrentlyValidatingElement$1(null);
                  break;
                }
              }
              if (fragment.ref !== null) {
                setCurrentlyValidatingElement$1(fragment);
                error("Invalid attribute `ref` supplied to `React.Fragment`.");
                setCurrentlyValidatingElement$1(null);
              }
            }
          }
          function createElementWithValidation(type, props, children) {
            var validType = isValidElementType(type);
            if (!validType) {
              var info = "";
              if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
              }
              var sourceInfo = getSourceInfoErrorAddendumForProps(props);
              if (sourceInfo) {
                info += sourceInfo;
              } else {
                info += getDeclarationErrorAddendum();
              }
              var typeString;
              if (type === null) {
                typeString = "null";
              } else if (isArray(type)) {
                typeString = "array";
              } else if (type !== void 0 && type.$$typeof === REACT_ELEMENT_TYPE) {
                typeString = "<" + (getComponentNameFromType(type.type) || "Unknown") + " />";
                info = " Did you accidentally export a JSX literal instead of a component?";
              } else {
                typeString = typeof type;
              }
              {
                error("React.createElement: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s", typeString, info);
              }
            }
            var element = createElement.apply(this, arguments);
            if (element == null) {
              return element;
            }
            if (validType) {
              for (var i = 2; i < arguments.length; i++) {
                validateChildKeys(arguments[i], type);
              }
            }
            if (type === REACT_FRAGMENT_TYPE) {
              validateFragmentProps(element);
            } else {
              validatePropTypes(element);
            }
            return element;
          }
          var didWarnAboutDeprecatedCreateFactory = false;
          function createFactoryWithValidation(type) {
            var validatedFactory = createElementWithValidation.bind(null, type);
            validatedFactory.type = type;
            {
              if (!didWarnAboutDeprecatedCreateFactory) {
                didWarnAboutDeprecatedCreateFactory = true;
                warn("React.createFactory() is deprecated and will be removed in a future major release. Consider using JSX or use React.createElement() directly instead.");
              }
              Object.defineProperty(validatedFactory, "type", {
                enumerable: false,
                get: function() {
                  warn("Factory.type is deprecated. Access the class directly before passing it to createFactory.");
                  Object.defineProperty(this, "type", {
                    value: type
                  });
                  return type;
                }
              });
            }
            return validatedFactory;
          }
          function cloneElementWithValidation(element, props, children) {
            var newElement = cloneElement.apply(this, arguments);
            for (var i = 2; i < arguments.length; i++) {
              validateChildKeys(arguments[i], newElement.type);
            }
            validatePropTypes(newElement);
            return newElement;
          }
          function startTransition(scope, options) {
            var prevTransition = ReactCurrentBatchConfig.transition;
            ReactCurrentBatchConfig.transition = {};
            var currentTransition = ReactCurrentBatchConfig.transition;
            {
              ReactCurrentBatchConfig.transition._updatedFibers = /* @__PURE__ */ new Set();
            }
            try {
              scope();
            } finally {
              ReactCurrentBatchConfig.transition = prevTransition;
              {
                if (prevTransition === null && currentTransition._updatedFibers) {
                  var updatedFibersCount = currentTransition._updatedFibers.size;
                  if (updatedFibersCount > 10) {
                    warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                  }
                  currentTransition._updatedFibers.clear();
                }
              }
            }
          }
          var didWarnAboutMessageChannel = false;
          var enqueueTaskImpl = null;
          function enqueueTask(task) {
            if (enqueueTaskImpl === null) {
              try {
                var requireString = ("require" + Math.random()).slice(0, 7);
                var nodeRequire = module && module[requireString];
                enqueueTaskImpl = nodeRequire.call(module, "timers").setImmediate;
              } catch (_err) {
                enqueueTaskImpl = function(callback) {
                  {
                    if (didWarnAboutMessageChannel === false) {
                      didWarnAboutMessageChannel = true;
                      if (typeof MessageChannel === "undefined") {
                        error("This browser does not have a MessageChannel implementation, so enqueuing tasks via await act(async () => ...) will fail. Please file an issue at https://github.com/facebook/react/issues if you encounter this warning.");
                      }
                    }
                  }
                  var channel = new MessageChannel();
                  channel.port1.onmessage = callback;
                  channel.port2.postMessage(void 0);
                };
              }
            }
            return enqueueTaskImpl(task);
          }
          var actScopeDepth = 0;
          var didWarnNoAwaitAct = false;
          function act(callback) {
            {
              var prevActScopeDepth = actScopeDepth;
              actScopeDepth++;
              if (ReactCurrentActQueue.current === null) {
                ReactCurrentActQueue.current = [];
              }
              var prevIsBatchingLegacy = ReactCurrentActQueue.isBatchingLegacy;
              var result;
              try {
                ReactCurrentActQueue.isBatchingLegacy = true;
                result = callback();
                if (!prevIsBatchingLegacy && ReactCurrentActQueue.didScheduleLegacyUpdate) {
                  var queue = ReactCurrentActQueue.current;
                  if (queue !== null) {
                    ReactCurrentActQueue.didScheduleLegacyUpdate = false;
                    flushActQueue(queue);
                  }
                }
              } catch (error2) {
                popActScope(prevActScopeDepth);
                throw error2;
              } finally {
                ReactCurrentActQueue.isBatchingLegacy = prevIsBatchingLegacy;
              }
              if (result !== null && typeof result === "object" && typeof result.then === "function") {
                var thenableResult = result;
                var wasAwaited = false;
                var thenable = {
                  then: function(resolve, reject) {
                    wasAwaited = true;
                    thenableResult.then(function(returnValue2) {
                      popActScope(prevActScopeDepth);
                      if (actScopeDepth === 0) {
                        recursivelyFlushAsyncActWork(returnValue2, resolve, reject);
                      } else {
                        resolve(returnValue2);
                      }
                    }, function(error2) {
                      popActScope(prevActScopeDepth);
                      reject(error2);
                    });
                  }
                };
                {
                  if (!didWarnNoAwaitAct && typeof Promise !== "undefined") {
                    Promise.resolve().then(function() {
                    }).then(function() {
                      if (!wasAwaited) {
                        didWarnNoAwaitAct = true;
                        error("You called act(async () => ...) without await. This could lead to unexpected testing behaviour, interleaving multiple act calls and mixing their scopes. You should - await act(async () => ...);");
                      }
                    });
                  }
                }
                return thenable;
              } else {
                var returnValue = result;
                popActScope(prevActScopeDepth);
                if (actScopeDepth === 0) {
                  var _queue = ReactCurrentActQueue.current;
                  if (_queue !== null) {
                    flushActQueue(_queue);
                    ReactCurrentActQueue.current = null;
                  }
                  var _thenable = {
                    then: function(resolve, reject) {
                      if (ReactCurrentActQueue.current === null) {
                        ReactCurrentActQueue.current = [];
                        recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                      } else {
                        resolve(returnValue);
                      }
                    }
                  };
                  return _thenable;
                } else {
                  var _thenable2 = {
                    then: function(resolve, reject) {
                      resolve(returnValue);
                    }
                  };
                  return _thenable2;
                }
              }
            }
          }
          function popActScope(prevActScopeDepth) {
            {
              if (prevActScopeDepth !== actScopeDepth - 1) {
                error("You seem to have overlapping act() calls, this is not supported. Be sure to await previous act() calls before making a new one. ");
              }
              actScopeDepth = prevActScopeDepth;
            }
          }
          function recursivelyFlushAsyncActWork(returnValue, resolve, reject) {
            {
              var queue = ReactCurrentActQueue.current;
              if (queue !== null) {
                try {
                  flushActQueue(queue);
                  enqueueTask(function() {
                    if (queue.length === 0) {
                      ReactCurrentActQueue.current = null;
                      resolve(returnValue);
                    } else {
                      recursivelyFlushAsyncActWork(returnValue, resolve, reject);
                    }
                  });
                } catch (error2) {
                  reject(error2);
                }
              } else {
                resolve(returnValue);
              }
            }
          }
          var isFlushing = false;
          function flushActQueue(queue) {
            {
              if (!isFlushing) {
                isFlushing = true;
                var i = 0;
                try {
                  for (; i < queue.length; i++) {
                    var callback = queue[i];
                    do {
                      callback = callback(true);
                    } while (callback !== null);
                  }
                  queue.length = 0;
                } catch (error2) {
                  queue = queue.slice(i + 1);
                  throw error2;
                } finally {
                  isFlushing = false;
                }
              }
            }
          }
          var createElement$1 = createElementWithValidation;
          var cloneElement$1 = cloneElementWithValidation;
          var createFactory = createFactoryWithValidation;
          var Children = {
            map: mapChildren,
            forEach: forEachChildren,
            count: countChildren,
            toArray,
            only: onlyChild
          };
          exports.Children = Children;
          exports.Component = Component;
          exports.Fragment = REACT_FRAGMENT_TYPE;
          exports.Profiler = REACT_PROFILER_TYPE;
          exports.PureComponent = PureComponent;
          exports.StrictMode = REACT_STRICT_MODE_TYPE;
          exports.Suspense = REACT_SUSPENSE_TYPE;
          exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
          exports.cloneElement = cloneElement$1;
          exports.createContext = createContext;
          exports.createElement = createElement$1;
          exports.createFactory = createFactory;
          exports.createRef = createRef;
          exports.forwardRef = forwardRef;
          exports.isValidElement = isValidElement;
          exports.lazy = lazy;
          exports.memo = memo;
          exports.startTransition = startTransition;
          exports.unstable_act = act;
          exports.useCallback = useCallback2;
          exports.useContext = useContext;
          exports.useDebugValue = useDebugValue;
          exports.useDeferredValue = useDeferredValue;
          exports.useEffect = useEffect2;
          exports.useId = useId;
          exports.useImperativeHandle = useImperativeHandle;
          exports.useInsertionEffect = useInsertionEffect;
          exports.useLayoutEffect = useLayoutEffect;
          exports.useMemo = useMemo;
          exports.useReducer = useReducer;
          exports.useRef = useRef;
          exports.useState = useState2;
          exports.useSyncExternalStore = useSyncExternalStore;
          exports.useTransition = useTransition;
          exports.version = ReactVersion;
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
            __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
          }
        })();
      }
    }
  });

  // node_modules/react/index.js
  var require_react = __commonJS({
    "node_modules/react/index.js"(exports, module) {
      "use strict";
      if (false) {
        module.exports = null;
      } else {
        module.exports = require_react_development();
      }
    }
  });

  // node_modules/@noble/hashes/_assert.js
  var require_assert = __commonJS({
    "node_modules/@noble/hashes/_assert.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
      function number(n) {
        if (!Number.isSafeInteger(n) || n < 0)
          throw new Error(`Wrong positive integer: ${n}`);
      }
      exports.number = number;
      function bool(b) {
        if (typeof b !== "boolean")
          throw new Error(`Expected boolean, not ${b}`);
      }
      exports.bool = bool;
      function bytes(b, ...lengths) {
        if (!(b instanceof Uint8Array))
          throw new Error("Expected Uint8Array");
        if (lengths.length > 0 && !lengths.includes(b.length))
          throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
      }
      exports.bytes = bytes;
      function hash(hash2) {
        if (typeof hash2 !== "function" || typeof hash2.create !== "function")
          throw new Error("Hash should be wrapped by utils.wrapConstructor");
        number(hash2.outputLen);
        number(hash2.blockLen);
      }
      exports.hash = hash;
      function exists(instance, checkFinished = true) {
        if (instance.destroyed)
          throw new Error("Hash instance has been destroyed");
        if (checkFinished && instance.finished)
          throw new Error("Hash#digest() has already been called");
      }
      exports.exists = exists;
      function output(out, instance) {
        bytes(out);
        const min = instance.outputLen;
        if (out.length < min) {
          throw new Error(`digestInto() expects output buffer of length at least ${min}`);
        }
      }
      exports.output = output;
      var assert = { number, bool, bytes, hash, exists, output };
      exports.default = assert;
    }
  });

  // node_modules/@noble/hashes/crypto.js
  var require_crypto = __commonJS({
    "node_modules/@noble/hashes/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.crypto = void 0;
      exports.crypto = typeof globalThis === "object" && "crypto" in globalThis ? globalThis.crypto : void 0;
    }
  });

  // node_modules/@noble/hashes/utils.js
  var require_utils2 = __commonJS({
    "node_modules/@noble/hashes/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.randomBytes = exports.wrapXOFConstructorWithOpts = exports.wrapConstructorWithOpts = exports.wrapConstructor = exports.checkOpts = exports.Hash = exports.concatBytes = exports.toBytes = exports.utf8ToBytes = exports.asyncLoop = exports.nextTick = exports.hexToBytes = exports.bytesToHex = exports.isLE = exports.rotr = exports.createView = exports.u32 = exports.u8 = void 0;
      var crypto_1 = require_crypto();
      var u8a2 = (a) => a instanceof Uint8Array;
      var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
      exports.u8 = u8;
      var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
      exports.u32 = u32;
      var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
      exports.createView = createView;
      var rotr = (word, shift) => word << 32 - shift | word >>> shift;
      exports.rotr = rotr;
      exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
      if (!exports.isLE)
        throw new Error("Non little-endian hardware is not supported");
      var hexes2 = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
      function bytesToHex2(bytes) {
        if (!u8a2(bytes))
          throw new Error("Uint8Array expected");
        let hex = "";
        for (let i = 0; i < bytes.length; i++) {
          hex += hexes2[bytes[i]];
        }
        return hex;
      }
      exports.bytesToHex = bytesToHex2;
      function hexToBytes2(hex) {
        if (typeof hex !== "string")
          throw new Error("hex string expected, got " + typeof hex);
        const len = hex.length;
        if (len % 2)
          throw new Error("padded hex string expected, got unpadded hex of length " + len);
        const array = new Uint8Array(len / 2);
        for (let i = 0; i < array.length; i++) {
          const j = i * 2;
          const hexByte = hex.slice(j, j + 2);
          const byte = Number.parseInt(hexByte, 16);
          if (Number.isNaN(byte) || byte < 0)
            throw new Error("Invalid byte sequence");
          array[i] = byte;
        }
        return array;
      }
      exports.hexToBytes = hexToBytes2;
      var nextTick = async () => {
      };
      exports.nextTick = nextTick;
      async function asyncLoop(iters, tick, cb) {
        let ts = Date.now();
        for (let i = 0; i < iters; i++) {
          cb(i);
          const diff = Date.now() - ts;
          if (diff >= 0 && diff < tick)
            continue;
          await (0, exports.nextTick)();
          ts += diff;
        }
      }
      exports.asyncLoop = asyncLoop;
      function utf8ToBytes(str) {
        if (typeof str !== "string")
          throw new Error(`utf8ToBytes expected string, got ${typeof str}`);
        return new Uint8Array(new TextEncoder().encode(str));
      }
      exports.utf8ToBytes = utf8ToBytes;
      function toBytes(data) {
        if (typeof data === "string")
          data = utf8ToBytes(data);
        if (!u8a2(data))
          throw new Error(`expected Uint8Array, got ${typeof data}`);
        return data;
      }
      exports.toBytes = toBytes;
      function concatBytes(...arrays) {
        const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));
        let pad = 0;
        arrays.forEach((a) => {
          if (!u8a2(a))
            throw new Error("Uint8Array expected");
          r.set(a, pad);
          pad += a.length;
        });
        return r;
      }
      exports.concatBytes = concatBytes;
      var Hash = class {
        // Safe version that clones internal state
        clone() {
          return this._cloneInto();
        }
      };
      exports.Hash = Hash;
      var toStr2 = {}.toString;
      function checkOpts(defaults, opts) {
        if (opts !== void 0 && toStr2.call(opts) !== "[object Object]")
          throw new Error("Options should be object or undefined");
        const merged = Object.assign(defaults, opts);
        return merged;
      }
      exports.checkOpts = checkOpts;
      function wrapConstructor(hashCons) {
        const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
        const tmp = hashCons();
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = () => hashCons();
        return hashC;
      }
      exports.wrapConstructor = wrapConstructor;
      function wrapConstructorWithOpts(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
      function wrapXOFConstructorWithOpts(hashCons) {
        const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();
        const tmp = hashCons({});
        hashC.outputLen = tmp.outputLen;
        hashC.blockLen = tmp.blockLen;
        hashC.create = (opts) => hashCons(opts);
        return hashC;
      }
      exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
      function randomBytes(bytesLength = 32) {
        if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === "function") {
          return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
        }
        throw new Error("crypto.getRandomValues must be defined");
      }
      exports.randomBytes = randomBytes;
    }
  });

  // node_modules/@noble/hashes/_sha2.js
  var require_sha2 = __commonJS({
    "node_modules/@noble/hashes/_sha2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SHA2 = void 0;
      var _assert_js_1 = require_assert();
      var utils_js_1 = require_utils2();
      function setBigUint64(view, byteOffset, value, isLE2) {
        if (typeof view.setBigUint64 === "function")
          return view.setBigUint64(byteOffset, value, isLE2);
        const _32n = BigInt(32);
        const _u32_max = BigInt(4294967295);
        const wh = Number(value >> _32n & _u32_max);
        const wl = Number(value & _u32_max);
        const h = isLE2 ? 4 : 0;
        const l = isLE2 ? 0 : 4;
        view.setUint32(byteOffset + h, wh, isLE2);
        view.setUint32(byteOffset + l, wl, isLE2);
      }
      var SHA2 = class extends utils_js_1.Hash {
        constructor(blockLen, outputLen, padOffset, isLE2) {
          super();
          this.blockLen = blockLen;
          this.outputLen = outputLen;
          this.padOffset = padOffset;
          this.isLE = isLE2;
          this.finished = false;
          this.length = 0;
          this.pos = 0;
          this.destroyed = false;
          this.buffer = new Uint8Array(blockLen);
          this.view = (0, utils_js_1.createView)(this.buffer);
        }
        update(data) {
          (0, _assert_js_1.exists)(this);
          const { view, buffer, blockLen } = this;
          data = (0, utils_js_1.toBytes)(data);
          const len = data.length;
          for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
              const dataView = (0, utils_js_1.createView)(data);
              for (; blockLen <= len - pos; pos += blockLen)
                this.process(dataView, pos);
              continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
              this.process(view, 0);
              this.pos = 0;
            }
          }
          this.length += data.length;
          this.roundClean();
          return this;
        }
        digestInto(out) {
          (0, _assert_js_1.exists)(this);
          (0, _assert_js_1.output)(out, this);
          this.finished = true;
          const { buffer, view, blockLen, isLE: isLE2 } = this;
          let { pos } = this;
          buffer[pos++] = 128;
          this.buffer.subarray(pos).fill(0);
          if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
          }
          for (let i = pos; i < blockLen; i++)
            buffer[i] = 0;
          setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
          this.process(view, 0);
          const oview = (0, utils_js_1.createView)(out);
          const len = this.outputLen;
          if (len % 4)
            throw new Error("_sha2: outputLen should be aligned to 32bit");
          const outLen = len / 4;
          const state = this.get();
          if (outLen > state.length)
            throw new Error("_sha2: outputLen bigger than state");
          for (let i = 0; i < outLen; i++)
            oview.setUint32(4 * i, state[i], isLE2);
        }
        digest() {
          const { buffer, outputLen } = this;
          this.digestInto(buffer);
          const res = buffer.slice(0, outputLen);
          this.destroy();
          return res;
        }
        _cloneInto(to) {
          to || (to = new this.constructor());
          to.set(...this.get());
          const { blockLen, buffer, length, finished, destroyed, pos } = this;
          to.length = length;
          to.pos = pos;
          to.finished = finished;
          to.destroyed = destroyed;
          if (length % blockLen)
            to.buffer.set(buffer);
          return to;
        }
      };
      exports.SHA2 = SHA2;
    }
  });

  // node_modules/@noble/hashes/_u64.js
  var require_u64 = __commonJS({
    "node_modules/@noble/hashes/_u64.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.add5L = exports.add5H = exports.add4H = exports.add4L = exports.add3H = exports.add3L = exports.add = exports.rotlBL = exports.rotlBH = exports.rotlSL = exports.rotlSH = exports.rotr32L = exports.rotr32H = exports.rotrBL = exports.rotrBH = exports.rotrSL = exports.rotrSH = exports.shrSL = exports.shrSH = exports.toBig = exports.split = exports.fromBig = void 0;
      var U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);
      var _32n = /* @__PURE__ */ BigInt(32);
      function fromBig(n, le = false) {
        if (le)
          return { h: Number(n & U32_MASK64), l: Number(n >> _32n & U32_MASK64) };
        return { h: Number(n >> _32n & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
      }
      exports.fromBig = fromBig;
      function split(lst, le = false) {
        let Ah = new Uint32Array(lst.length);
        let Al = new Uint32Array(lst.length);
        for (let i = 0; i < lst.length; i++) {
          const { h, l } = fromBig(lst[i], le);
          [Ah[i], Al[i]] = [h, l];
        }
        return [Ah, Al];
      }
      exports.split = split;
      var toBig = (h, l) => BigInt(h >>> 0) << _32n | BigInt(l >>> 0);
      exports.toBig = toBig;
      var shrSH = (h, _l, s) => h >>> s;
      exports.shrSH = shrSH;
      var shrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.shrSL = shrSL;
      var rotrSH = (h, l, s) => h >>> s | l << 32 - s;
      exports.rotrSH = rotrSH;
      var rotrSL = (h, l, s) => h << 32 - s | l >>> s;
      exports.rotrSL = rotrSL;
      var rotrBH = (h, l, s) => h << 64 - s | l >>> s - 32;
      exports.rotrBH = rotrBH;
      var rotrBL = (h, l, s) => h >>> s - 32 | l << 64 - s;
      exports.rotrBL = rotrBL;
      var rotr32H = (_h, l) => l;
      exports.rotr32H = rotr32H;
      var rotr32L = (h, _l) => h;
      exports.rotr32L = rotr32L;
      var rotlSH = (h, l, s) => h << s | l >>> 32 - s;
      exports.rotlSH = rotlSH;
      var rotlSL = (h, l, s) => l << s | h >>> 32 - s;
      exports.rotlSL = rotlSL;
      var rotlBH = (h, l, s) => l << s - 32 | h >>> 64 - s;
      exports.rotlBH = rotlBH;
      var rotlBL = (h, l, s) => h << s - 32 | l >>> 64 - s;
      exports.rotlBL = rotlBL;
      function add(Ah, Al, Bh, Bl) {
        const l = (Al >>> 0) + (Bl >>> 0);
        return { h: Ah + Bh + (l / 2 ** 32 | 0) | 0, l: l | 0 };
      }
      exports.add = add;
      var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
      exports.add3L = add3L;
      var add3H = (low, Ah, Bh, Ch) => Ah + Bh + Ch + (low / 2 ** 32 | 0) | 0;
      exports.add3H = add3H;
      var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
      exports.add4L = add4L;
      var add4H = (low, Ah, Bh, Ch, Dh) => Ah + Bh + Ch + Dh + (low / 2 ** 32 | 0) | 0;
      exports.add4H = add4H;
      var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
      exports.add5L = add5L;
      var add5H = (low, Ah, Bh, Ch, Dh, Eh) => Ah + Bh + Ch + Dh + Eh + (low / 2 ** 32 | 0) | 0;
      exports.add5H = add5H;
      var u64 = {
        fromBig,
        split,
        toBig,
        shrSH,
        shrSL,
        rotrSH,
        rotrSL,
        rotrBH,
        rotrBL,
        rotr32H,
        rotr32L,
        rotlSH,
        rotlSL,
        rotlBH,
        rotlBL,
        add,
        add3L,
        add3H,
        add4L,
        add4H,
        add5H,
        add5L
      };
      exports.default = u64;
    }
  });

  // node_modules/@noble/hashes/sha512.js
  var require_sha512 = __commonJS({
    "node_modules/@noble/hashes/sha512.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha384 = exports.sha512_256 = exports.sha512_224 = exports.sha512 = exports.SHA512 = void 0;
      var _sha2_js_1 = require_sha2();
      var _u64_js_1 = require_u64();
      var utils_js_1 = require_utils2();
      var [SHA512_Kh, SHA512_Kl] = /* @__PURE__ */ (() => _u64_js_1.default.split([
        "0x428a2f98d728ae22",
        "0x7137449123ef65cd",
        "0xb5c0fbcfec4d3b2f",
        "0xe9b5dba58189dbbc",
        "0x3956c25bf348b538",
        "0x59f111f1b605d019",
        "0x923f82a4af194f9b",
        "0xab1c5ed5da6d8118",
        "0xd807aa98a3030242",
        "0x12835b0145706fbe",
        "0x243185be4ee4b28c",
        "0x550c7dc3d5ffb4e2",
        "0x72be5d74f27b896f",
        "0x80deb1fe3b1696b1",
        "0x9bdc06a725c71235",
        "0xc19bf174cf692694",
        "0xe49b69c19ef14ad2",
        "0xefbe4786384f25e3",
        "0x0fc19dc68b8cd5b5",
        "0x240ca1cc77ac9c65",
        "0x2de92c6f592b0275",
        "0x4a7484aa6ea6e483",
        "0x5cb0a9dcbd41fbd4",
        "0x76f988da831153b5",
        "0x983e5152ee66dfab",
        "0xa831c66d2db43210",
        "0xb00327c898fb213f",
        "0xbf597fc7beef0ee4",
        "0xc6e00bf33da88fc2",
        "0xd5a79147930aa725",
        "0x06ca6351e003826f",
        "0x142929670a0e6e70",
        "0x27b70a8546d22ffc",
        "0x2e1b21385c26c926",
        "0x4d2c6dfc5ac42aed",
        "0x53380d139d95b3df",
        "0x650a73548baf63de",
        "0x766a0abb3c77b2a8",
        "0x81c2c92e47edaee6",
        "0x92722c851482353b",
        "0xa2bfe8a14cf10364",
        "0xa81a664bbc423001",
        "0xc24b8b70d0f89791",
        "0xc76c51a30654be30",
        "0xd192e819d6ef5218",
        "0xd69906245565a910",
        "0xf40e35855771202a",
        "0x106aa07032bbd1b8",
        "0x19a4c116b8d2d0c8",
        "0x1e376c085141ab53",
        "0x2748774cdf8eeb99",
        "0x34b0bcb5e19b48a8",
        "0x391c0cb3c5c95a63",
        "0x4ed8aa4ae3418acb",
        "0x5b9cca4f7763e373",
        "0x682e6ff3d6b2b8a3",
        "0x748f82ee5defb2fc",
        "0x78a5636f43172f60",
        "0x84c87814a1f0ab72",
        "0x8cc702081a6439ec",
        "0x90befffa23631e28",
        "0xa4506cebde82bde9",
        "0xbef9a3f7b2c67915",
        "0xc67178f2e372532b",
        "0xca273eceea26619c",
        "0xd186b8c721c0c207",
        "0xeada7dd6cde0eb1e",
        "0xf57d4f7fee6ed178",
        "0x06f067aa72176fba",
        "0x0a637dc5a2c898a6",
        "0x113f9804bef90dae",
        "0x1b710b35131c471b",
        "0x28db77f523047d84",
        "0x32caab7b40c72493",
        "0x3c9ebe0a15c9bebc",
        "0x431d67c49c100d4c",
        "0x4cc5d4becb3e42b6",
        "0x597f299cfc657e2a",
        "0x5fcb6fab3ad6faec",
        "0x6c44198c4a475817"
      ].map((n) => BigInt(n))))();
      var SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);
      var SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);
      var SHA512 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(128, 64, 16, false);
          this.Ah = 1779033703 | 0;
          this.Al = 4089235720 | 0;
          this.Bh = 3144134277 | 0;
          this.Bl = 2227873595 | 0;
          this.Ch = 1013904242 | 0;
          this.Cl = 4271175723 | 0;
          this.Dh = 2773480762 | 0;
          this.Dl = 1595750129 | 0;
          this.Eh = 1359893119 | 0;
          this.El = 2917565137 | 0;
          this.Fh = 2600822924 | 0;
          this.Fl = 725511199 | 0;
          this.Gh = 528734635 | 0;
          this.Gl = 4215389547 | 0;
          this.Hh = 1541459225 | 0;
          this.Hl = 327033209 | 0;
        }
        // prettier-ignore
        get() {
          const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
        }
        // prettier-ignore
        set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
          this.Ah = Ah | 0;
          this.Al = Al | 0;
          this.Bh = Bh | 0;
          this.Bl = Bl | 0;
          this.Ch = Ch | 0;
          this.Cl = Cl | 0;
          this.Dh = Dh | 0;
          this.Dl = Dl | 0;
          this.Eh = Eh | 0;
          this.El = El | 0;
          this.Fh = Fh | 0;
          this.Fl = Fl | 0;
          this.Gh = Gh | 0;
          this.Gl = Gl | 0;
          this.Hh = Hh | 0;
          this.Hl = Hl | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32(offset += 4);
          }
          for (let i = 16; i < 80; i++) {
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h = _u64_js_1.default.rotrSH(W15h, W15l, 1) ^ _u64_js_1.default.rotrSH(W15h, W15l, 8) ^ _u64_js_1.default.shrSH(W15h, W15l, 7);
            const s0l = _u64_js_1.default.rotrSL(W15h, W15l, 1) ^ _u64_js_1.default.rotrSL(W15h, W15l, 8) ^ _u64_js_1.default.shrSL(W15h, W15l, 7);
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h = _u64_js_1.default.rotrSH(W2h, W2l, 19) ^ _u64_js_1.default.rotrBH(W2h, W2l, 61) ^ _u64_js_1.default.shrSH(W2h, W2l, 6);
            const s1l = _u64_js_1.default.rotrSL(W2h, W2l, 19) ^ _u64_js_1.default.rotrBL(W2h, W2l, 61) ^ _u64_js_1.default.shrSL(W2h, W2l, 6);
            const SUMl = _u64_js_1.default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = _u64_js_1.default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
          }
          let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
          for (let i = 0; i < 80; i++) {
            const sigma1h = _u64_js_1.default.rotrSH(Eh, El, 14) ^ _u64_js_1.default.rotrSH(Eh, El, 18) ^ _u64_js_1.default.rotrBH(Eh, El, 41);
            const sigma1l = _u64_js_1.default.rotrSL(Eh, El, 14) ^ _u64_js_1.default.rotrSL(Eh, El, 18) ^ _u64_js_1.default.rotrBL(Eh, El, 41);
            const CHIh = Eh & Fh ^ ~Eh & Gh;
            const CHIl = El & Fl ^ ~El & Gl;
            const T1ll = _u64_js_1.default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = _u64_js_1.default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            const sigma0h = _u64_js_1.default.rotrSH(Ah, Al, 28) ^ _u64_js_1.default.rotrBH(Ah, Al, 34) ^ _u64_js_1.default.rotrBH(Ah, Al, 39);
            const sigma0l = _u64_js_1.default.rotrSL(Ah, Al, 28) ^ _u64_js_1.default.rotrBL(Ah, Al, 34) ^ _u64_js_1.default.rotrBL(Ah, Al, 39);
            const MAJh = Ah & Bh ^ Ah & Ch ^ Bh & Ch;
            const MAJl = Al & Bl ^ Al & Cl ^ Bl & Cl;
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = _u64_js_1.default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = _u64_js_1.default.add3L(T1l, sigma0l, MAJl);
            Ah = _u64_js_1.default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
          }
          ({ h: Ah, l: Al } = _u64_js_1.default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
          ({ h: Bh, l: Bl } = _u64_js_1.default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
          ({ h: Ch, l: Cl } = _u64_js_1.default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
          ({ h: Dh, l: Dl } = _u64_js_1.default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
          ({ h: Eh, l: El } = _u64_js_1.default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
          ({ h: Fh, l: Fl } = _u64_js_1.default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
          ({ h: Gh, l: Gl } = _u64_js_1.default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
          ({ h: Hh, l: Hl } = _u64_js_1.default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
          this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
        }
        roundClean() {
          SHA512_W_H.fill(0);
          SHA512_W_L.fill(0);
        }
        destroy() {
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        }
      };
      exports.SHA512 = SHA512;
      var SHA512_224 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 2352822216 | 0;
          this.Al = 424955298 | 0;
          this.Bh = 1944164710 | 0;
          this.Bl = 2312950998 | 0;
          this.Ch = 502970286 | 0;
          this.Cl = 855612546 | 0;
          this.Dh = 1738396948 | 0;
          this.Dl = 1479516111 | 0;
          this.Eh = 258812777 | 0;
          this.El = 2077511080 | 0;
          this.Fh = 2011393907 | 0;
          this.Fl = 79989058 | 0;
          this.Gh = 1067287976 | 0;
          this.Gl = 1780299464 | 0;
          this.Hh = 286451373 | 0;
          this.Hl = 2446758561 | 0;
          this.outputLen = 28;
        }
      };
      var SHA512_256 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 573645204 | 0;
          this.Al = 4230739756 | 0;
          this.Bh = 2673172387 | 0;
          this.Bl = 3360449730 | 0;
          this.Ch = 596883563 | 0;
          this.Cl = 1867755857 | 0;
          this.Dh = 2520282905 | 0;
          this.Dl = 1497426621 | 0;
          this.Eh = 2519219938 | 0;
          this.El = 2827943907 | 0;
          this.Fh = 3193839141 | 0;
          this.Fl = 1401305490 | 0;
          this.Gh = 721525244 | 0;
          this.Gl = 746961066 | 0;
          this.Hh = 246885852 | 0;
          this.Hl = 2177182882 | 0;
          this.outputLen = 32;
        }
      };
      var SHA384 = class extends SHA512 {
        constructor() {
          super();
          this.Ah = 3418070365 | 0;
          this.Al = 3238371032 | 0;
          this.Bh = 1654270250 | 0;
          this.Bl = 914150663 | 0;
          this.Ch = 2438529370 | 0;
          this.Cl = 812702999 | 0;
          this.Dh = 355462360 | 0;
          this.Dl = 4144912697 | 0;
          this.Eh = 1731405415 | 0;
          this.El = 4290775857 | 0;
          this.Fh = 2394180231 | 0;
          this.Fl = 1750603025 | 0;
          this.Gh = 3675008525 | 0;
          this.Gl = 1694076839 | 0;
          this.Hh = 1203062813 | 0;
          this.Hl = 3204075428 | 0;
          this.outputLen = 48;
        }
      };
      exports.sha512 = (0, utils_js_1.wrapConstructor)(() => new SHA512());
      exports.sha512_224 = (0, utils_js_1.wrapConstructor)(() => new SHA512_224());
      exports.sha512_256 = (0, utils_js_1.wrapConstructor)(() => new SHA512_256());
      exports.sha384 = (0, utils_js_1.wrapConstructor)(() => new SHA384());
    }
  });

  // node_modules/@noble/hashes/hmac.js
  var require_hmac = __commonJS({
    "node_modules/@noble/hashes/hmac.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hmac = exports.HMAC = void 0;
      var _assert_js_1 = require_assert();
      var utils_js_1 = require_utils2();
      var HMAC = class extends utils_js_1.Hash {
        constructor(hash, _key) {
          super();
          this.finished = false;
          this.destroyed = false;
          (0, _assert_js_1.hash)(hash);
          const key = (0, utils_js_1.toBytes)(_key);
          this.iHash = hash.create();
          if (typeof this.iHash.update !== "function")
            throw new Error("Expected instance of class which extends utils.Hash");
          this.blockLen = this.iHash.blockLen;
          this.outputLen = this.iHash.outputLen;
          const blockLen = this.blockLen;
          const pad = new Uint8Array(blockLen);
          pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54;
          this.iHash.update(pad);
          this.oHash = hash.create();
          for (let i = 0; i < pad.length; i++)
            pad[i] ^= 54 ^ 92;
          this.oHash.update(pad);
          pad.fill(0);
        }
        update(buf) {
          (0, _assert_js_1.exists)(this);
          this.iHash.update(buf);
          return this;
        }
        digestInto(out) {
          (0, _assert_js_1.exists)(this);
          (0, _assert_js_1.bytes)(out, this.outputLen);
          this.finished = true;
          this.iHash.digestInto(out);
          this.oHash.update(out);
          this.oHash.digestInto(out);
          this.destroy();
        }
        digest() {
          const out = new Uint8Array(this.oHash.outputLen);
          this.digestInto(out);
          return out;
        }
        _cloneInto(to) {
          to || (to = Object.create(Object.getPrototypeOf(this), {}));
          const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
          to = to;
          to.finished = finished;
          to.destroyed = destroyed;
          to.blockLen = blockLen;
          to.outputLen = outputLen;
          to.oHash = oHash._cloneInto(to.oHash);
          to.iHash = iHash._cloneInto(to.iHash);
          return to;
        }
        destroy() {
          this.destroyed = true;
          this.oHash.destroy();
          this.iHash.destroy();
        }
      };
      exports.HMAC = HMAC;
      var hmac = (hash, key, message) => new HMAC(hash, key).update(message).digest();
      exports.hmac = hmac;
      exports.hmac.create = (hash, key) => new HMAC(hash, key);
    }
  });

  // node_modules/@noble/hashes/pbkdf2.js
  var require_pbkdf2 = __commonJS({
    "node_modules/@noble/hashes/pbkdf2.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.pbkdf2Async = exports.pbkdf2 = void 0;
      var _assert_js_1 = require_assert();
      var hmac_js_1 = require_hmac();
      var utils_js_1 = require_utils2();
      function pbkdf2Init(hash, _password, _salt, _opts) {
        (0, _assert_js_1.hash)(hash);
        const opts = (0, utils_js_1.checkOpts)({ dkLen: 32, asyncTick: 10 }, _opts);
        const { c, dkLen, asyncTick } = opts;
        (0, _assert_js_1.number)(c);
        (0, _assert_js_1.number)(dkLen);
        (0, _assert_js_1.number)(asyncTick);
        if (c < 1)
          throw new Error("PBKDF2: iterations (c) should be >= 1");
        const password = (0, utils_js_1.toBytes)(_password);
        const salt = (0, utils_js_1.toBytes)(_salt);
        const DK = new Uint8Array(dkLen);
        const PRF = hmac_js_1.hmac.create(hash, password);
        const PRFSalt = PRF._cloneInto().update(salt);
        return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
      }
      function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
        PRF.destroy();
        PRFSalt.destroy();
        if (prfW)
          prfW.destroy();
        u.fill(0);
        return DK;
      }
      function pbkdf2(hash, password, salt, opts) {
        const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
        let prfW;
        const arr = new Uint8Array(4);
        const view = (0, utils_js_1.createView)(arr);
        const u = new Uint8Array(PRF.outputLen);
        for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          for (let ui = 1; ui < c; ui++) {
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
              Ti[i] ^= u[i];
          }
        }
        return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
      }
      exports.pbkdf2 = pbkdf2;
      async function pbkdf2Async(hash, password, salt, opts) {
        const { c, dkLen, asyncTick, DK, PRF, PRFSalt } = pbkdf2Init(hash, password, salt, opts);
        let prfW;
        const arr = new Uint8Array(4);
        const view = (0, utils_js_1.createView)(arr);
        const u = new Uint8Array(PRF.outputLen);
        for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
          const Ti = DK.subarray(pos, pos + PRF.outputLen);
          view.setInt32(0, ti, false);
          (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
          Ti.set(u.subarray(0, Ti.length));
          await (0, utils_js_1.asyncLoop)(c - 1, asyncTick, () => {
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++)
              Ti[i] ^= u[i];
          });
        }
        return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
      }
      exports.pbkdf2Async = pbkdf2Async;
    }
  });

  // (disabled):node_modules/buffer/index.js
  var require_buffer = __commonJS({
    "(disabled):node_modules/buffer/index.js"() {
    }
  });

  // node_modules/bn.js/lib/bn.js
  var require_bn = __commonJS({
    "node_modules/bn.js/lib/bn.js"(exports, module) {
      (function(module2, exports2) {
        "use strict";
        function assert(val, msg) {
          if (!val)
            throw new Error(msg || "Assertion failed");
        }
        function inherits(ctor, superCtor) {
          ctor.super_ = superCtor;
          var TempCtor = function() {
          };
          TempCtor.prototype = superCtor.prototype;
          ctor.prototype = new TempCtor();
          ctor.prototype.constructor = ctor;
        }
        function BN(number, base, endian) {
          if (BN.isBN(number)) {
            return number;
          }
          this.negative = 0;
          this.words = null;
          this.length = 0;
          this.red = null;
          if (number !== null) {
            if (base === "le" || base === "be") {
              endian = base;
              base = 10;
            }
            this._init(number || 0, base || 10, endian || "be");
          }
        }
        if (typeof module2 === "object") {
          module2.exports = BN;
        } else {
          exports2.BN = BN;
        }
        BN.BN = BN;
        BN.wordSize = 26;
        var Buffer2;
        try {
          if (typeof window !== "undefined" && typeof window.Buffer !== "undefined") {
            Buffer2 = window.Buffer;
          } else {
            Buffer2 = require_buffer().Buffer;
          }
        } catch (e) {
        }
        BN.isBN = function isBN(num) {
          if (num instanceof BN) {
            return true;
          }
          return num !== null && typeof num === "object" && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
        };
        BN.max = function max(left, right) {
          if (left.cmp(right) > 0)
            return left;
          return right;
        };
        BN.min = function min(left, right) {
          if (left.cmp(right) < 0)
            return left;
          return right;
        };
        BN.prototype._init = function init(number, base, endian) {
          if (typeof number === "number") {
            return this._initNumber(number, base, endian);
          }
          if (typeof number === "object") {
            return this._initArray(number, base, endian);
          }
          if (base === "hex") {
            base = 16;
          }
          assert(base === (base | 0) && base >= 2 && base <= 36);
          number = number.toString().replace(/\s+/g, "");
          var start = 0;
          if (number[0] === "-") {
            start++;
            this.negative = 1;
          }
          if (start < number.length) {
            if (base === 16) {
              this._parseHex(number, start, endian);
            } else {
              this._parseBase(number, base, start);
              if (endian === "le") {
                this._initArray(this.toArray(), base, endian);
              }
            }
          }
        };
        BN.prototype._initNumber = function _initNumber(number, base, endian) {
          if (number < 0) {
            this.negative = 1;
            number = -number;
          }
          if (number < 67108864) {
            this.words = [number & 67108863];
            this.length = 1;
          } else if (number < 4503599627370496) {
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863
            ];
            this.length = 2;
          } else {
            assert(number < 9007199254740992);
            this.words = [
              number & 67108863,
              number / 67108864 & 67108863,
              1
            ];
            this.length = 3;
          }
          if (endian !== "le")
            return;
          this._initArray(this.toArray(), base, endian);
        };
        BN.prototype._initArray = function _initArray(number, base, endian) {
          assert(typeof number.length === "number");
          if (number.length <= 0) {
            this.words = [0];
            this.length = 1;
            return this;
          }
          this.length = Math.ceil(number.length / 3);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var j, w;
          var off = 0;
          if (endian === "be") {
            for (i = number.length - 1, j = 0; i >= 0; i -= 3) {
              w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          } else if (endian === "le") {
            for (i = 0, j = 0; i < number.length; i += 3) {
              w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
              this.words[j] |= w << off & 67108863;
              this.words[j + 1] = w >>> 26 - off & 67108863;
              off += 24;
              if (off >= 26) {
                off -= 26;
                j++;
              }
            }
          }
          return this._strip();
        };
        function parseHex4Bits(string, index) {
          var c = string.charCodeAt(index);
          if (c >= 48 && c <= 57) {
            return c - 48;
          } else if (c >= 65 && c <= 70) {
            return c - 55;
          } else if (c >= 97 && c <= 102) {
            return c - 87;
          } else {
            assert(false, "Invalid character in " + string);
          }
        }
        function parseHexByte(string, lowerBound, index) {
          var r = parseHex4Bits(string, index);
          if (index - 1 >= lowerBound) {
            r |= parseHex4Bits(string, index - 1) << 4;
          }
          return r;
        }
        BN.prototype._parseHex = function _parseHex(number, start, endian) {
          this.length = Math.ceil((number.length - start) / 6);
          this.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            this.words[i] = 0;
          }
          var off = 0;
          var j = 0;
          var w;
          if (endian === "be") {
            for (i = number.length - 1; i >= start; i -= 2) {
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          } else {
            var parseLength = number.length - start;
            for (i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2) {
              w = parseHexByte(number, start, i) << off;
              this.words[j] |= w & 67108863;
              if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
              } else {
                off += 8;
              }
            }
          }
          this._strip();
        };
        function parseBase(str, start, end, mul) {
          var r = 0;
          var b = 0;
          var len = Math.min(str.length, end);
          for (var i = start; i < len; i++) {
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            if (c >= 49) {
              b = c - 49 + 10;
            } else if (c >= 17) {
              b = c - 17 + 10;
            } else {
              b = c;
            }
            assert(c >= 0 && b < mul, "Invalid character");
            r += b;
          }
          return r;
        }
        BN.prototype._parseBase = function _parseBase(number, base, start) {
          this.words = [0];
          this.length = 1;
          for (var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base) {
            limbLen++;
          }
          limbLen--;
          limbPow = limbPow / base | 0;
          var total = number.length - start;
          var mod = total % limbLen;
          var end = Math.min(total, total - mod) + start;
          var word = 0;
          for (var i = start; i < end; i += limbLen) {
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for (i = 0; i < mod; i++) {
              pow *= base;
            }
            this.imuln(pow);
            if (this.words[0] + word < 67108864) {
              this.words[0] += word;
            } else {
              this._iaddn(word);
            }
          }
          this._strip();
        };
        BN.prototype.copy = function copy(dest) {
          dest.words = new Array(this.length);
          for (var i = 0; i < this.length; i++) {
            dest.words[i] = this.words[i];
          }
          dest.length = this.length;
          dest.negative = this.negative;
          dest.red = this.red;
        };
        function move(dest, src) {
          dest.words = src.words;
          dest.length = src.length;
          dest.negative = src.negative;
          dest.red = src.red;
        }
        BN.prototype._move = function _move(dest) {
          move(dest, this);
        };
        BN.prototype.clone = function clone() {
          var r = new BN(null);
          this.copy(r);
          return r;
        };
        BN.prototype._expand = function _expand(size) {
          while (this.length < size) {
            this.words[this.length++] = 0;
          }
          return this;
        };
        BN.prototype._strip = function strip() {
          while (this.length > 1 && this.words[this.length - 1] === 0) {
            this.length--;
          }
          return this._normSign();
        };
        BN.prototype._normSign = function _normSign() {
          if (this.length === 1 && this.words[0] === 0) {
            this.negative = 0;
          }
          return this;
        };
        if (typeof Symbol !== "undefined" && typeof Symbol.for === "function") {
          try {
            BN.prototype[Symbol.for("nodejs.util.inspect.custom")] = inspect;
          } catch (e) {
            BN.prototype.inspect = inspect;
          }
        } else {
          BN.prototype.inspect = inspect;
        }
        function inspect() {
          return (this.red ? "<BN-R: " : "<BN: ") + this.toString(16) + ">";
        }
        var zeros = [
          "",
          "0",
          "00",
          "000",
          "0000",
          "00000",
          "000000",
          "0000000",
          "00000000",
          "000000000",
          "0000000000",
          "00000000000",
          "000000000000",
          "0000000000000",
          "00000000000000",
          "000000000000000",
          "0000000000000000",
          "00000000000000000",
          "000000000000000000",
          "0000000000000000000",
          "00000000000000000000",
          "000000000000000000000",
          "0000000000000000000000",
          "00000000000000000000000",
          "000000000000000000000000",
          "0000000000000000000000000"
        ];
        var groupSizes = [
          0,
          0,
          25,
          16,
          12,
          11,
          10,
          9,
          8,
          8,
          7,
          7,
          7,
          7,
          6,
          6,
          6,
          6,
          6,
          6,
          6,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5,
          5
        ];
        var groupBases = [
          0,
          0,
          33554432,
          43046721,
          16777216,
          48828125,
          60466176,
          40353607,
          16777216,
          43046721,
          1e7,
          19487171,
          35831808,
          62748517,
          7529536,
          11390625,
          16777216,
          24137569,
          34012224,
          47045881,
          64e6,
          4084101,
          5153632,
          6436343,
          7962624,
          9765625,
          11881376,
          14348907,
          17210368,
          20511149,
          243e5,
          28629151,
          33554432,
          39135393,
          45435424,
          52521875,
          60466176
        ];
        BN.prototype.toString = function toString(base, padding) {
          base = base || 10;
          padding = padding | 0 || 1;
          var out;
          if (base === 16 || base === "hex") {
            out = "";
            var off = 0;
            var carry = 0;
            for (var i = 0; i < this.length; i++) {
              var w = this.words[i];
              var word = ((w << off | carry) & 16777215).toString(16);
              carry = w >>> 24 - off & 16777215;
              off += 2;
              if (off >= 26) {
                off -= 26;
                i--;
              }
              if (carry !== 0 || i !== this.length - 1) {
                out = zeros[6 - word.length] + word + out;
              } else {
                out = word + out;
              }
            }
            if (carry !== 0) {
              out = carry.toString(16) + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          if (base === (base | 0) && base >= 2 && base <= 36) {
            var groupSize = groupSizes[base];
            var groupBase = groupBases[base];
            out = "";
            var c = this.clone();
            c.negative = 0;
            while (!c.isZero()) {
              var r = c.modrn(groupBase).toString(base);
              c = c.idivn(groupBase);
              if (!c.isZero()) {
                out = zeros[groupSize - r.length] + r + out;
              } else {
                out = r + out;
              }
            }
            if (this.isZero()) {
              out = "0" + out;
            }
            while (out.length % padding !== 0) {
              out = "0" + out;
            }
            if (this.negative !== 0) {
              out = "-" + out;
            }
            return out;
          }
          assert(false, "Base should be between 2 and 36");
        };
        BN.prototype.toNumber = function toNumber() {
          var ret = this.words[0];
          if (this.length === 2) {
            ret += this.words[1] * 67108864;
          } else if (this.length === 3 && this.words[2] === 1) {
            ret += 4503599627370496 + this.words[1] * 67108864;
          } else if (this.length > 2) {
            assert(false, "Number can only safely store up to 53 bits");
          }
          return this.negative !== 0 ? -ret : ret;
        };
        BN.prototype.toJSON = function toJSON() {
          return this.toString(16, 2);
        };
        if (Buffer2) {
          BN.prototype.toBuffer = function toBuffer(endian, length) {
            return this.toArrayLike(Buffer2, endian, length);
          };
        }
        BN.prototype.toArray = function toArray(endian, length) {
          return this.toArrayLike(Array, endian, length);
        };
        var allocate = function allocate2(ArrayType, size) {
          if (ArrayType.allocUnsafe) {
            return ArrayType.allocUnsafe(size);
          }
          return new ArrayType(size);
        };
        BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
          this._strip();
          var byteLength = this.byteLength();
          var reqLength = length || Math.max(1, byteLength);
          assert(byteLength <= reqLength, "byte array longer than desired length");
          assert(reqLength > 0, "Requested array length <= 0");
          var res = allocate(ArrayType, reqLength);
          var postfix = endian === "le" ? "LE" : "BE";
          this["_toArrayLike" + postfix](res, byteLength);
          return res;
        };
        BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
          var position = 0;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) {
              res[position++] = word >> 8 & 255;
            }
            if (position < res.length) {
              res[position++] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position < res.length) {
                res[position++] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position < res.length) {
            res[position++] = carry;
            while (position < res.length) {
              res[position++] = 0;
            }
          }
        };
        BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
          var position = res.length - 1;
          var carry = 0;
          for (var i = 0, shift = 0; i < this.length; i++) {
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) {
              res[position--] = word >> 8 & 255;
            }
            if (position >= 0) {
              res[position--] = word >> 16 & 255;
            }
            if (shift === 6) {
              if (position >= 0) {
                res[position--] = word >> 24 & 255;
              }
              carry = 0;
              shift = 0;
            } else {
              carry = word >>> 24;
              shift += 2;
            }
          }
          if (position >= 0) {
            res[position--] = carry;
            while (position >= 0) {
              res[position--] = 0;
            }
          }
        };
        if (Math.clz32) {
          BN.prototype._countBits = function _countBits(w) {
            return 32 - Math.clz32(w);
          };
        } else {
          BN.prototype._countBits = function _countBits(w) {
            var t = w;
            var r = 0;
            if (t >= 4096) {
              r += 13;
              t >>>= 13;
            }
            if (t >= 64) {
              r += 7;
              t >>>= 7;
            }
            if (t >= 8) {
              r += 4;
              t >>>= 4;
            }
            if (t >= 2) {
              r += 2;
              t >>>= 2;
            }
            return r + t;
          };
        }
        BN.prototype._zeroBits = function _zeroBits(w) {
          if (w === 0)
            return 26;
          var t = w;
          var r = 0;
          if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
          }
          if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
          }
          if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
          }
          if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
          }
          if ((t & 1) === 0) {
            r++;
          }
          return r;
        };
        BN.prototype.bitLength = function bitLength() {
          var w = this.words[this.length - 1];
          var hi = this._countBits(w);
          return (this.length - 1) * 26 + hi;
        };
        function toBitArray(num) {
          var w = new Array(num.bitLength());
          for (var bit = 0; bit < w.length; bit++) {
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
          }
          return w;
        }
        BN.prototype.zeroBits = function zeroBits() {
          if (this.isZero())
            return 0;
          var r = 0;
          for (var i = 0; i < this.length; i++) {
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26)
              break;
          }
          return r;
        };
        BN.prototype.byteLength = function byteLength() {
          return Math.ceil(this.bitLength() / 8);
        };
        BN.prototype.toTwos = function toTwos(width) {
          if (this.negative !== 0) {
            return this.abs().inotn(width).iaddn(1);
          }
          return this.clone();
        };
        BN.prototype.fromTwos = function fromTwos(width) {
          if (this.testn(width - 1)) {
            return this.notn(width).iaddn(1).ineg();
          }
          return this.clone();
        };
        BN.prototype.isNeg = function isNeg() {
          return this.negative !== 0;
        };
        BN.prototype.neg = function neg() {
          return this.clone().ineg();
        };
        BN.prototype.ineg = function ineg() {
          if (!this.isZero()) {
            this.negative ^= 1;
          }
          return this;
        };
        BN.prototype.iuor = function iuor(num) {
          while (this.length < num.length) {
            this.words[this.length++] = 0;
          }
          for (var i = 0; i < num.length; i++) {
            this.words[i] = this.words[i] | num.words[i];
          }
          return this._strip();
        };
        BN.prototype.ior = function ior(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuor(num);
        };
        BN.prototype.or = function or(num) {
          if (this.length > num.length)
            return this.clone().ior(num);
          return num.clone().ior(this);
        };
        BN.prototype.uor = function uor(num) {
          if (this.length > num.length)
            return this.clone().iuor(num);
          return num.clone().iuor(this);
        };
        BN.prototype.iuand = function iuand(num) {
          var b;
          if (this.length > num.length) {
            b = num;
          } else {
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = this.words[i] & num.words[i];
          }
          this.length = b.length;
          return this._strip();
        };
        BN.prototype.iand = function iand(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuand(num);
        };
        BN.prototype.and = function and(num) {
          if (this.length > num.length)
            return this.clone().iand(num);
          return num.clone().iand(this);
        };
        BN.prototype.uand = function uand(num) {
          if (this.length > num.length)
            return this.clone().iuand(num);
          return num.clone().iuand(this);
        };
        BN.prototype.iuxor = function iuxor(num) {
          var a;
          var b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          for (var i = 0; i < b.length; i++) {
            this.words[i] = a.words[i] ^ b.words[i];
          }
          if (this !== a) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = a.length;
          return this._strip();
        };
        BN.prototype.ixor = function ixor(num) {
          assert((this.negative | num.negative) === 0);
          return this.iuxor(num);
        };
        BN.prototype.xor = function xor(num) {
          if (this.length > num.length)
            return this.clone().ixor(num);
          return num.clone().ixor(this);
        };
        BN.prototype.uxor = function uxor(num) {
          if (this.length > num.length)
            return this.clone().iuxor(num);
          return num.clone().iuxor(this);
        };
        BN.prototype.inotn = function inotn(width) {
          assert(typeof width === "number" && width >= 0);
          var bytesNeeded = Math.ceil(width / 26) | 0;
          var bitsLeft = width % 26;
          this._expand(bytesNeeded);
          if (bitsLeft > 0) {
            bytesNeeded--;
          }
          for (var i = 0; i < bytesNeeded; i++) {
            this.words[i] = ~this.words[i] & 67108863;
          }
          if (bitsLeft > 0) {
            this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
          }
          return this._strip();
        };
        BN.prototype.notn = function notn(width) {
          return this.clone().inotn(width);
        };
        BN.prototype.setn = function setn(bit, val) {
          assert(typeof bit === "number" && bit >= 0);
          var off = bit / 26 | 0;
          var wbit = bit % 26;
          this._expand(off + 1);
          if (val) {
            this.words[off] = this.words[off] | 1 << wbit;
          } else {
            this.words[off] = this.words[off] & ~(1 << wbit);
          }
          return this._strip();
        };
        BN.prototype.iadd = function iadd(num) {
          var r;
          if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
          } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
          }
          var a, b;
          if (this.length > num.length) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
          }
          this.length = a.length;
          if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
          } else if (a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          return this;
        };
        BN.prototype.add = function add(num) {
          var res;
          if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
          } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
          }
          if (this.length > num.length)
            return this.clone().iadd(num);
          return num.clone().iadd(this);
        };
        BN.prototype.isub = function isub(num) {
          if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
          } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
          }
          var cmp = this.cmp(num);
          if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
          }
          var a, b;
          if (cmp > 0) {
            a = this;
            b = num;
          } else {
            a = num;
            b = this;
          }
          var carry = 0;
          for (var i = 0; i < b.length; i++) {
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          for (; carry !== 0 && i < a.length; i++) {
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
          }
          if (carry === 0 && i < a.length && a !== this) {
            for (; i < a.length; i++) {
              this.words[i] = a.words[i];
            }
          }
          this.length = Math.max(this.length, i);
          if (a !== this) {
            this.negative = 1;
          }
          return this._strip();
        };
        BN.prototype.sub = function sub(num) {
          return this.clone().isub(num);
        };
        function smallMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          var len = self2.length + num.length | 0;
          out.length = len;
          len = len - 1 | 0;
          var a = self2.words[0] | 0;
          var b = num.words[0] | 0;
          var r = a * b;
          var lo = r & 67108863;
          var carry = r / 67108864 | 0;
          out.words[0] = lo;
          for (var k = 1; k < len; k++) {
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j | 0;
              a = self2.words[i] | 0;
              b = num.words[j] | 0;
              r = a * b + rword;
              ncarry += r / 67108864 | 0;
              rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
          }
          if (carry !== 0) {
            out.words[k] = carry | 0;
          } else {
            out.length--;
          }
          return out._strip();
        }
        var comb10MulTo = function comb10MulTo2(self2, num, out) {
          var a = self2.words;
          var b = num.words;
          var o = out.words;
          var c = 0;
          var lo;
          var mid;
          var hi;
          var a0 = a[0] | 0;
          var al0 = a0 & 8191;
          var ah0 = a0 >>> 13;
          var a1 = a[1] | 0;
          var al1 = a1 & 8191;
          var ah1 = a1 >>> 13;
          var a2 = a[2] | 0;
          var al2 = a2 & 8191;
          var ah2 = a2 >>> 13;
          var a3 = a[3] | 0;
          var al3 = a3 & 8191;
          var ah3 = a3 >>> 13;
          var a4 = a[4] | 0;
          var al4 = a4 & 8191;
          var ah4 = a4 >>> 13;
          var a5 = a[5] | 0;
          var al5 = a5 & 8191;
          var ah5 = a5 >>> 13;
          var a6 = a[6] | 0;
          var al6 = a6 & 8191;
          var ah6 = a6 >>> 13;
          var a7 = a[7] | 0;
          var al7 = a7 & 8191;
          var ah7 = a7 >>> 13;
          var a8 = a[8] | 0;
          var al8 = a8 & 8191;
          var ah8 = a8 >>> 13;
          var a9 = a[9] | 0;
          var al9 = a9 & 8191;
          var ah9 = a9 >>> 13;
          var b0 = b[0] | 0;
          var bl0 = b0 & 8191;
          var bh0 = b0 >>> 13;
          var b1 = b[1] | 0;
          var bl1 = b1 & 8191;
          var bh1 = b1 >>> 13;
          var b2 = b[2] | 0;
          var bl2 = b2 & 8191;
          var bh2 = b2 >>> 13;
          var b3 = b[3] | 0;
          var bl3 = b3 & 8191;
          var bh3 = b3 >>> 13;
          var b4 = b[4] | 0;
          var bl4 = b4 & 8191;
          var bh4 = b4 >>> 13;
          var b5 = b[5] | 0;
          var bl5 = b5 & 8191;
          var bh5 = b5 >>> 13;
          var b6 = b[6] | 0;
          var bl6 = b6 & 8191;
          var bh6 = b6 >>> 13;
          var b7 = b[7] | 0;
          var bl7 = b7 & 8191;
          var bh7 = b7 >>> 13;
          var b8 = b[8] | 0;
          var bl8 = b8 & 8191;
          var bh8 = b8 >>> 13;
          var b9 = b[9] | 0;
          var bl9 = b9 & 8191;
          var bh9 = b9 >>> 13;
          out.negative = self2.negative ^ num.negative;
          out.length = 19;
          lo = Math.imul(al0, bl0);
          mid = Math.imul(al0, bh0);
          mid = mid + Math.imul(ah0, bl0) | 0;
          hi = Math.imul(ah0, bh0);
          var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
          w0 &= 67108863;
          lo = Math.imul(al1, bl0);
          mid = Math.imul(al1, bh0);
          mid = mid + Math.imul(ah1, bl0) | 0;
          hi = Math.imul(ah1, bh0);
          lo = lo + Math.imul(al0, bl1) | 0;
          mid = mid + Math.imul(al0, bh1) | 0;
          mid = mid + Math.imul(ah0, bl1) | 0;
          hi = hi + Math.imul(ah0, bh1) | 0;
          var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
          w1 &= 67108863;
          lo = Math.imul(al2, bl0);
          mid = Math.imul(al2, bh0);
          mid = mid + Math.imul(ah2, bl0) | 0;
          hi = Math.imul(ah2, bh0);
          lo = lo + Math.imul(al1, bl1) | 0;
          mid = mid + Math.imul(al1, bh1) | 0;
          mid = mid + Math.imul(ah1, bl1) | 0;
          hi = hi + Math.imul(ah1, bh1) | 0;
          lo = lo + Math.imul(al0, bl2) | 0;
          mid = mid + Math.imul(al0, bh2) | 0;
          mid = mid + Math.imul(ah0, bl2) | 0;
          hi = hi + Math.imul(ah0, bh2) | 0;
          var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
          w2 &= 67108863;
          lo = Math.imul(al3, bl0);
          mid = Math.imul(al3, bh0);
          mid = mid + Math.imul(ah3, bl0) | 0;
          hi = Math.imul(ah3, bh0);
          lo = lo + Math.imul(al2, bl1) | 0;
          mid = mid + Math.imul(al2, bh1) | 0;
          mid = mid + Math.imul(ah2, bl1) | 0;
          hi = hi + Math.imul(ah2, bh1) | 0;
          lo = lo + Math.imul(al1, bl2) | 0;
          mid = mid + Math.imul(al1, bh2) | 0;
          mid = mid + Math.imul(ah1, bl2) | 0;
          hi = hi + Math.imul(ah1, bh2) | 0;
          lo = lo + Math.imul(al0, bl3) | 0;
          mid = mid + Math.imul(al0, bh3) | 0;
          mid = mid + Math.imul(ah0, bl3) | 0;
          hi = hi + Math.imul(ah0, bh3) | 0;
          var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
          w3 &= 67108863;
          lo = Math.imul(al4, bl0);
          mid = Math.imul(al4, bh0);
          mid = mid + Math.imul(ah4, bl0) | 0;
          hi = Math.imul(ah4, bh0);
          lo = lo + Math.imul(al3, bl1) | 0;
          mid = mid + Math.imul(al3, bh1) | 0;
          mid = mid + Math.imul(ah3, bl1) | 0;
          hi = hi + Math.imul(ah3, bh1) | 0;
          lo = lo + Math.imul(al2, bl2) | 0;
          mid = mid + Math.imul(al2, bh2) | 0;
          mid = mid + Math.imul(ah2, bl2) | 0;
          hi = hi + Math.imul(ah2, bh2) | 0;
          lo = lo + Math.imul(al1, bl3) | 0;
          mid = mid + Math.imul(al1, bh3) | 0;
          mid = mid + Math.imul(ah1, bl3) | 0;
          hi = hi + Math.imul(ah1, bh3) | 0;
          lo = lo + Math.imul(al0, bl4) | 0;
          mid = mid + Math.imul(al0, bh4) | 0;
          mid = mid + Math.imul(ah0, bl4) | 0;
          hi = hi + Math.imul(ah0, bh4) | 0;
          var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
          w4 &= 67108863;
          lo = Math.imul(al5, bl0);
          mid = Math.imul(al5, bh0);
          mid = mid + Math.imul(ah5, bl0) | 0;
          hi = Math.imul(ah5, bh0);
          lo = lo + Math.imul(al4, bl1) | 0;
          mid = mid + Math.imul(al4, bh1) | 0;
          mid = mid + Math.imul(ah4, bl1) | 0;
          hi = hi + Math.imul(ah4, bh1) | 0;
          lo = lo + Math.imul(al3, bl2) | 0;
          mid = mid + Math.imul(al3, bh2) | 0;
          mid = mid + Math.imul(ah3, bl2) | 0;
          hi = hi + Math.imul(ah3, bh2) | 0;
          lo = lo + Math.imul(al2, bl3) | 0;
          mid = mid + Math.imul(al2, bh3) | 0;
          mid = mid + Math.imul(ah2, bl3) | 0;
          hi = hi + Math.imul(ah2, bh3) | 0;
          lo = lo + Math.imul(al1, bl4) | 0;
          mid = mid + Math.imul(al1, bh4) | 0;
          mid = mid + Math.imul(ah1, bl4) | 0;
          hi = hi + Math.imul(ah1, bh4) | 0;
          lo = lo + Math.imul(al0, bl5) | 0;
          mid = mid + Math.imul(al0, bh5) | 0;
          mid = mid + Math.imul(ah0, bl5) | 0;
          hi = hi + Math.imul(ah0, bh5) | 0;
          var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
          w5 &= 67108863;
          lo = Math.imul(al6, bl0);
          mid = Math.imul(al6, bh0);
          mid = mid + Math.imul(ah6, bl0) | 0;
          hi = Math.imul(ah6, bh0);
          lo = lo + Math.imul(al5, bl1) | 0;
          mid = mid + Math.imul(al5, bh1) | 0;
          mid = mid + Math.imul(ah5, bl1) | 0;
          hi = hi + Math.imul(ah5, bh1) | 0;
          lo = lo + Math.imul(al4, bl2) | 0;
          mid = mid + Math.imul(al4, bh2) | 0;
          mid = mid + Math.imul(ah4, bl2) | 0;
          hi = hi + Math.imul(ah4, bh2) | 0;
          lo = lo + Math.imul(al3, bl3) | 0;
          mid = mid + Math.imul(al3, bh3) | 0;
          mid = mid + Math.imul(ah3, bl3) | 0;
          hi = hi + Math.imul(ah3, bh3) | 0;
          lo = lo + Math.imul(al2, bl4) | 0;
          mid = mid + Math.imul(al2, bh4) | 0;
          mid = mid + Math.imul(ah2, bl4) | 0;
          hi = hi + Math.imul(ah2, bh4) | 0;
          lo = lo + Math.imul(al1, bl5) | 0;
          mid = mid + Math.imul(al1, bh5) | 0;
          mid = mid + Math.imul(ah1, bl5) | 0;
          hi = hi + Math.imul(ah1, bh5) | 0;
          lo = lo + Math.imul(al0, bl6) | 0;
          mid = mid + Math.imul(al0, bh6) | 0;
          mid = mid + Math.imul(ah0, bl6) | 0;
          hi = hi + Math.imul(ah0, bh6) | 0;
          var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
          w6 &= 67108863;
          lo = Math.imul(al7, bl0);
          mid = Math.imul(al7, bh0);
          mid = mid + Math.imul(ah7, bl0) | 0;
          hi = Math.imul(ah7, bh0);
          lo = lo + Math.imul(al6, bl1) | 0;
          mid = mid + Math.imul(al6, bh1) | 0;
          mid = mid + Math.imul(ah6, bl1) | 0;
          hi = hi + Math.imul(ah6, bh1) | 0;
          lo = lo + Math.imul(al5, bl2) | 0;
          mid = mid + Math.imul(al5, bh2) | 0;
          mid = mid + Math.imul(ah5, bl2) | 0;
          hi = hi + Math.imul(ah5, bh2) | 0;
          lo = lo + Math.imul(al4, bl3) | 0;
          mid = mid + Math.imul(al4, bh3) | 0;
          mid = mid + Math.imul(ah4, bl3) | 0;
          hi = hi + Math.imul(ah4, bh3) | 0;
          lo = lo + Math.imul(al3, bl4) | 0;
          mid = mid + Math.imul(al3, bh4) | 0;
          mid = mid + Math.imul(ah3, bl4) | 0;
          hi = hi + Math.imul(ah3, bh4) | 0;
          lo = lo + Math.imul(al2, bl5) | 0;
          mid = mid + Math.imul(al2, bh5) | 0;
          mid = mid + Math.imul(ah2, bl5) | 0;
          hi = hi + Math.imul(ah2, bh5) | 0;
          lo = lo + Math.imul(al1, bl6) | 0;
          mid = mid + Math.imul(al1, bh6) | 0;
          mid = mid + Math.imul(ah1, bl6) | 0;
          hi = hi + Math.imul(ah1, bh6) | 0;
          lo = lo + Math.imul(al0, bl7) | 0;
          mid = mid + Math.imul(al0, bh7) | 0;
          mid = mid + Math.imul(ah0, bl7) | 0;
          hi = hi + Math.imul(ah0, bh7) | 0;
          var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
          w7 &= 67108863;
          lo = Math.imul(al8, bl0);
          mid = Math.imul(al8, bh0);
          mid = mid + Math.imul(ah8, bl0) | 0;
          hi = Math.imul(ah8, bh0);
          lo = lo + Math.imul(al7, bl1) | 0;
          mid = mid + Math.imul(al7, bh1) | 0;
          mid = mid + Math.imul(ah7, bl1) | 0;
          hi = hi + Math.imul(ah7, bh1) | 0;
          lo = lo + Math.imul(al6, bl2) | 0;
          mid = mid + Math.imul(al6, bh2) | 0;
          mid = mid + Math.imul(ah6, bl2) | 0;
          hi = hi + Math.imul(ah6, bh2) | 0;
          lo = lo + Math.imul(al5, bl3) | 0;
          mid = mid + Math.imul(al5, bh3) | 0;
          mid = mid + Math.imul(ah5, bl3) | 0;
          hi = hi + Math.imul(ah5, bh3) | 0;
          lo = lo + Math.imul(al4, bl4) | 0;
          mid = mid + Math.imul(al4, bh4) | 0;
          mid = mid + Math.imul(ah4, bl4) | 0;
          hi = hi + Math.imul(ah4, bh4) | 0;
          lo = lo + Math.imul(al3, bl5) | 0;
          mid = mid + Math.imul(al3, bh5) | 0;
          mid = mid + Math.imul(ah3, bl5) | 0;
          hi = hi + Math.imul(ah3, bh5) | 0;
          lo = lo + Math.imul(al2, bl6) | 0;
          mid = mid + Math.imul(al2, bh6) | 0;
          mid = mid + Math.imul(ah2, bl6) | 0;
          hi = hi + Math.imul(ah2, bh6) | 0;
          lo = lo + Math.imul(al1, bl7) | 0;
          mid = mid + Math.imul(al1, bh7) | 0;
          mid = mid + Math.imul(ah1, bl7) | 0;
          hi = hi + Math.imul(ah1, bh7) | 0;
          lo = lo + Math.imul(al0, bl8) | 0;
          mid = mid + Math.imul(al0, bh8) | 0;
          mid = mid + Math.imul(ah0, bl8) | 0;
          hi = hi + Math.imul(ah0, bh8) | 0;
          var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
          w8 &= 67108863;
          lo = Math.imul(al9, bl0);
          mid = Math.imul(al9, bh0);
          mid = mid + Math.imul(ah9, bl0) | 0;
          hi = Math.imul(ah9, bh0);
          lo = lo + Math.imul(al8, bl1) | 0;
          mid = mid + Math.imul(al8, bh1) | 0;
          mid = mid + Math.imul(ah8, bl1) | 0;
          hi = hi + Math.imul(ah8, bh1) | 0;
          lo = lo + Math.imul(al7, bl2) | 0;
          mid = mid + Math.imul(al7, bh2) | 0;
          mid = mid + Math.imul(ah7, bl2) | 0;
          hi = hi + Math.imul(ah7, bh2) | 0;
          lo = lo + Math.imul(al6, bl3) | 0;
          mid = mid + Math.imul(al6, bh3) | 0;
          mid = mid + Math.imul(ah6, bl3) | 0;
          hi = hi + Math.imul(ah6, bh3) | 0;
          lo = lo + Math.imul(al5, bl4) | 0;
          mid = mid + Math.imul(al5, bh4) | 0;
          mid = mid + Math.imul(ah5, bl4) | 0;
          hi = hi + Math.imul(ah5, bh4) | 0;
          lo = lo + Math.imul(al4, bl5) | 0;
          mid = mid + Math.imul(al4, bh5) | 0;
          mid = mid + Math.imul(ah4, bl5) | 0;
          hi = hi + Math.imul(ah4, bh5) | 0;
          lo = lo + Math.imul(al3, bl6) | 0;
          mid = mid + Math.imul(al3, bh6) | 0;
          mid = mid + Math.imul(ah3, bl6) | 0;
          hi = hi + Math.imul(ah3, bh6) | 0;
          lo = lo + Math.imul(al2, bl7) | 0;
          mid = mid + Math.imul(al2, bh7) | 0;
          mid = mid + Math.imul(ah2, bl7) | 0;
          hi = hi + Math.imul(ah2, bh7) | 0;
          lo = lo + Math.imul(al1, bl8) | 0;
          mid = mid + Math.imul(al1, bh8) | 0;
          mid = mid + Math.imul(ah1, bl8) | 0;
          hi = hi + Math.imul(ah1, bh8) | 0;
          lo = lo + Math.imul(al0, bl9) | 0;
          mid = mid + Math.imul(al0, bh9) | 0;
          mid = mid + Math.imul(ah0, bl9) | 0;
          hi = hi + Math.imul(ah0, bh9) | 0;
          var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
          w9 &= 67108863;
          lo = Math.imul(al9, bl1);
          mid = Math.imul(al9, bh1);
          mid = mid + Math.imul(ah9, bl1) | 0;
          hi = Math.imul(ah9, bh1);
          lo = lo + Math.imul(al8, bl2) | 0;
          mid = mid + Math.imul(al8, bh2) | 0;
          mid = mid + Math.imul(ah8, bl2) | 0;
          hi = hi + Math.imul(ah8, bh2) | 0;
          lo = lo + Math.imul(al7, bl3) | 0;
          mid = mid + Math.imul(al7, bh3) | 0;
          mid = mid + Math.imul(ah7, bl3) | 0;
          hi = hi + Math.imul(ah7, bh3) | 0;
          lo = lo + Math.imul(al6, bl4) | 0;
          mid = mid + Math.imul(al6, bh4) | 0;
          mid = mid + Math.imul(ah6, bl4) | 0;
          hi = hi + Math.imul(ah6, bh4) | 0;
          lo = lo + Math.imul(al5, bl5) | 0;
          mid = mid + Math.imul(al5, bh5) | 0;
          mid = mid + Math.imul(ah5, bl5) | 0;
          hi = hi + Math.imul(ah5, bh5) | 0;
          lo = lo + Math.imul(al4, bl6) | 0;
          mid = mid + Math.imul(al4, bh6) | 0;
          mid = mid + Math.imul(ah4, bl6) | 0;
          hi = hi + Math.imul(ah4, bh6) | 0;
          lo = lo + Math.imul(al3, bl7) | 0;
          mid = mid + Math.imul(al3, bh7) | 0;
          mid = mid + Math.imul(ah3, bl7) | 0;
          hi = hi + Math.imul(ah3, bh7) | 0;
          lo = lo + Math.imul(al2, bl8) | 0;
          mid = mid + Math.imul(al2, bh8) | 0;
          mid = mid + Math.imul(ah2, bl8) | 0;
          hi = hi + Math.imul(ah2, bh8) | 0;
          lo = lo + Math.imul(al1, bl9) | 0;
          mid = mid + Math.imul(al1, bh9) | 0;
          mid = mid + Math.imul(ah1, bl9) | 0;
          hi = hi + Math.imul(ah1, bh9) | 0;
          var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
          w10 &= 67108863;
          lo = Math.imul(al9, bl2);
          mid = Math.imul(al9, bh2);
          mid = mid + Math.imul(ah9, bl2) | 0;
          hi = Math.imul(ah9, bh2);
          lo = lo + Math.imul(al8, bl3) | 0;
          mid = mid + Math.imul(al8, bh3) | 0;
          mid = mid + Math.imul(ah8, bl3) | 0;
          hi = hi + Math.imul(ah8, bh3) | 0;
          lo = lo + Math.imul(al7, bl4) | 0;
          mid = mid + Math.imul(al7, bh4) | 0;
          mid = mid + Math.imul(ah7, bl4) | 0;
          hi = hi + Math.imul(ah7, bh4) | 0;
          lo = lo + Math.imul(al6, bl5) | 0;
          mid = mid + Math.imul(al6, bh5) | 0;
          mid = mid + Math.imul(ah6, bl5) | 0;
          hi = hi + Math.imul(ah6, bh5) | 0;
          lo = lo + Math.imul(al5, bl6) | 0;
          mid = mid + Math.imul(al5, bh6) | 0;
          mid = mid + Math.imul(ah5, bl6) | 0;
          hi = hi + Math.imul(ah5, bh6) | 0;
          lo = lo + Math.imul(al4, bl7) | 0;
          mid = mid + Math.imul(al4, bh7) | 0;
          mid = mid + Math.imul(ah4, bl7) | 0;
          hi = hi + Math.imul(ah4, bh7) | 0;
          lo = lo + Math.imul(al3, bl8) | 0;
          mid = mid + Math.imul(al3, bh8) | 0;
          mid = mid + Math.imul(ah3, bl8) | 0;
          hi = hi + Math.imul(ah3, bh8) | 0;
          lo = lo + Math.imul(al2, bl9) | 0;
          mid = mid + Math.imul(al2, bh9) | 0;
          mid = mid + Math.imul(ah2, bl9) | 0;
          hi = hi + Math.imul(ah2, bh9) | 0;
          var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
          w11 &= 67108863;
          lo = Math.imul(al9, bl3);
          mid = Math.imul(al9, bh3);
          mid = mid + Math.imul(ah9, bl3) | 0;
          hi = Math.imul(ah9, bh3);
          lo = lo + Math.imul(al8, bl4) | 0;
          mid = mid + Math.imul(al8, bh4) | 0;
          mid = mid + Math.imul(ah8, bl4) | 0;
          hi = hi + Math.imul(ah8, bh4) | 0;
          lo = lo + Math.imul(al7, bl5) | 0;
          mid = mid + Math.imul(al7, bh5) | 0;
          mid = mid + Math.imul(ah7, bl5) | 0;
          hi = hi + Math.imul(ah7, bh5) | 0;
          lo = lo + Math.imul(al6, bl6) | 0;
          mid = mid + Math.imul(al6, bh6) | 0;
          mid = mid + Math.imul(ah6, bl6) | 0;
          hi = hi + Math.imul(ah6, bh6) | 0;
          lo = lo + Math.imul(al5, bl7) | 0;
          mid = mid + Math.imul(al5, bh7) | 0;
          mid = mid + Math.imul(ah5, bl7) | 0;
          hi = hi + Math.imul(ah5, bh7) | 0;
          lo = lo + Math.imul(al4, bl8) | 0;
          mid = mid + Math.imul(al4, bh8) | 0;
          mid = mid + Math.imul(ah4, bl8) | 0;
          hi = hi + Math.imul(ah4, bh8) | 0;
          lo = lo + Math.imul(al3, bl9) | 0;
          mid = mid + Math.imul(al3, bh9) | 0;
          mid = mid + Math.imul(ah3, bl9) | 0;
          hi = hi + Math.imul(ah3, bh9) | 0;
          var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
          w12 &= 67108863;
          lo = Math.imul(al9, bl4);
          mid = Math.imul(al9, bh4);
          mid = mid + Math.imul(ah9, bl4) | 0;
          hi = Math.imul(ah9, bh4);
          lo = lo + Math.imul(al8, bl5) | 0;
          mid = mid + Math.imul(al8, bh5) | 0;
          mid = mid + Math.imul(ah8, bl5) | 0;
          hi = hi + Math.imul(ah8, bh5) | 0;
          lo = lo + Math.imul(al7, bl6) | 0;
          mid = mid + Math.imul(al7, bh6) | 0;
          mid = mid + Math.imul(ah7, bl6) | 0;
          hi = hi + Math.imul(ah7, bh6) | 0;
          lo = lo + Math.imul(al6, bl7) | 0;
          mid = mid + Math.imul(al6, bh7) | 0;
          mid = mid + Math.imul(ah6, bl7) | 0;
          hi = hi + Math.imul(ah6, bh7) | 0;
          lo = lo + Math.imul(al5, bl8) | 0;
          mid = mid + Math.imul(al5, bh8) | 0;
          mid = mid + Math.imul(ah5, bl8) | 0;
          hi = hi + Math.imul(ah5, bh8) | 0;
          lo = lo + Math.imul(al4, bl9) | 0;
          mid = mid + Math.imul(al4, bh9) | 0;
          mid = mid + Math.imul(ah4, bl9) | 0;
          hi = hi + Math.imul(ah4, bh9) | 0;
          var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
          w13 &= 67108863;
          lo = Math.imul(al9, bl5);
          mid = Math.imul(al9, bh5);
          mid = mid + Math.imul(ah9, bl5) | 0;
          hi = Math.imul(ah9, bh5);
          lo = lo + Math.imul(al8, bl6) | 0;
          mid = mid + Math.imul(al8, bh6) | 0;
          mid = mid + Math.imul(ah8, bl6) | 0;
          hi = hi + Math.imul(ah8, bh6) | 0;
          lo = lo + Math.imul(al7, bl7) | 0;
          mid = mid + Math.imul(al7, bh7) | 0;
          mid = mid + Math.imul(ah7, bl7) | 0;
          hi = hi + Math.imul(ah7, bh7) | 0;
          lo = lo + Math.imul(al6, bl8) | 0;
          mid = mid + Math.imul(al6, bh8) | 0;
          mid = mid + Math.imul(ah6, bl8) | 0;
          hi = hi + Math.imul(ah6, bh8) | 0;
          lo = lo + Math.imul(al5, bl9) | 0;
          mid = mid + Math.imul(al5, bh9) | 0;
          mid = mid + Math.imul(ah5, bl9) | 0;
          hi = hi + Math.imul(ah5, bh9) | 0;
          var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
          w14 &= 67108863;
          lo = Math.imul(al9, bl6);
          mid = Math.imul(al9, bh6);
          mid = mid + Math.imul(ah9, bl6) | 0;
          hi = Math.imul(ah9, bh6);
          lo = lo + Math.imul(al8, bl7) | 0;
          mid = mid + Math.imul(al8, bh7) | 0;
          mid = mid + Math.imul(ah8, bl7) | 0;
          hi = hi + Math.imul(ah8, bh7) | 0;
          lo = lo + Math.imul(al7, bl8) | 0;
          mid = mid + Math.imul(al7, bh8) | 0;
          mid = mid + Math.imul(ah7, bl8) | 0;
          hi = hi + Math.imul(ah7, bh8) | 0;
          lo = lo + Math.imul(al6, bl9) | 0;
          mid = mid + Math.imul(al6, bh9) | 0;
          mid = mid + Math.imul(ah6, bl9) | 0;
          hi = hi + Math.imul(ah6, bh9) | 0;
          var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
          w15 &= 67108863;
          lo = Math.imul(al9, bl7);
          mid = Math.imul(al9, bh7);
          mid = mid + Math.imul(ah9, bl7) | 0;
          hi = Math.imul(ah9, bh7);
          lo = lo + Math.imul(al8, bl8) | 0;
          mid = mid + Math.imul(al8, bh8) | 0;
          mid = mid + Math.imul(ah8, bl8) | 0;
          hi = hi + Math.imul(ah8, bh8) | 0;
          lo = lo + Math.imul(al7, bl9) | 0;
          mid = mid + Math.imul(al7, bh9) | 0;
          mid = mid + Math.imul(ah7, bl9) | 0;
          hi = hi + Math.imul(ah7, bh9) | 0;
          var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
          w16 &= 67108863;
          lo = Math.imul(al9, bl8);
          mid = Math.imul(al9, bh8);
          mid = mid + Math.imul(ah9, bl8) | 0;
          hi = Math.imul(ah9, bh8);
          lo = lo + Math.imul(al8, bl9) | 0;
          mid = mid + Math.imul(al8, bh9) | 0;
          mid = mid + Math.imul(ah8, bl9) | 0;
          hi = hi + Math.imul(ah8, bh9) | 0;
          var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
          w17 &= 67108863;
          lo = Math.imul(al9, bl9);
          mid = Math.imul(al9, bh9);
          mid = mid + Math.imul(ah9, bl9) | 0;
          hi = Math.imul(ah9, bh9);
          var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
          c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
          w18 &= 67108863;
          o[0] = w0;
          o[1] = w1;
          o[2] = w2;
          o[3] = w3;
          o[4] = w4;
          o[5] = w5;
          o[6] = w6;
          o[7] = w7;
          o[8] = w8;
          o[9] = w9;
          o[10] = w10;
          o[11] = w11;
          o[12] = w12;
          o[13] = w13;
          o[14] = w14;
          o[15] = w15;
          o[16] = w16;
          o[17] = w17;
          o[18] = w18;
          if (c !== 0) {
            o[19] = c;
            out.length++;
          }
          return out;
        };
        if (!Math.imul) {
          comb10MulTo = smallMulTo;
        }
        function bigMulTo(self2, num, out) {
          out.negative = num.negative ^ self2.negative;
          out.length = self2.length + num.length;
          var carry = 0;
          var hncarry = 0;
          for (var k = 0; k < out.length - 1; k++) {
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for (var j = Math.max(0, k - self2.length + 1); j <= maxJ; j++) {
              var i = k - j;
              var a = self2.words[i] | 0;
              var b = num.words[j] | 0;
              var r = a * b;
              var lo = r & 67108863;
              ncarry = ncarry + (r / 67108864 | 0) | 0;
              lo = lo + rword | 0;
              rword = lo & 67108863;
              ncarry = ncarry + (lo >>> 26) | 0;
              hncarry += ncarry >>> 26;
              ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
          }
          if (carry !== 0) {
            out.words[k] = carry;
          } else {
            out.length--;
          }
          return out._strip();
        }
        function jumboMulTo(self2, num, out) {
          return bigMulTo(self2, num, out);
        }
        BN.prototype.mulTo = function mulTo(num, out) {
          var res;
          var len = this.length + num.length;
          if (this.length === 10 && num.length === 10) {
            res = comb10MulTo(this, num, out);
          } else if (len < 63) {
            res = smallMulTo(this, num, out);
          } else if (len < 1024) {
            res = bigMulTo(this, num, out);
          } else {
            res = jumboMulTo(this, num, out);
          }
          return res;
        };
        function FFTM(x, y) {
          this.x = x;
          this.y = y;
        }
        FFTM.prototype.makeRBT = function makeRBT(N) {
          var t = new Array(N);
          var l = BN.prototype._countBits(N) - 1;
          for (var i = 0; i < N; i++) {
            t[i] = this.revBin(i, l, N);
          }
          return t;
        };
        FFTM.prototype.revBin = function revBin(x, l, N) {
          if (x === 0 || x === N - 1)
            return x;
          var rb = 0;
          for (var i = 0; i < l; i++) {
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
          }
          return rb;
        };
        FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
          for (var i = 0; i < N; i++) {
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
          }
        };
        FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
          this.permute(rbt, rws, iws, rtws, itws, N);
          for (var s = 1; s < N; s <<= 1) {
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for (var p = 0; p < N; p += l) {
              var rtwdf_ = rtwdf;
              var itwdf_ = itwdf;
              for (var j = 0; j < s; j++) {
                var re = rtws[p + j];
                var ie = itws[p + j];
                var ro = rtws[p + j + s];
                var io = itws[p + j + s];
                var rx = rtwdf_ * ro - itwdf_ * io;
                io = rtwdf_ * io + itwdf_ * ro;
                ro = rx;
                rtws[p + j] = re + ro;
                itws[p + j] = ie + io;
                rtws[p + j + s] = re - ro;
                itws[p + j + s] = ie - io;
                if (j !== l) {
                  rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                  itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                  rtwdf_ = rx;
                }
              }
            }
          }
        };
        FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
          var N = Math.max(m, n) | 1;
          var odd = N & 1;
          var i = 0;
          for (N = N / 2 | 0; N; N = N >>> 1) {
            i++;
          }
          return 1 << i + 1 + odd;
        };
        FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
          if (N <= 1)
            return;
          for (var i = 0; i < N / 2; i++) {
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
          }
        };
        FFTM.prototype.normalize13b = function normalize13b(ws, N) {
          var carry = 0;
          for (var i = 0; i < N / 2; i++) {
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) {
              carry = 0;
            } else {
              carry = w / 67108864 | 0;
            }
          }
          return ws;
        };
        FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
          var carry = 0;
          for (var i = 0; i < len; i++) {
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
          }
          for (i = 2 * len; i < N; ++i) {
            rws[i] = 0;
          }
          assert(carry === 0);
          assert((carry & ~8191) === 0);
        };
        FFTM.prototype.stub = function stub(N) {
          var ph = new Array(N);
          for (var i = 0; i < N; i++) {
            ph[i] = 0;
          }
          return ph;
        };
        FFTM.prototype.mulp = function mulp(x, y, out) {
          var N = 2 * this.guessLen13b(x.length, y.length);
          var rbt = this.makeRBT(N);
          var _ = this.stub(N);
          var rws = new Array(N);
          var rwst = new Array(N);
          var iwst = new Array(N);
          var nrws = new Array(N);
          var nrwst = new Array(N);
          var niwst = new Array(N);
          var rmws = out.words;
          rmws.length = N;
          this.convert13b(x.words, x.length, rws, N);
          this.convert13b(y.words, y.length, nrws, N);
          this.transform(rws, _, rwst, iwst, N, rbt);
          this.transform(nrws, _, nrwst, niwst, N, rbt);
          for (var i = 0; i < N; i++) {
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
          }
          this.conjugate(rwst, iwst, N);
          this.transform(rwst, iwst, rmws, _, N, rbt);
          this.conjugate(rmws, _, N);
          this.normalize13b(rmws, N);
          out.negative = x.negative ^ y.negative;
          out.length = x.length + y.length;
          return out._strip();
        };
        BN.prototype.mul = function mul(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return this.mulTo(num, out);
        };
        BN.prototype.mulf = function mulf(num) {
          var out = new BN(null);
          out.words = new Array(this.length + num.length);
          return jumboMulTo(this, num, out);
        };
        BN.prototype.imul = function imul(num) {
          return this.clone().mulTo(num, this);
        };
        BN.prototype.imuln = function imuln(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(typeof num === "number");
          assert(num < 67108864);
          var carry = 0;
          for (var i = 0; i < this.length; i++) {
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.muln = function muln(num) {
          return this.clone().imuln(num);
        };
        BN.prototype.sqr = function sqr() {
          return this.mul(this);
        };
        BN.prototype.isqr = function isqr() {
          return this.imul(this.clone());
        };
        BN.prototype.pow = function pow(num) {
          var w = toBitArray(num);
          if (w.length === 0)
            return new BN(1);
          var res = this;
          for (var i = 0; i < w.length; i++, res = res.sqr()) {
            if (w[i] !== 0)
              break;
          }
          if (++i < w.length) {
            for (var q = res.sqr(); i < w.length; i++, q = q.sqr()) {
              if (w[i] === 0)
                continue;
              res = res.mul(q);
            }
          }
          return res;
        };
        BN.prototype.iushln = function iushln(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          var carryMask = 67108863 >>> 26 - r << 26 - r;
          var i;
          if (r !== 0) {
            var carry = 0;
            for (i = 0; i < this.length; i++) {
              var newCarry = this.words[i] & carryMask;
              var c = (this.words[i] | 0) - newCarry << r;
              this.words[i] = c | carry;
              carry = newCarry >>> 26 - r;
            }
            if (carry) {
              this.words[i] = carry;
              this.length++;
            }
          }
          if (s !== 0) {
            for (i = this.length - 1; i >= 0; i--) {
              this.words[i + s] = this.words[i];
            }
            for (i = 0; i < s; i++) {
              this.words[i] = 0;
            }
            this.length += s;
          }
          return this._strip();
        };
        BN.prototype.ishln = function ishln(bits) {
          assert(this.negative === 0);
          return this.iushln(bits);
        };
        BN.prototype.iushrn = function iushrn(bits, hint, extended) {
          assert(typeof bits === "number" && bits >= 0);
          var h;
          if (hint) {
            h = (hint - hint % 26) / 26;
          } else {
            h = 0;
          }
          var r = bits % 26;
          var s = Math.min((bits - r) / 26, this.length);
          var mask = 67108863 ^ 67108863 >>> r << r;
          var maskedWords = extended;
          h -= s;
          h = Math.max(0, h);
          if (maskedWords) {
            for (var i = 0; i < s; i++) {
              maskedWords.words[i] = this.words[i];
            }
            maskedWords.length = s;
          }
          if (s === 0) {
          } else if (this.length > s) {
            this.length -= s;
            for (i = 0; i < this.length; i++) {
              this.words[i] = this.words[i + s];
            }
          } else {
            this.words[0] = 0;
            this.length = 1;
          }
          var carry = 0;
          for (i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--) {
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
          }
          if (maskedWords && carry !== 0) {
            maskedWords.words[maskedWords.length++] = carry;
          }
          if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
          }
          return this._strip();
        };
        BN.prototype.ishrn = function ishrn(bits, hint, extended) {
          assert(this.negative === 0);
          return this.iushrn(bits, hint, extended);
        };
        BN.prototype.shln = function shln(bits) {
          return this.clone().ishln(bits);
        };
        BN.prototype.ushln = function ushln(bits) {
          return this.clone().iushln(bits);
        };
        BN.prototype.shrn = function shrn(bits) {
          return this.clone().ishrn(bits);
        };
        BN.prototype.ushrn = function ushrn(bits) {
          return this.clone().iushrn(bits);
        };
        BN.prototype.testn = function testn(bit) {
          assert(typeof bit === "number" && bit >= 0);
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s)
            return false;
          var w = this.words[s];
          return !!(w & q);
        };
        BN.prototype.imaskn = function imaskn(bits) {
          assert(typeof bits === "number" && bits >= 0);
          var r = bits % 26;
          var s = (bits - r) / 26;
          assert(this.negative === 0, "imaskn works only with positive numbers");
          if (this.length <= s) {
            return this;
          }
          if (r !== 0) {
            s++;
          }
          this.length = Math.min(s, this.length);
          if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
          }
          return this._strip();
        };
        BN.prototype.maskn = function maskn(bits) {
          return this.clone().imaskn(bits);
        };
        BN.prototype.iaddn = function iaddn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.isubn(-num);
          if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
              this.words[0] = num - (this.words[0] | 0);
              this.negative = 0;
              return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
          }
          return this._iaddn(num);
        };
        BN.prototype._iaddn = function _iaddn(num) {
          this.words[0] += num;
          for (var i = 0; i < this.length && this.words[i] >= 67108864; i++) {
            this.words[i] -= 67108864;
            if (i === this.length - 1) {
              this.words[i + 1] = 1;
            } else {
              this.words[i + 1]++;
            }
          }
          this.length = Math.max(this.length, i + 1);
          return this;
        };
        BN.prototype.isubn = function isubn(num) {
          assert(typeof num === "number");
          assert(num < 67108864);
          if (num < 0)
            return this.iaddn(-num);
          if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
          }
          this.words[0] -= num;
          if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
          } else {
            for (var i = 0; i < this.length && this.words[i] < 0; i++) {
              this.words[i] += 67108864;
              this.words[i + 1] -= 1;
            }
          }
          return this._strip();
        };
        BN.prototype.addn = function addn(num) {
          return this.clone().iaddn(num);
        };
        BN.prototype.subn = function subn(num) {
          return this.clone().isubn(num);
        };
        BN.prototype.iabs = function iabs() {
          this.negative = 0;
          return this;
        };
        BN.prototype.abs = function abs() {
          return this.clone().iabs();
        };
        BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul, shift) {
          var len = num.length + shift;
          var i;
          this._expand(len);
          var w;
          var carry = 0;
          for (i = 0; i < num.length; i++) {
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
          }
          for (; i < this.length - shift; i++) {
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
          }
          if (carry === 0)
            return this._strip();
          assert(carry === -1);
          carry = 0;
          for (i = 0; i < this.length; i++) {
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
          }
          this.negative = 1;
          return this._strip();
        };
        BN.prototype._wordDiv = function _wordDiv(num, mode) {
          var shift = this.length - num.length;
          var a = this.clone();
          var b = num;
          var bhi = b.words[b.length - 1] | 0;
          var bhiBits = this._countBits(bhi);
          shift = 26 - bhiBits;
          if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
          }
          var m = a.length - b.length;
          var q;
          if (mode !== "mod") {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for (var i = 0; i < q.length; i++) {
              q.words[i] = 0;
            }
          }
          var diff = a.clone()._ishlnsubmul(b, 1, m);
          if (diff.negative === 0) {
            a = diff;
            if (q) {
              q.words[m] = 1;
            }
          }
          for (var j = m - 1; j >= 0; j--) {
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while (a.negative !== 0) {
              qj--;
              a.negative = 0;
              a._ishlnsubmul(b, 1, j);
              if (!a.isZero()) {
                a.negative ^= 1;
              }
            }
            if (q) {
              q.words[j] = qj;
            }
          }
          if (q) {
            q._strip();
          }
          a._strip();
          if (mode !== "div" && shift !== 0) {
            a.iushrn(shift);
          }
          return {
            div: q || null,
            mod: a
          };
        };
        BN.prototype.divmod = function divmod(num, mode, positive) {
          assert(!num.isZero());
          if (this.isZero()) {
            return {
              div: new BN(0),
              mod: new BN(0)
            };
          }
          var div, mod, res;
          if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.iadd(num);
              }
            }
            return {
              div,
              mod
            };
          }
          if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== "mod") {
              div = res.div.neg();
            }
            return {
              div,
              mod: res.mod
            };
          }
          if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== "div") {
              mod = res.mod.neg();
              if (positive && mod.negative !== 0) {
                mod.isub(num);
              }
            }
            return {
              div: res.div,
              mod
            };
          }
          if (num.length > this.length || this.cmp(num) < 0) {
            return {
              div: new BN(0),
              mod: this
            };
          }
          if (num.length === 1) {
            if (mode === "div") {
              return {
                div: this.divn(num.words[0]),
                mod: null
              };
            }
            if (mode === "mod") {
              return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
              };
            }
            return {
              div: this.divn(num.words[0]),
              mod: new BN(this.modrn(num.words[0]))
            };
          }
          return this._wordDiv(num, mode);
        };
        BN.prototype.div = function div(num) {
          return this.divmod(num, "div", false).div;
        };
        BN.prototype.mod = function mod(num) {
          return this.divmod(num, "mod", false).mod;
        };
        BN.prototype.umod = function umod(num) {
          return this.divmod(num, "mod", true).mod;
        };
        BN.prototype.divRound = function divRound(num) {
          var dm = this.divmod(num);
          if (dm.mod.isZero())
            return dm.div;
          var mod = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
          var half = num.ushrn(1);
          var r2 = num.andln(1);
          var cmp = mod.cmp(half);
          if (cmp < 0 || r2 === 1 && cmp === 0)
            return dm.div;
          return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
        };
        BN.prototype.modrn = function modrn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var p = (1 << 26) % num;
          var acc = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            acc = (p * acc + (this.words[i] | 0)) % num;
          }
          return isNegNum ? -acc : acc;
        };
        BN.prototype.modn = function modn(num) {
          return this.modrn(num);
        };
        BN.prototype.idivn = function idivn(num) {
          var isNegNum = num < 0;
          if (isNegNum)
            num = -num;
          assert(num <= 67108863);
          var carry = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
          }
          this._strip();
          return isNegNum ? this.ineg() : this;
        };
        BN.prototype.divn = function divn(num) {
          return this.clone().idivn(num);
        };
        BN.prototype.egcd = function egcd(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var x = this;
          var y = p.clone();
          if (x.negative !== 0) {
            x = x.umod(p);
          } else {
            x = x.clone();
          }
          var A = new BN(1);
          var B = new BN(0);
          var C = new BN(0);
          var D = new BN(1);
          var g = 0;
          while (x.isEven() && y.isEven()) {
            x.iushrn(1);
            y.iushrn(1);
            ++g;
          }
          var yp = y.clone();
          var xp = x.clone();
          while (!x.isZero()) {
            for (var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              x.iushrn(i);
              while (i-- > 0) {
                if (A.isOdd() || B.isOdd()) {
                  A.iadd(yp);
                  B.isub(xp);
                }
                A.iushrn(1);
                B.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              y.iushrn(j);
              while (j-- > 0) {
                if (C.isOdd() || D.isOdd()) {
                  C.iadd(yp);
                  D.isub(xp);
                }
                C.iushrn(1);
                D.iushrn(1);
              }
            }
            if (x.cmp(y) >= 0) {
              x.isub(y);
              A.isub(C);
              B.isub(D);
            } else {
              y.isub(x);
              C.isub(A);
              D.isub(B);
            }
          }
          return {
            a: C,
            b: D,
            gcd: y.iushln(g)
          };
        };
        BN.prototype._invmp = function _invmp(p) {
          assert(p.negative === 0);
          assert(!p.isZero());
          var a = this;
          var b = p.clone();
          if (a.negative !== 0) {
            a = a.umod(p);
          } else {
            a = a.clone();
          }
          var x1 = new BN(1);
          var x2 = new BN(0);
          var delta = b.clone();
          while (a.cmpn(1) > 0 && b.cmpn(1) > 0) {
            for (var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1)
              ;
            if (i > 0) {
              a.iushrn(i);
              while (i-- > 0) {
                if (x1.isOdd()) {
                  x1.iadd(delta);
                }
                x1.iushrn(1);
              }
            }
            for (var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1)
              ;
            if (j > 0) {
              b.iushrn(j);
              while (j-- > 0) {
                if (x2.isOdd()) {
                  x2.iadd(delta);
                }
                x2.iushrn(1);
              }
            }
            if (a.cmp(b) >= 0) {
              a.isub(b);
              x1.isub(x2);
            } else {
              b.isub(a);
              x2.isub(x1);
            }
          }
          var res;
          if (a.cmpn(1) === 0) {
            res = x1;
          } else {
            res = x2;
          }
          if (res.cmpn(0) < 0) {
            res.iadd(p);
          }
          return res;
        };
        BN.prototype.gcd = function gcd(num) {
          if (this.isZero())
            return num.abs();
          if (num.isZero())
            return this.abs();
          var a = this.clone();
          var b = num.clone();
          a.negative = 0;
          b.negative = 0;
          for (var shift = 0; a.isEven() && b.isEven(); shift++) {
            a.iushrn(1);
            b.iushrn(1);
          }
          do {
            while (a.isEven()) {
              a.iushrn(1);
            }
            while (b.isEven()) {
              b.iushrn(1);
            }
            var r = a.cmp(b);
            if (r < 0) {
              var t = a;
              a = b;
              b = t;
            } else if (r === 0 || b.cmpn(1) === 0) {
              break;
            }
            a.isub(b);
          } while (true);
          return b.iushln(shift);
        };
        BN.prototype.invm = function invm(num) {
          return this.egcd(num).a.umod(num);
        };
        BN.prototype.isEven = function isEven() {
          return (this.words[0] & 1) === 0;
        };
        BN.prototype.isOdd = function isOdd() {
          return (this.words[0] & 1) === 1;
        };
        BN.prototype.andln = function andln(num) {
          return this.words[0] & num;
        };
        BN.prototype.bincn = function bincn(bit) {
          assert(typeof bit === "number");
          var r = bit % 26;
          var s = (bit - r) / 26;
          var q = 1 << r;
          if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
          }
          var carry = q;
          for (var i = s; carry !== 0 && i < this.length; i++) {
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
          }
          if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
          }
          return this;
        };
        BN.prototype.isZero = function isZero() {
          return this.length === 1 && this.words[0] === 0;
        };
        BN.prototype.cmpn = function cmpn(num) {
          var negative = num < 0;
          if (this.negative !== 0 && !negative)
            return -1;
          if (this.negative === 0 && negative)
            return 1;
          this._strip();
          var res;
          if (this.length > 1) {
            res = 1;
          } else {
            if (negative) {
              num = -num;
            }
            assert(num <= 67108863, "Number is too big");
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
          }
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.cmp = function cmp(num) {
          if (this.negative !== 0 && num.negative === 0)
            return -1;
          if (this.negative === 0 && num.negative !== 0)
            return 1;
          var res = this.ucmp(num);
          if (this.negative !== 0)
            return -res | 0;
          return res;
        };
        BN.prototype.ucmp = function ucmp(num) {
          if (this.length > num.length)
            return 1;
          if (this.length < num.length)
            return -1;
          var res = 0;
          for (var i = this.length - 1; i >= 0; i--) {
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b)
              continue;
            if (a < b) {
              res = -1;
            } else if (a > b) {
              res = 1;
            }
            break;
          }
          return res;
        };
        BN.prototype.gtn = function gtn(num) {
          return this.cmpn(num) === 1;
        };
        BN.prototype.gt = function gt(num) {
          return this.cmp(num) === 1;
        };
        BN.prototype.gten = function gten(num) {
          return this.cmpn(num) >= 0;
        };
        BN.prototype.gte = function gte(num) {
          return this.cmp(num) >= 0;
        };
        BN.prototype.ltn = function ltn(num) {
          return this.cmpn(num) === -1;
        };
        BN.prototype.lt = function lt(num) {
          return this.cmp(num) === -1;
        };
        BN.prototype.lten = function lten(num) {
          return this.cmpn(num) <= 0;
        };
        BN.prototype.lte = function lte(num) {
          return this.cmp(num) <= 0;
        };
        BN.prototype.eqn = function eqn(num) {
          return this.cmpn(num) === 0;
        };
        BN.prototype.eq = function eq(num) {
          return this.cmp(num) === 0;
        };
        BN.red = function red(num) {
          return new Red(num);
        };
        BN.prototype.toRed = function toRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          assert(this.negative === 0, "red works only with positives");
          return ctx.convertTo(this)._forceRed(ctx);
        };
        BN.prototype.fromRed = function fromRed() {
          assert(this.red, "fromRed works only with numbers in reduction context");
          return this.red.convertFrom(this);
        };
        BN.prototype._forceRed = function _forceRed(ctx) {
          this.red = ctx;
          return this;
        };
        BN.prototype.forceRed = function forceRed(ctx) {
          assert(!this.red, "Already a number in reduction context");
          return this._forceRed(ctx);
        };
        BN.prototype.redAdd = function redAdd(num) {
          assert(this.red, "redAdd works only with red numbers");
          return this.red.add(this, num);
        };
        BN.prototype.redIAdd = function redIAdd(num) {
          assert(this.red, "redIAdd works only with red numbers");
          return this.red.iadd(this, num);
        };
        BN.prototype.redSub = function redSub(num) {
          assert(this.red, "redSub works only with red numbers");
          return this.red.sub(this, num);
        };
        BN.prototype.redISub = function redISub(num) {
          assert(this.red, "redISub works only with red numbers");
          return this.red.isub(this, num);
        };
        BN.prototype.redShl = function redShl(num) {
          assert(this.red, "redShl works only with red numbers");
          return this.red.shl(this, num);
        };
        BN.prototype.redMul = function redMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.mul(this, num);
        };
        BN.prototype.redIMul = function redIMul(num) {
          assert(this.red, "redMul works only with red numbers");
          this.red._verify2(this, num);
          return this.red.imul(this, num);
        };
        BN.prototype.redSqr = function redSqr() {
          assert(this.red, "redSqr works only with red numbers");
          this.red._verify1(this);
          return this.red.sqr(this);
        };
        BN.prototype.redISqr = function redISqr() {
          assert(this.red, "redISqr works only with red numbers");
          this.red._verify1(this);
          return this.red.isqr(this);
        };
        BN.prototype.redSqrt = function redSqrt() {
          assert(this.red, "redSqrt works only with red numbers");
          this.red._verify1(this);
          return this.red.sqrt(this);
        };
        BN.prototype.redInvm = function redInvm() {
          assert(this.red, "redInvm works only with red numbers");
          this.red._verify1(this);
          return this.red.invm(this);
        };
        BN.prototype.redNeg = function redNeg() {
          assert(this.red, "redNeg works only with red numbers");
          this.red._verify1(this);
          return this.red.neg(this);
        };
        BN.prototype.redPow = function redPow(num) {
          assert(this.red && !num.red, "redPow(normalNum)");
          this.red._verify1(this);
          return this.red.pow(this, num);
        };
        var primes = {
          k256: null,
          p224: null,
          p192: null,
          p25519: null
        };
        function MPrime(name, p) {
          this.name = name;
          this.p = new BN(p, 16);
          this.n = this.p.bitLength();
          this.k = new BN(1).iushln(this.n).isub(this.p);
          this.tmp = this._tmp();
        }
        MPrime.prototype._tmp = function _tmp() {
          var tmp = new BN(null);
          tmp.words = new Array(Math.ceil(this.n / 13));
          return tmp;
        };
        MPrime.prototype.ireduce = function ireduce(num) {
          var r = num;
          var rlen;
          do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
          } while (rlen > this.n);
          var cmp = rlen < this.n ? -1 : r.ucmp(this.p);
          if (cmp === 0) {
            r.words[0] = 0;
            r.length = 1;
          } else if (cmp > 0) {
            r.isub(this.p);
          } else {
            if (r.strip !== void 0) {
              r.strip();
            } else {
              r._strip();
            }
          }
          return r;
        };
        MPrime.prototype.split = function split(input, out) {
          input.iushrn(this.n, 0, out);
        };
        MPrime.prototype.imulK = function imulK(num) {
          return num.imul(this.k);
        };
        function K256() {
          MPrime.call(
            this,
            "k256",
            "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f"
          );
        }
        inherits(K256, MPrime);
        K256.prototype.split = function split(input, output) {
          var mask = 4194303;
          var outLen = Math.min(input.length, 9);
          for (var i = 0; i < outLen; i++) {
            output.words[i] = input.words[i];
          }
          output.length = outLen;
          if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
          }
          var prev = input.words[9];
          output.words[output.length++] = prev & mask;
          for (i = 10; i < input.length; i++) {
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
          }
          prev >>>= 22;
          input.words[i - 10] = prev;
          if (prev === 0 && input.length > 10) {
            input.length -= 10;
          } else {
            input.length -= 9;
          }
        };
        K256.prototype.imulK = function imulK(num) {
          num.words[num.length] = 0;
          num.words[num.length + 1] = 0;
          num.length += 2;
          var lo = 0;
          for (var i = 0; i < num.length; i++) {
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
          }
          if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) {
              num.length--;
            }
          }
          return num;
        };
        function P224() {
          MPrime.call(
            this,
            "p224",
            "ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001"
          );
        }
        inherits(P224, MPrime);
        function P192() {
          MPrime.call(
            this,
            "p192",
            "ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff"
          );
        }
        inherits(P192, MPrime);
        function P25519() {
          MPrime.call(
            this,
            "25519",
            "7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed"
          );
        }
        inherits(P25519, MPrime);
        P25519.prototype.imulK = function imulK(num) {
          var carry = 0;
          for (var i = 0; i < num.length; i++) {
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
          }
          if (carry !== 0) {
            num.words[num.length++] = carry;
          }
          return num;
        };
        BN._prime = function prime(name) {
          if (primes[name])
            return primes[name];
          var prime2;
          if (name === "k256") {
            prime2 = new K256();
          } else if (name === "p224") {
            prime2 = new P224();
          } else if (name === "p192") {
            prime2 = new P192();
          } else if (name === "p25519") {
            prime2 = new P25519();
          } else {
            throw new Error("Unknown prime " + name);
          }
          primes[name] = prime2;
          return prime2;
        };
        function Red(m) {
          if (typeof m === "string") {
            var prime = BN._prime(m);
            this.m = prime.p;
            this.prime = prime;
          } else {
            assert(m.gtn(1), "modulus must be greater than 1");
            this.m = m;
            this.prime = null;
          }
        }
        Red.prototype._verify1 = function _verify1(a) {
          assert(a.negative === 0, "red works only with positives");
          assert(a.red, "red works only with red numbers");
        };
        Red.prototype._verify2 = function _verify2(a, b) {
          assert((a.negative | b.negative) === 0, "red works only with positives");
          assert(
            a.red && a.red === b.red,
            "red works only with red numbers"
          );
        };
        Red.prototype.imod = function imod(a) {
          if (this.prime)
            return this.prime.ireduce(a)._forceRed(this);
          move(a, a.umod(this.m)._forceRed(this));
          return a;
        };
        Red.prototype.neg = function neg(a) {
          if (a.isZero()) {
            return a.clone();
          }
          return this.m.sub(a)._forceRed(this);
        };
        Red.prototype.add = function add(a, b) {
          this._verify2(a, b);
          var res = a.add(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.iadd = function iadd(a, b) {
          this._verify2(a, b);
          var res = a.iadd(b);
          if (res.cmp(this.m) >= 0) {
            res.isub(this.m);
          }
          return res;
        };
        Red.prototype.sub = function sub(a, b) {
          this._verify2(a, b);
          var res = a.sub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Red.prototype.isub = function isub(a, b) {
          this._verify2(a, b);
          var res = a.isub(b);
          if (res.cmpn(0) < 0) {
            res.iadd(this.m);
          }
          return res;
        };
        Red.prototype.shl = function shl(a, num) {
          this._verify1(a);
          return this.imod(a.ushln(num));
        };
        Red.prototype.imul = function imul(a, b) {
          this._verify2(a, b);
          return this.imod(a.imul(b));
        };
        Red.prototype.mul = function mul(a, b) {
          this._verify2(a, b);
          return this.imod(a.mul(b));
        };
        Red.prototype.isqr = function isqr(a) {
          return this.imul(a, a.clone());
        };
        Red.prototype.sqr = function sqr(a) {
          return this.mul(a, a);
        };
        Red.prototype.sqrt = function sqrt(a) {
          if (a.isZero())
            return a.clone();
          var mod3 = this.m.andln(3);
          assert(mod3 % 2 === 1);
          if (mod3 === 3) {
            var pow = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow);
          }
          var q = this.m.subn(1);
          var s = 0;
          while (!q.isZero() && q.andln(1) === 0) {
            s++;
            q.iushrn(1);
          }
          assert(!q.isZero());
          var one = new BN(1).toRed(this);
          var nOne = one.redNeg();
          var lpow = this.m.subn(1).iushrn(1);
          var z = this.m.bitLength();
          z = new BN(2 * z * z).toRed(this);
          while (this.pow(z, lpow).cmp(nOne) !== 0) {
            z.redIAdd(nOne);
          }
          var c = this.pow(z, q);
          var r = this.pow(a, q.addn(1).iushrn(1));
          var t = this.pow(a, q);
          var m = s;
          while (t.cmp(one) !== 0) {
            var tmp = t;
            for (var i = 0; tmp.cmp(one) !== 0; i++) {
              tmp = tmp.redSqr();
            }
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
          }
          return r;
        };
        Red.prototype.invm = function invm(a) {
          var inv = a._invmp(this.m);
          if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
          } else {
            return this.imod(inv);
          }
        };
        Red.prototype.pow = function pow(a, num) {
          if (num.isZero())
            return new BN(1).toRed(this);
          if (num.cmpn(1) === 0)
            return a.clone();
          var windowSize = 4;
          var wnd = new Array(1 << windowSize);
          wnd[0] = new BN(1).toRed(this);
          wnd[1] = a;
          for (var i = 2; i < wnd.length; i++) {
            wnd[i] = this.mul(wnd[i - 1], a);
          }
          var res = wnd[0];
          var current = 0;
          var currentLen = 0;
          var start = num.bitLength() % 26;
          if (start === 0) {
            start = 26;
          }
          for (i = num.length - 1; i >= 0; i--) {
            var word = num.words[i];
            for (var j = start - 1; j >= 0; j--) {
              var bit = word >> j & 1;
              if (res !== wnd[0]) {
                res = this.sqr(res);
              }
              if (bit === 0 && current === 0) {
                currentLen = 0;
                continue;
              }
              current <<= 1;
              current |= bit;
              currentLen++;
              if (currentLen !== windowSize && (i !== 0 || j !== 0))
                continue;
              res = this.mul(res, wnd[current]);
              currentLen = 0;
              current = 0;
            }
            start = 26;
          }
          return res;
        };
        Red.prototype.convertTo = function convertTo(num) {
          var r = num.umod(this.m);
          return r === num ? r.clone() : r;
        };
        Red.prototype.convertFrom = function convertFrom(num) {
          var res = num.clone();
          res.red = null;
          return res;
        };
        BN.mont = function mont(num) {
          return new Mont(num);
        };
        function Mont(m) {
          Red.call(this, m);
          this.shift = this.m.bitLength();
          if (this.shift % 26 !== 0) {
            this.shift += 26 - this.shift % 26;
          }
          this.r = new BN(1).iushln(this.shift);
          this.r2 = this.imod(this.r.sqr());
          this.rinv = this.r._invmp(this.m);
          this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
          this.minv = this.minv.umod(this.r);
          this.minv = this.r.sub(this.minv);
        }
        inherits(Mont, Red);
        Mont.prototype.convertTo = function convertTo(num) {
          return this.imod(num.ushln(this.shift));
        };
        Mont.prototype.convertFrom = function convertFrom(num) {
          var r = this.imod(num.mul(this.rinv));
          r.red = null;
          return r;
        };
        Mont.prototype.imul = function imul(a, b) {
          if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
          }
          var t = a.imul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.mul = function mul(a, b) {
          if (a.isZero() || b.isZero())
            return new BN(0)._forceRed(this);
          var t = a.mul(b);
          var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
          var u = t.isub(c).iushrn(this.shift);
          var res = u;
          if (u.cmp(this.m) >= 0) {
            res = u.isub(this.m);
          } else if (u.cmpn(0) < 0) {
            res = u.iadd(this.m);
          }
          return res._forceRed(this);
        };
        Mont.prototype.invm = function invm(a) {
          var res = this.imod(a._invmp(this.m).mul(this.r2));
          return res._forceRed(this);
        };
      })(typeof module === "undefined" || module, exports);
    }
  });

  // node_modules/@noble/hashes/ripemd160.js
  var require_ripemd160 = __commonJS({
    "node_modules/@noble/hashes/ripemd160.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.ripemd160 = exports.RIPEMD160 = void 0;
      var _sha2_js_1 = require_sha2();
      var utils_js_1 = require_utils2();
      var Rho = /* @__PURE__ */ new Uint8Array([7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8]);
      var Id = /* @__PURE__ */ Uint8Array.from({ length: 16 }, (_, i) => i);
      var Pi = /* @__PURE__ */ Id.map((i) => (9 * i + 5) % 16);
      var idxL = [Id];
      var idxR = [Pi];
      for (let i = 0; i < 4; i++)
        for (let j of [idxL, idxR])
          j.push(j[i].map((k) => Rho[k]));
      var shifts = /* @__PURE__ */ [
        [11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8],
        [12, 13, 11, 15, 6, 9, 9, 7, 12, 15, 11, 13, 7, 8, 7, 7],
        [13, 15, 14, 11, 7, 7, 6, 8, 13, 14, 13, 12, 5, 5, 6, 9],
        [14, 11, 12, 14, 8, 6, 5, 5, 15, 12, 15, 14, 9, 9, 8, 6],
        [15, 12, 13, 13, 9, 5, 8, 6, 14, 11, 12, 11, 8, 6, 5, 5]
      ].map((i) => new Uint8Array(i));
      var shiftsL = /* @__PURE__ */ idxL.map((idx, i) => idx.map((j) => shifts[i][j]));
      var shiftsR = /* @__PURE__ */ idxR.map((idx, i) => idx.map((j) => shifts[i][j]));
      var Kl = /* @__PURE__ */ new Uint32Array([
        0,
        1518500249,
        1859775393,
        2400959708,
        2840853838
      ]);
      var Kr = /* @__PURE__ */ new Uint32Array([
        1352829926,
        1548603684,
        1836072691,
        2053994217,
        0
      ]);
      var rotl = (word, shift) => word << shift | word >>> 32 - shift;
      function f(group, x, y, z) {
        if (group === 0)
          return x ^ y ^ z;
        else if (group === 1)
          return x & y | ~x & z;
        else if (group === 2)
          return (x | ~y) ^ z;
        else if (group === 3)
          return x & z | y & ~z;
        else
          return x ^ (y | ~z);
      }
      var BUF = /* @__PURE__ */ new Uint32Array(16);
      var RIPEMD160 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 20, 8, true);
          this.h0 = 1732584193 | 0;
          this.h1 = 4023233417 | 0;
          this.h2 = 2562383102 | 0;
          this.h3 = 271733878 | 0;
          this.h4 = 3285377520 | 0;
        }
        get() {
          const { h0, h1, h2, h3, h4 } = this;
          return [h0, h1, h2, h3, h4];
        }
        set(h0, h1, h2, h3, h4) {
          this.h0 = h0 | 0;
          this.h1 = h1 | 0;
          this.h2 = h2 | 0;
          this.h3 = h3 | 0;
          this.h4 = h4 | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            BUF[i] = view.getUint32(offset, true);
          let al = this.h0 | 0, ar = al, bl = this.h1 | 0, br = bl, cl = this.h2 | 0, cr = cl, dl = this.h3 | 0, dr = dl, el = this.h4 | 0, er = el;
          for (let group = 0; group < 5; group++) {
            const rGroup = 4 - group;
            const hbl = Kl[group], hbr = Kr[group];
            const rl = idxL[group], rr = idxR[group];
            const sl = shiftsL[group], sr = shiftsR[group];
            for (let i = 0; i < 16; i++) {
              const tl = rotl(al + f(group, bl, cl, dl) + BUF[rl[i]] + hbl, sl[i]) + el | 0;
              al = el, el = dl, dl = rotl(cl, 10) | 0, cl = bl, bl = tl;
            }
            for (let i = 0; i < 16; i++) {
              const tr = rotl(ar + f(rGroup, br, cr, dr) + BUF[rr[i]] + hbr, sr[i]) + er | 0;
              ar = er, er = dr, dr = rotl(cr, 10) | 0, cr = br, br = tr;
            }
          }
          this.set(this.h1 + cl + dr | 0, this.h2 + dl + er | 0, this.h3 + el + ar | 0, this.h4 + al + br | 0, this.h0 + bl + cr | 0);
        }
        roundClean() {
          BUF.fill(0);
        }
        destroy() {
          this.destroyed = true;
          this.buffer.fill(0);
          this.set(0, 0, 0, 0, 0);
        }
      };
      exports.RIPEMD160 = RIPEMD160;
      exports.ripemd160 = (0, utils_js_1.wrapConstructor)(() => new RIPEMD160());
    }
  });

  // node_modules/test-test-test-hd-wallet/src/protocol/policy.js
  var require_policy = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/protocol/policy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.getRate = exports.getRoundFee = exports.getMinFee = exports.BLOCK_PRIORITY_THRESHOLD = exports.BLOCK_PRIORITY_WEIGHT = exports.PRIVKEY_SIZE = exports.PUBKEY_SIZE = exports.SIGNATURE_SIZE = exports.MIN_BLOCK_WEIGHT = exports.MEMPOOL_MAX_ORPHANS = exports.MEMPOOL_EXPIRY_TIME = exports.MEMPOOL_MAX_SIZE = exports.MEMPOOL_MAX_ANCESTORS = exports.MAX_P2WSH_SIZE = exports.MAX_P2WSH_PUSH = exports.MAX_P2WSH_STACK = exports.MAX_OP_RETURN = exports.MAX_OP_RETURN_BYTES = exports.MAX_P2SH_SIGOPS = exports.FREE_THRESHOLD = exports.BARE_MULTISIG = exports.MIN_RELAY = exports.BYTES_PER_SIGOP = exports.MAX_TX_SIGOPS_COST = exports.MAX_TX_SIGOPS = exports.MAX_TX_WEIGHT = exports.MAX_BLOCK_WEIGHT = exports.MAX_TX_SIZE = exports.MAX_TX_VERSION = void 0;
      var consensus_1 = require_consensus();
      exports.MAX_TX_VERSION = 2;
      exports.MAX_TX_SIZE = consensus_1.MAX_BLOCK_SIZE / 10;
      exports.MAX_BLOCK_WEIGHT = 6e6 * consensus_1.WITNESS_SCALE_FACTOR;
      exports.MAX_TX_WEIGHT = exports.MAX_BLOCK_WEIGHT / 10;
      exports.MAX_TX_SIGOPS = consensus_1.MAX_BLOCK_SIGOPS / 5;
      exports.MAX_TX_SIGOPS_COST = consensus_1.MAX_BLOCK_SIGOPS_COST / 5;
      exports.BYTES_PER_SIGOP = 20;
      exports.MIN_RELAY = 1e3;
      exports.BARE_MULTISIG = true;
      exports.FREE_THRESHOLD = consensus_1.COIN * 144 / 250;
      exports.MAX_P2SH_SIGOPS = 15;
      exports.MAX_OP_RETURN_BYTES = 83;
      exports.MAX_OP_RETURN = 80;
      exports.MAX_P2WSH_STACK = 100;
      exports.MAX_P2WSH_PUSH = 80;
      exports.MAX_P2WSH_SIZE = 3600;
      exports.MEMPOOL_MAX_ANCESTORS = 25;
      exports.MEMPOOL_MAX_SIZE = 100 * 1e6;
      exports.MEMPOOL_EXPIRY_TIME = 72 * 60 * 60;
      exports.MEMPOOL_MAX_ORPHANS = 100;
      exports.MIN_BLOCK_WEIGHT = 0;
      exports.SIGNATURE_SIZE = 690;
      exports.PUBKEY_SIZE = 898;
      exports.PRIVKEY_SIZE = 1281;
      exports.BLOCK_PRIORITY_WEIGHT = 0;
      exports.BLOCK_PRIORITY_THRESHOLD = exports.FREE_THRESHOLD;
      function getMinFee(size, rate) {
        if (rate === void 0)
          rate = exports.MIN_RELAY;
        if (size === 0 || size === void 0)
          return 0;
        let fee = Math.floor(rate * size / 1e3);
        if (fee === 0 && rate > 0)
          fee = rate;
        return fee;
      }
      exports.getMinFee = getMinFee;
      function getRoundFee(size, rate) {
        if (rate === void 0)
          rate = exports.MIN_RELAY;
        if (size === 0 || size === void 0)
          return 0;
        let fee = rate * Math.ceil(size / 1e3);
        if (fee === 0 && rate > 0)
          fee = rate;
        return fee;
      }
      exports.getRoundFee = getRoundFee;
      function getRate(size, fee) {
        if (size === 0)
          return 0;
        return Math.floor(fee * 1e3 / size);
      }
      exports.getRate = getRate;
    }
  });

  // node_modules/@noble/hashes/sha256.js
  var require_sha256 = __commonJS({
    "node_modules/@noble/hashes/sha256.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha224 = exports.sha256 = void 0;
      var _sha2_js_1 = require_sha2();
      var utils_js_1 = require_utils2();
      var Chi = (a, b, c) => a & b ^ ~a & c;
      var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
      var SHA256_K = /* @__PURE__ */ new Uint32Array([
        1116352408,
        1899447441,
        3049323471,
        3921009573,
        961987163,
        1508970993,
        2453635748,
        2870763221,
        3624381080,
        310598401,
        607225278,
        1426881987,
        1925078388,
        2162078206,
        2614888103,
        3248222580,
        3835390401,
        4022224774,
        264347078,
        604807628,
        770255983,
        1249150122,
        1555081692,
        1996064986,
        2554220882,
        2821834349,
        2952996808,
        3210313671,
        3336571891,
        3584528711,
        113926993,
        338241895,
        666307205,
        773529912,
        1294757372,
        1396182291,
        1695183700,
        1986661051,
        2177026350,
        2456956037,
        2730485921,
        2820302411,
        3259730800,
        3345764771,
        3516065817,
        3600352804,
        4094571909,
        275423344,
        430227734,
        506948616,
        659060556,
        883997877,
        958139571,
        1322822218,
        1537002063,
        1747873779,
        1955562222,
        2024104815,
        2227730452,
        2361852424,
        2428436474,
        2756734187,
        3204031479,
        3329325298
      ]);
      var IV = /* @__PURE__ */ new Uint32Array([
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
      ]);
      var SHA256_W = /* @__PURE__ */ new Uint32Array(64);
      var SHA256 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 32, 8, false);
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
          this.F = IV[5] | 0;
          this.G = IV[6] | 0;
          this.H = IV[7] | 0;
        }
        get() {
          const { A, B, C, D, E, F, G, H } = this;
          return [A, B, C, D, E, F, G, H];
        }
        // prettier-ignore
        set(A, B, C, D, E, F, G, H) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
          this.F = F | 0;
          this.G = G | 0;
          this.H = H | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            SHA256_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ W15 >>> 3;
            const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ W2 >>> 10;
            SHA256_W[i] = s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16] | 0;
          }
          let { A, B, C, D, E, F, G, H } = this;
          for (let i = 0; i < 64; i++) {
            const sigma1 = (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
            const T1 = H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i] | 0;
            const sigma0 = (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
            const T2 = sigma0 + Maj(A, B, C) | 0;
            H = G;
            G = F;
            F = E;
            E = D + T1 | 0;
            D = C;
            C = B;
            B = A;
            A = T1 + T2 | 0;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          F = F + this.F | 0;
          G = G + this.G | 0;
          H = H + this.H | 0;
          this.set(A, B, C, D, E, F, G, H);
        }
        roundClean() {
          SHA256_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      var SHA224 = class extends SHA256 {
        constructor() {
          super();
          this.A = 3238371032 | 0;
          this.B = 914150663 | 0;
          this.C = 812702999 | 0;
          this.D = 4144912697 | 0;
          this.E = 4290775857 | 0;
          this.F = 1750603025 | 0;
          this.G = 1694076839 | 0;
          this.H = 3204075428 | 0;
          this.outputLen = 28;
        }
      };
      exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA256());
      exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA224());
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/common.js
  var require_common = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/common.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.assert = exports.hash256 = exports.hash160 = exports.SEED_SALT = exports.ZERO_PRIVKEY = exports.ZERO_KEY = exports.MAX_ENTROPY = exports.MIN_ENTROPY = void 0;
      var ripemd160_1 = require_ripemd160();
      var policy_1 = require_policy();
      var sha256_1 = require_sha256();
      var utils_1 = require_utils2();
      exports.MIN_ENTROPY = 128;
      exports.MAX_ENTROPY = 512;
      exports.ZERO_KEY = new Uint8Array(policy_1.PUBKEY_SIZE);
      exports.ZERO_PRIVKEY = new Uint8Array(policy_1.PRIVKEY_SIZE);
      exports.SEED_SALT = (0, utils_1.utf8ToBytes)("Tidecoin seed");
      var hash160 = (value) => (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(value));
      exports.hash160 = hash160;
      var hash256 = (value) => (0, sha256_1.sha256)((0, sha256_1.sha256)(value));
      exports.hash256 = hash256;
      var assert = (exp, message) => {
        if (exp)
          return true;
        throw new Error(message);
      };
      exports.assert = assert;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/protocol/consensus.js
  var require_consensus = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/protocol/consensus.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.hasBit = exports.getReward = exports.verifyPOW = exports.toCompact = exports.fromCompact = exports.ZERO_FALCON_HASH = exports.ZERO_HASH = exports.BIP16_TIME = exports.MAX_MULTISIG_PUBKEYS = exports.MAX_SCRIPT_OPS = exports.MAX_SCRIPT_PUSH = exports.MAX_SCRIPT_STACK = exports.MAX_SCRIPT_SIZE = exports.SEQUENCE_MASK = exports.SEQUENCE_GRANULARITY = exports.SEQUENCE_TYPE_FLAG = exports.SEQUENCE_DISABLE_FLAG = exports.LOCKTIME_THRESHOLD = exports.WITNESS_SCALE_FACTOR = exports.COINBASE_MATURITY = exports.VERSION_TOP_MASK = exports.VERSION_TOP_BITS = exports.MEDIAN_TIMESPAN = exports.MAX_BLOCK_SIGOPS_COST = exports.MAX_BLOCK_SIGOPS = exports.MAX_BLOCK_WEIGHT = exports.MAX_RAW_BLOCK_SIZE = exports.MAX_BLOCK_SIZE = exports.HALF_REWARD = exports.BASE_REWARD = exports.MAX_MONEY = exports.COIN = void 0;
      var bn_js_1 = __importDefault(require_bn());
      var common_1 = require_common();
      exports.COIN = 1e8;
      exports.MAX_MONEY = 21e6 * exports.COIN;
      exports.BASE_REWARD = 40 * exports.COIN;
      exports.HALF_REWARD = Math.floor(exports.BASE_REWARD / 2);
      exports.MAX_BLOCK_SIZE = 6e6;
      exports.MAX_RAW_BLOCK_SIZE = 8e6;
      exports.MAX_BLOCK_WEIGHT = 8e6;
      exports.MAX_BLOCK_SIGOPS = 1e6 / 50;
      exports.MAX_BLOCK_SIGOPS_COST = 8e4;
      exports.MEDIAN_TIMESPAN = 11;
      exports.VERSION_TOP_BITS = 536870912;
      exports.VERSION_TOP_MASK = 3758096384;
      exports.COINBASE_MATURITY = 100;
      exports.WITNESS_SCALE_FACTOR = 4;
      exports.LOCKTIME_THRESHOLD = 5e8;
      exports.SEQUENCE_DISABLE_FLAG = 1 << 31 >>> 0;
      exports.SEQUENCE_TYPE_FLAG = 1 << 22;
      exports.SEQUENCE_GRANULARITY = 9;
      exports.SEQUENCE_MASK = 65535;
      exports.MAX_SCRIPT_SIZE = 1e5;
      exports.MAX_SCRIPT_STACK = 2e3;
      exports.MAX_SCRIPT_PUSH = 1897;
      exports.MAX_SCRIPT_OPS = 201;
      exports.MAX_MULTISIG_PUBKEYS = 20;
      exports.BIP16_TIME = 1333238400;
      exports.ZERO_HASH = new Uint8Array(32);
      exports.ZERO_FALCON_HASH = new Uint8Array(48);
      function fromCompact(compact) {
        if (compact === 0)
          return new bn_js_1.default(0);
        const exponent = compact >>> 24;
        const negative = compact >>> 23 & 1;
        let mantissa = compact & 8388607;
        let num;
        if (exponent <= 3) {
          mantissa >>>= 8 * (3 - exponent);
          num = new bn_js_1.default(mantissa);
        } else {
          num = new bn_js_1.default(mantissa);
          num.iushln(8 * (exponent - 3));
        }
        if (negative)
          num.ineg();
        return num;
      }
      exports.fromCompact = fromCompact;
      function toCompact(num) {
        if (num.isZero())
          return 0;
        let exponent = num.byteLength();
        let mantissa;
        if (exponent <= 3) {
          mantissa = num.toNumber();
          mantissa <<= 8 * (3 - exponent);
        } else {
          mantissa = num.ushrn(8 * (exponent - 3)).toNumber();
        }
        if (mantissa & 8388608) {
          mantissa >>= 8;
          exponent++;
        }
        let compact = exponent << 24 | mantissa;
        if (num.isNeg())
          compact |= 8388608;
        compact >>>= 0;
        return compact;
      }
      exports.toCompact = toCompact;
      function verifyPOW(hash, bits) {
        const target = fromCompact(bits);
        if (target.isNeg() || target.isZero())
          return false;
        const num = new bn_js_1.default(hash, "le");
        if (num.cmp(target) > 0)
          return false;
        return true;
      }
      exports.verifyPOW = verifyPOW;
      function getReward(height, interval) {
        (0, common_1.assert)(height >= 0, "Bad height for reward.");
        const halvings = Math.floor(height / interval);
        if (halvings >= 33)
          return 0;
        if (halvings === 0)
          return exports.BASE_REWARD;
        return exports.HALF_REWARD >>> halvings - 1;
      }
      exports.getReward = getReward;
      function hasBit(version, bit) {
        const TOP_MASK = exports.VERSION_TOP_MASK;
        const TOP_BITS = exports.VERSION_TOP_BITS;
        const bits = (version & TOP_MASK) >>> 0;
        const mask = 1 << bit;
        return bits === TOP_BITS && (version & mask) !== 0;
      }
      exports.hasBit = hasBit;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/types.js
  var require_types = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.DISALLOWED_CHILD_METHODS = void 0;
      exports.DISALLOWED_CHILD_METHODS = [
        "deserialize",
        "serialize",
        "generateRandomMnemonic",
        "init",
        "getAccounts",
        "type"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/chinese-simplified.js
  var require_chinese_simplified = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/chinese-simplified.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "\u7684",
        "\u4E00",
        "\u662F",
        "\u5728",
        "\u4E0D",
        "\u4E86",
        "\u6709",
        "\u548C",
        "\u4EBA",
        "\u8FD9",
        "\u4E2D",
        "\u5927",
        "\u4E3A",
        "\u4E0A",
        "\u4E2A",
        "\u56FD",
        "\u6211",
        "\u4EE5",
        "\u8981",
        "\u4ED6",
        "\u65F6",
        "\u6765",
        "\u7528",
        "\u4EEC",
        "\u751F",
        "\u5230",
        "\u4F5C",
        "\u5730",
        "\u4E8E",
        "\u51FA",
        "\u5C31",
        "\u5206",
        "\u5BF9",
        "\u6210",
        "\u4F1A",
        "\u53EF",
        "\u4E3B",
        "\u53D1",
        "\u5E74",
        "\u52A8",
        "\u540C",
        "\u5DE5",
        "\u4E5F",
        "\u80FD",
        "\u4E0B",
        "\u8FC7",
        "\u5B50",
        "\u8BF4",
        "\u4EA7",
        "\u79CD",
        "\u9762",
        "\u800C",
        "\u65B9",
        "\u540E",
        "\u591A",
        "\u5B9A",
        "\u884C",
        "\u5B66",
        "\u6CD5",
        "\u6240",
        "\u6C11",
        "\u5F97",
        "\u7ECF",
        "\u5341",
        "\u4E09",
        "\u4E4B",
        "\u8FDB",
        "\u7740",
        "\u7B49",
        "\u90E8",
        "\u5EA6",
        "\u5BB6",
        "\u7535",
        "\u529B",
        "\u91CC",
        "\u5982",
        "\u6C34",
        "\u5316",
        "\u9AD8",
        "\u81EA",
        "\u4E8C",
        "\u7406",
        "\u8D77",
        "\u5C0F",
        "\u7269",
        "\u73B0",
        "\u5B9E",
        "\u52A0",
        "\u91CF",
        "\u90FD",
        "\u4E24",
        "\u4F53",
        "\u5236",
        "\u673A",
        "\u5F53",
        "\u4F7F",
        "\u70B9",
        "\u4ECE",
        "\u4E1A",
        "\u672C",
        "\u53BB",
        "\u628A",
        "\u6027",
        "\u597D",
        "\u5E94",
        "\u5F00",
        "\u5B83",
        "\u5408",
        "\u8FD8",
        "\u56E0",
        "\u7531",
        "\u5176",
        "\u4E9B",
        "\u7136",
        "\u524D",
        "\u5916",
        "\u5929",
        "\u653F",
        "\u56DB",
        "\u65E5",
        "\u90A3",
        "\u793E",
        "\u4E49",
        "\u4E8B",
        "\u5E73",
        "\u5F62",
        "\u76F8",
        "\u5168",
        "\u8868",
        "\u95F4",
        "\u6837",
        "\u4E0E",
        "\u5173",
        "\u5404",
        "\u91CD",
        "\u65B0",
        "\u7EBF",
        "\u5185",
        "\u6570",
        "\u6B63",
        "\u5FC3",
        "\u53CD",
        "\u4F60",
        "\u660E",
        "\u770B",
        "\u539F",
        "\u53C8",
        "\u4E48",
        "\u5229",
        "\u6BD4",
        "\u6216",
        "\u4F46",
        "\u8D28",
        "\u6C14",
        "\u7B2C",
        "\u5411",
        "\u9053",
        "\u547D",
        "\u6B64",
        "\u53D8",
        "\u6761",
        "\u53EA",
        "\u6CA1",
        "\u7ED3",
        "\u89E3",
        "\u95EE",
        "\u610F",
        "\u5EFA",
        "\u6708",
        "\u516C",
        "\u65E0",
        "\u7CFB",
        "\u519B",
        "\u5F88",
        "\u60C5",
        "\u8005",
        "\u6700",
        "\u7ACB",
        "\u4EE3",
        "\u60F3",
        "\u5DF2",
        "\u901A",
        "\u5E76",
        "\u63D0",
        "\u76F4",
        "\u9898",
        "\u515A",
        "\u7A0B",
        "\u5C55",
        "\u4E94",
        "\u679C",
        "\u6599",
        "\u8C61",
        "\u5458",
        "\u9769",
        "\u4F4D",
        "\u5165",
        "\u5E38",
        "\u6587",
        "\u603B",
        "\u6B21",
        "\u54C1",
        "\u5F0F",
        "\u6D3B",
        "\u8BBE",
        "\u53CA",
        "\u7BA1",
        "\u7279",
        "\u4EF6",
        "\u957F",
        "\u6C42",
        "\u8001",
        "\u5934",
        "\u57FA",
        "\u8D44",
        "\u8FB9",
        "\u6D41",
        "\u8DEF",
        "\u7EA7",
        "\u5C11",
        "\u56FE",
        "\u5C71",
        "\u7EDF",
        "\u63A5",
        "\u77E5",
        "\u8F83",
        "\u5C06",
        "\u7EC4",
        "\u89C1",
        "\u8BA1",
        "\u522B",
        "\u5979",
        "\u624B",
        "\u89D2",
        "\u671F",
        "\u6839",
        "\u8BBA",
        "\u8FD0",
        "\u519C",
        "\u6307",
        "\u51E0",
        "\u4E5D",
        "\u533A",
        "\u5F3A",
        "\u653E",
        "\u51B3",
        "\u897F",
        "\u88AB",
        "\u5E72",
        "\u505A",
        "\u5FC5",
        "\u6218",
        "\u5148",
        "\u56DE",
        "\u5219",
        "\u4EFB",
        "\u53D6",
        "\u636E",
        "\u5904",
        "\u961F",
        "\u5357",
        "\u7ED9",
        "\u8272",
        "\u5149",
        "\u95E8",
        "\u5373",
        "\u4FDD",
        "\u6CBB",
        "\u5317",
        "\u9020",
        "\u767E",
        "\u89C4",
        "\u70ED",
        "\u9886",
        "\u4E03",
        "\u6D77",
        "\u53E3",
        "\u4E1C",
        "\u5BFC",
        "\u5668",
        "\u538B",
        "\u5FD7",
        "\u4E16",
        "\u91D1",
        "\u589E",
        "\u4E89",
        "\u6D4E",
        "\u9636",
        "\u6CB9",
        "\u601D",
        "\u672F",
        "\u6781",
        "\u4EA4",
        "\u53D7",
        "\u8054",
        "\u4EC0",
        "\u8BA4",
        "\u516D",
        "\u5171",
        "\u6743",
        "\u6536",
        "\u8BC1",
        "\u6539",
        "\u6E05",
        "\u7F8E",
        "\u518D",
        "\u91C7",
        "\u8F6C",
        "\u66F4",
        "\u5355",
        "\u98CE",
        "\u5207",
        "\u6253",
        "\u767D",
        "\u6559",
        "\u901F",
        "\u82B1",
        "\u5E26",
        "\u5B89",
        "\u573A",
        "\u8EAB",
        "\u8F66",
        "\u4F8B",
        "\u771F",
        "\u52A1",
        "\u5177",
        "\u4E07",
        "\u6BCF",
        "\u76EE",
        "\u81F3",
        "\u8FBE",
        "\u8D70",
        "\u79EF",
        "\u793A",
        "\u8BAE",
        "\u58F0",
        "\u62A5",
        "\u6597",
        "\u5B8C",
        "\u7C7B",
        "\u516B",
        "\u79BB",
        "\u534E",
        "\u540D",
        "\u786E",
        "\u624D",
        "\u79D1",
        "\u5F20",
        "\u4FE1",
        "\u9A6C",
        "\u8282",
        "\u8BDD",
        "\u7C73",
        "\u6574",
        "\u7A7A",
        "\u5143",
        "\u51B5",
        "\u4ECA",
        "\u96C6",
        "\u6E29",
        "\u4F20",
        "\u571F",
        "\u8BB8",
        "\u6B65",
        "\u7FA4",
        "\u5E7F",
        "\u77F3",
        "\u8BB0",
        "\u9700",
        "\u6BB5",
        "\u7814",
        "\u754C",
        "\u62C9",
        "\u6797",
        "\u5F8B",
        "\u53EB",
        "\u4E14",
        "\u7A76",
        "\u89C2",
        "\u8D8A",
        "\u7EC7",
        "\u88C5",
        "\u5F71",
        "\u7B97",
        "\u4F4E",
        "\u6301",
        "\u97F3",
        "\u4F17",
        "\u4E66",
        "\u5E03",
        "\u590D",
        "\u5BB9",
        "\u513F",
        "\u987B",
        "\u9645",
        "\u5546",
        "\u975E",
        "\u9A8C",
        "\u8FDE",
        "\u65AD",
        "\u6DF1",
        "\u96BE",
        "\u8FD1",
        "\u77FF",
        "\u5343",
        "\u5468",
        "\u59D4",
        "\u7D20",
        "\u6280",
        "\u5907",
        "\u534A",
        "\u529E",
        "\u9752",
        "\u7701",
        "\u5217",
        "\u4E60",
        "\u54CD",
        "\u7EA6",
        "\u652F",
        "\u822C",
        "\u53F2",
        "\u611F",
        "\u52B3",
        "\u4FBF",
        "\u56E2",
        "\u5F80",
        "\u9178",
        "\u5386",
        "\u5E02",
        "\u514B",
        "\u4F55",
        "\u9664",
        "\u6D88",
        "\u6784",
        "\u5E9C",
        "\u79F0",
        "\u592A",
        "\u51C6",
        "\u7CBE",
        "\u503C",
        "\u53F7",
        "\u7387",
        "\u65CF",
        "\u7EF4",
        "\u5212",
        "\u9009",
        "\u6807",
        "\u5199",
        "\u5B58",
        "\u5019",
        "\u6BDB",
        "\u4EB2",
        "\u5FEB",
        "\u6548",
        "\u65AF",
        "\u9662",
        "\u67E5",
        "\u6C5F",
        "\u578B",
        "\u773C",
        "\u738B",
        "\u6309",
        "\u683C",
        "\u517B",
        "\u6613",
        "\u7F6E",
        "\u6D3E",
        "\u5C42",
        "\u7247",
        "\u59CB",
        "\u5374",
        "\u4E13",
        "\u72B6",
        "\u80B2",
        "\u5382",
        "\u4EAC",
        "\u8BC6",
        "\u9002",
        "\u5C5E",
        "\u5706",
        "\u5305",
        "\u706B",
        "\u4F4F",
        "\u8C03",
        "\u6EE1",
        "\u53BF",
        "\u5C40",
        "\u7167",
        "\u53C2",
        "\u7EA2",
        "\u7EC6",
        "\u5F15",
        "\u542C",
        "\u8BE5",
        "\u94C1",
        "\u4EF7",
        "\u4E25",
        "\u9996",
        "\u5E95",
        "\u6DB2",
        "\u5B98",
        "\u5FB7",
        "\u968F",
        "\u75C5",
        "\u82CF",
        "\u5931",
        "\u5C14",
        "\u6B7B",
        "\u8BB2",
        "\u914D",
        "\u5973",
        "\u9EC4",
        "\u63A8",
        "\u663E",
        "\u8C08",
        "\u7F6A",
        "\u795E",
        "\u827A",
        "\u5462",
        "\u5E2D",
        "\u542B",
        "\u4F01",
        "\u671B",
        "\u5BC6",
        "\u6279",
        "\u8425",
        "\u9879",
        "\u9632",
        "\u4E3E",
        "\u7403",
        "\u82F1",
        "\u6C27",
        "\u52BF",
        "\u544A",
        "\u674E",
        "\u53F0",
        "\u843D",
        "\u6728",
        "\u5E2E",
        "\u8F6E",
        "\u7834",
        "\u4E9A",
        "\u5E08",
        "\u56F4",
        "\u6CE8",
        "\u8FDC",
        "\u5B57",
        "\u6750",
        "\u6392",
        "\u4F9B",
        "\u6CB3",
        "\u6001",
        "\u5C01",
        "\u53E6",
        "\u65BD",
        "\u51CF",
        "\u6811",
        "\u6EB6",
        "\u600E",
        "\u6B62",
        "\u6848",
        "\u8A00",
        "\u58EB",
        "\u5747",
        "\u6B66",
        "\u56FA",
        "\u53F6",
        "\u9C7C",
        "\u6CE2",
        "\u89C6",
        "\u4EC5",
        "\u8D39",
        "\u7D27",
        "\u7231",
        "\u5DE6",
        "\u7AE0",
        "\u65E9",
        "\u671D",
        "\u5BB3",
        "\u7EED",
        "\u8F7B",
        "\u670D",
        "\u8BD5",
        "\u98DF",
        "\u5145",
        "\u5175",
        "\u6E90",
        "\u5224",
        "\u62A4",
        "\u53F8",
        "\u8DB3",
        "\u67D0",
        "\u7EC3",
        "\u5DEE",
        "\u81F4",
        "\u677F",
        "\u7530",
        "\u964D",
        "\u9ED1",
        "\u72AF",
        "\u8D1F",
        "\u51FB",
        "\u8303",
        "\u7EE7",
        "\u5174",
        "\u4F3C",
        "\u4F59",
        "\u575A",
        "\u66F2",
        "\u8F93",
        "\u4FEE",
        "\u6545",
        "\u57CE",
        "\u592B",
        "\u591F",
        "\u9001",
        "\u7B14",
        "\u8239",
        "\u5360",
        "\u53F3",
        "\u8D22",
        "\u5403",
        "\u5BCC",
        "\u6625",
        "\u804C",
        "\u89C9",
        "\u6C49",
        "\u753B",
        "\u529F",
        "\u5DF4",
        "\u8DDF",
        "\u867D",
        "\u6742",
        "\u98DE",
        "\u68C0",
        "\u5438",
        "\u52A9",
        "\u5347",
        "\u9633",
        "\u4E92",
        "\u521D",
        "\u521B",
        "\u6297",
        "\u8003",
        "\u6295",
        "\u574F",
        "\u7B56",
        "\u53E4",
        "\u5F84",
        "\u6362",
        "\u672A",
        "\u8DD1",
        "\u7559",
        "\u94A2",
        "\u66FE",
        "\u7AEF",
        "\u8D23",
        "\u7AD9",
        "\u7B80",
        "\u8FF0",
        "\u94B1",
        "\u526F",
        "\u5C3D",
        "\u5E1D",
        "\u5C04",
        "\u8349",
        "\u51B2",
        "\u627F",
        "\u72EC",
        "\u4EE4",
        "\u9650",
        "\u963F",
        "\u5BA3",
        "\u73AF",
        "\u53CC",
        "\u8BF7",
        "\u8D85",
        "\u5FAE",
        "\u8BA9",
        "\u63A7",
        "\u5DDE",
        "\u826F",
        "\u8F74",
        "\u627E",
        "\u5426",
        "\u7EAA",
        "\u76CA",
        "\u4F9D",
        "\u4F18",
        "\u9876",
        "\u7840",
        "\u8F7D",
        "\u5012",
        "\u623F",
        "\u7A81",
        "\u5750",
        "\u7C89",
        "\u654C",
        "\u7565",
        "\u5BA2",
        "\u8881",
        "\u51B7",
        "\u80DC",
        "\u7EDD",
        "\u6790",
        "\u5757",
        "\u5242",
        "\u6D4B",
        "\u4E1D",
        "\u534F",
        "\u8BC9",
        "\u5FF5",
        "\u9648",
        "\u4ECD",
        "\u7F57",
        "\u76D0",
        "\u53CB",
        "\u6D0B",
        "\u9519",
        "\u82E6",
        "\u591C",
        "\u5211",
        "\u79FB",
        "\u9891",
        "\u9010",
        "\u9760",
        "\u6DF7",
        "\u6BCD",
        "\u77ED",
        "\u76AE",
        "\u7EC8",
        "\u805A",
        "\u6C7D",
        "\u6751",
        "\u4E91",
        "\u54EA",
        "\u65E2",
        "\u8DDD",
        "\u536B",
        "\u505C",
        "\u70C8",
        "\u592E",
        "\u5BDF",
        "\u70E7",
        "\u8FC5",
        "\u5883",
        "\u82E5",
        "\u5370",
        "\u6D32",
        "\u523B",
        "\u62EC",
        "\u6FC0",
        "\u5B54",
        "\u641E",
        "\u751A",
        "\u5BA4",
        "\u5F85",
        "\u6838",
        "\u6821",
        "\u6563",
        "\u4FB5",
        "\u5427",
        "\u7532",
        "\u6E38",
        "\u4E45",
        "\u83DC",
        "\u5473",
        "\u65E7",
        "\u6A21",
        "\u6E56",
        "\u8D27",
        "\u635F",
        "\u9884",
        "\u963B",
        "\u6BEB",
        "\u666E",
        "\u7A33",
        "\u4E59",
        "\u5988",
        "\u690D",
        "\u606F",
        "\u6269",
        "\u94F6",
        "\u8BED",
        "\u6325",
        "\u9152",
        "\u5B88",
        "\u62FF",
        "\u5E8F",
        "\u7EB8",
        "\u533B",
        "\u7F3A",
        "\u96E8",
        "\u5417",
        "\u9488",
        "\u5218",
        "\u554A",
        "\u6025",
        "\u5531",
        "\u8BEF",
        "\u8BAD",
        "\u613F",
        "\u5BA1",
        "\u9644",
        "\u83B7",
        "\u8336",
        "\u9C9C",
        "\u7CAE",
        "\u65A4",
        "\u5B69",
        "\u8131",
        "\u786B",
        "\u80A5",
        "\u5584",
        "\u9F99",
        "\u6F14",
        "\u7236",
        "\u6E10",
        "\u8840",
        "\u6B22",
        "\u68B0",
        "\u638C",
        "\u6B4C",
        "\u6C99",
        "\u521A",
        "\u653B",
        "\u8C13",
        "\u76FE",
        "\u8BA8",
        "\u665A",
        "\u7C92",
        "\u4E71",
        "\u71C3",
        "\u77DB",
        "\u4E4E",
        "\u6740",
        "\u836F",
        "\u5B81",
        "\u9C81",
        "\u8D35",
        "\u949F",
        "\u7164",
        "\u8BFB",
        "\u73ED",
        "\u4F2F",
        "\u9999",
        "\u4ECB",
        "\u8FEB",
        "\u53E5",
        "\u4E30",
        "\u57F9",
        "\u63E1",
        "\u5170",
        "\u62C5",
        "\u5F26",
        "\u86CB",
        "\u6C89",
        "\u5047",
        "\u7A7F",
        "\u6267",
        "\u7B54",
        "\u4E50",
        "\u8C01",
        "\u987A",
        "\u70DF",
        "\u7F29",
        "\u5F81",
        "\u8138",
        "\u559C",
        "\u677E",
        "\u811A",
        "\u56F0",
        "\u5F02",
        "\u514D",
        "\u80CC",
        "\u661F",
        "\u798F",
        "\u4E70",
        "\u67D3",
        "\u4E95",
        "\u6982",
        "\u6162",
        "\u6015",
        "\u78C1",
        "\u500D",
        "\u7956",
        "\u7687",
        "\u4FC3",
        "\u9759",
        "\u8865",
        "\u8BC4",
        "\u7FFB",
        "\u8089",
        "\u8DF5",
        "\u5C3C",
        "\u8863",
        "\u5BBD",
        "\u626C",
        "\u68C9",
        "\u5E0C",
        "\u4F24",
        "\u64CD",
        "\u5782",
        "\u79CB",
        "\u5B9C",
        "\u6C22",
        "\u5957",
        "\u7763",
        "\u632F",
        "\u67B6",
        "\u4EAE",
        "\u672B",
        "\u5BAA",
        "\u5E86",
        "\u7F16",
        "\u725B",
        "\u89E6",
        "\u6620",
        "\u96F7",
        "\u9500",
        "\u8BD7",
        "\u5EA7",
        "\u5C45",
        "\u6293",
        "\u88C2",
        "\u80DE",
        "\u547C",
        "\u5A18",
        "\u666F",
        "\u5A01",
        "\u7EFF",
        "\u6676",
        "\u539A",
        "\u76DF",
        "\u8861",
        "\u9E21",
        "\u5B59",
        "\u5EF6",
        "\u5371",
        "\u80F6",
        "\u5C4B",
        "\u4E61",
        "\u4E34",
        "\u9646",
        "\u987E",
        "\u6389",
        "\u5440",
        "\u706F",
        "\u5C81",
        "\u63AA",
        "\u675F",
        "\u8010",
        "\u5267",
        "\u7389",
        "\u8D75",
        "\u8DF3",
        "\u54E5",
        "\u5B63",
        "\u8BFE",
        "\u51EF",
        "\u80E1",
        "\u989D",
        "\u6B3E",
        "\u7ECD",
        "\u5377",
        "\u9F50",
        "\u4F1F",
        "\u84B8",
        "\u6B96",
        "\u6C38",
        "\u5B97",
        "\u82D7",
        "\u5DDD",
        "\u7089",
        "\u5CA9",
        "\u5F31",
        "\u96F6",
        "\u6768",
        "\u594F",
        "\u6CBF",
        "\u9732",
        "\u6746",
        "\u63A2",
        "\u6ED1",
        "\u9547",
        "\u996D",
        "\u6D53",
        "\u822A",
        "\u6000",
        "\u8D76",
        "\u5E93",
        "\u593A",
        "\u4F0A",
        "\u7075",
        "\u7A0E",
        "\u9014",
        "\u706D",
        "\u8D5B",
        "\u5F52",
        "\u53EC",
        "\u9F13",
        "\u64AD",
        "\u76D8",
        "\u88C1",
        "\u9669",
        "\u5EB7",
        "\u552F",
        "\u5F55",
        "\u83CC",
        "\u7EAF",
        "\u501F",
        "\u7CD6",
        "\u76D6",
        "\u6A2A",
        "\u7B26",
        "\u79C1",
        "\u52AA",
        "\u5802",
        "\u57DF",
        "\u67AA",
        "\u6DA6",
        "\u5E45",
        "\u54C8",
        "\u7ADF",
        "\u719F",
        "\u866B",
        "\u6CFD",
        "\u8111",
        "\u58E4",
        "\u78B3",
        "\u6B27",
        "\u904D",
        "\u4FA7",
        "\u5BE8",
        "\u6562",
        "\u5F7B",
        "\u8651",
        "\u659C",
        "\u8584",
        "\u5EAD",
        "\u7EB3",
        "\u5F39",
        "\u9972",
        "\u4F38",
        "\u6298",
        "\u9EA6",
        "\u6E7F",
        "\u6697",
        "\u8377",
        "\u74E6",
        "\u585E",
        "\u5E8A",
        "\u7B51",
        "\u6076",
        "\u6237",
        "\u8BBF",
        "\u5854",
        "\u5947",
        "\u900F",
        "\u6881",
        "\u5200",
        "\u65CB",
        "\u8FF9",
        "\u5361",
        "\u6C2F",
        "\u9047",
        "\u4EFD",
        "\u6BD2",
        "\u6CE5",
        "\u9000",
        "\u6D17",
        "\u6446",
        "\u7070",
        "\u5F69",
        "\u5356",
        "\u8017",
        "\u590F",
        "\u62E9",
        "\u5FD9",
        "\u94DC",
        "\u732E",
        "\u786C",
        "\u4E88",
        "\u7E41",
        "\u5708",
        "\u96EA",
        "\u51FD",
        "\u4EA6",
        "\u62BD",
        "\u7BC7",
        "\u9635",
        "\u9634",
        "\u4E01",
        "\u5C3A",
        "\u8FFD",
        "\u5806",
        "\u96C4",
        "\u8FCE",
        "\u6CDB",
        "\u7238",
        "\u697C",
        "\u907F",
        "\u8C0B",
        "\u5428",
        "\u91CE",
        "\u732A",
        "\u65D7",
        "\u7D2F",
        "\u504F",
        "\u5178",
        "\u9986",
        "\u7D22",
        "\u79E6",
        "\u8102",
        "\u6F6E",
        "\u7237",
        "\u8C46",
        "\u5FFD",
        "\u6258",
        "\u60CA",
        "\u5851",
        "\u9057",
        "\u6108",
        "\u6731",
        "\u66FF",
        "\u7EA4",
        "\u7C97",
        "\u503E",
        "\u5C1A",
        "\u75DB",
        "\u695A",
        "\u8C22",
        "\u594B",
        "\u8D2D",
        "\u78E8",
        "\u541B",
        "\u6C60",
        "\u65C1",
        "\u788E",
        "\u9AA8",
        "\u76D1",
        "\u6355",
        "\u5F1F",
        "\u66B4",
        "\u5272",
        "\u8D2F",
        "\u6B8A",
        "\u91CA",
        "\u8BCD",
        "\u4EA1",
        "\u58C1",
        "\u987F",
        "\u5B9D",
        "\u5348",
        "\u5C18",
        "\u95FB",
        "\u63ED",
        "\u70AE",
        "\u6B8B",
        "\u51AC",
        "\u6865",
        "\u5987",
        "\u8B66",
        "\u7EFC",
        "\u62DB",
        "\u5434",
        "\u4ED8",
        "\u6D6E",
        "\u906D",
        "\u5F90",
        "\u60A8",
        "\u6447",
        "\u8C37",
        "\u8D5E",
        "\u7BB1",
        "\u9694",
        "\u8BA2",
        "\u7537",
        "\u5439",
        "\u56ED",
        "\u7EB7",
        "\u5510",
        "\u8D25",
        "\u5B8B",
        "\u73BB",
        "\u5DE8",
        "\u8015",
        "\u5766",
        "\u8363",
        "\u95ED",
        "\u6E7E",
        "\u952E",
        "\u51E1",
        "\u9A7B",
        "\u9505",
        "\u6551",
        "\u6069",
        "\u5265",
        "\u51DD",
        "\u78B1",
        "\u9F7F",
        "\u622A",
        "\u70BC",
        "\u9EBB",
        "\u7EBA",
        "\u7981",
        "\u5E9F",
        "\u76DB",
        "\u7248",
        "\u7F13",
        "\u51C0",
        "\u775B",
        "\u660C",
        "\u5A5A",
        "\u6D89",
        "\u7B52",
        "\u5634",
        "\u63D2",
        "\u5CB8",
        "\u6717",
        "\u5E84",
        "\u8857",
        "\u85CF",
        "\u59D1",
        "\u8D38",
        "\u8150",
        "\u5974",
        "\u5566",
        "\u60EF",
        "\u4E58",
        "\u4F19",
        "\u6062",
        "\u5300",
        "\u7EB1",
        "\u624E",
        "\u8FA9",
        "\u8033",
        "\u5F6A",
        "\u81E3",
        "\u4EBF",
        "\u7483",
        "\u62B5",
        "\u8109",
        "\u79C0",
        "\u8428",
        "\u4FC4",
        "\u7F51",
        "\u821E",
        "\u5E97",
        "\u55B7",
        "\u7EB5",
        "\u5BF8",
        "\u6C57",
        "\u6302",
        "\u6D2A",
        "\u8D3A",
        "\u95EA",
        "\u67EC",
        "\u7206",
        "\u70EF",
        "\u6D25",
        "\u7A3B",
        "\u5899",
        "\u8F6F",
        "\u52C7",
        "\u50CF",
        "\u6EDA",
        "\u5398",
        "\u8499",
        "\u82B3",
        "\u80AF",
        "\u5761",
        "\u67F1",
        "\u8361",
        "\u817F",
        "\u4EEA",
        "\u65C5",
        "\u5C3E",
        "\u8F67",
        "\u51B0",
        "\u8D21",
        "\u767B",
        "\u9ECE",
        "\u524A",
        "\u94BB",
        "\u52D2",
        "\u9003",
        "\u969C",
        "\u6C28",
        "\u90ED",
        "\u5CF0",
        "\u5E01",
        "\u6E2F",
        "\u4F0F",
        "\u8F68",
        "\u4EA9",
        "\u6BD5",
        "\u64E6",
        "\u83AB",
        "\u523A",
        "\u6D6A",
        "\u79D8",
        "\u63F4",
        "\u682A",
        "\u5065",
        "\u552E",
        "\u80A1",
        "\u5C9B",
        "\u7518",
        "\u6CE1",
        "\u7761",
        "\u7AE5",
        "\u94F8",
        "\u6C64",
        "\u9600",
        "\u4F11",
        "\u6C47",
        "\u820D",
        "\u7267",
        "\u7ED5",
        "\u70B8",
        "\u54F2",
        "\u78F7",
        "\u7EE9",
        "\u670B",
        "\u6DE1",
        "\u5C16",
        "\u542F",
        "\u9677",
        "\u67F4",
        "\u5448",
        "\u5F92",
        "\u989C",
        "\u6CEA",
        "\u7A0D",
        "\u5FD8",
        "\u6CF5",
        "\u84DD",
        "\u62D6",
        "\u6D1E",
        "\u6388",
        "\u955C",
        "\u8F9B",
        "\u58EE",
        "\u950B",
        "\u8D2B",
        "\u865A",
        "\u5F2F",
        "\u6469",
        "\u6CF0",
        "\u5E7C",
        "\u5EF7",
        "\u5C0A",
        "\u7A97",
        "\u7EB2",
        "\u5F04",
        "\u96B6",
        "\u7591",
        "\u6C0F",
        "\u5BAB",
        "\u59D0",
        "\u9707",
        "\u745E",
        "\u602A",
        "\u5C24",
        "\u7434",
        "\u5FAA",
        "\u63CF",
        "\u819C",
        "\u8FDD",
        "\u5939",
        "\u8170",
        "\u7F18",
        "\u73E0",
        "\u7A77",
        "\u68EE",
        "\u679D",
        "\u7AF9",
        "\u6C9F",
        "\u50AC",
        "\u7EF3",
        "\u5FC6",
        "\u90A6",
        "\u5269",
        "\u5E78",
        "\u6D46",
        "\u680F",
        "\u62E5",
        "\u7259",
        "\u8D2E",
        "\u793C",
        "\u6EE4",
        "\u94A0",
        "\u7EB9",
        "\u7F62",
        "\u62CD",
        "\u54B1",
        "\u558A",
        "\u8896",
        "\u57C3",
        "\u52E4",
        "\u7F5A",
        "\u7126",
        "\u6F5C",
        "\u4F0D",
        "\u58A8",
        "\u6B32",
        "\u7F1D",
        "\u59D3",
        "\u520A",
        "\u9971",
        "\u4EFF",
        "\u5956",
        "\u94DD",
        "\u9B3C",
        "\u4E3D",
        "\u8DE8",
        "\u9ED8",
        "\u6316",
        "\u94FE",
        "\u626B",
        "\u559D",
        "\u888B",
        "\u70AD",
        "\u6C61",
        "\u5E55",
        "\u8BF8",
        "\u5F27",
        "\u52B1",
        "\u6885",
        "\u5976",
        "\u6D01",
        "\u707E",
        "\u821F",
        "\u9274",
        "\u82EF",
        "\u8BBC",
        "\u62B1",
        "\u6BC1",
        "\u61C2",
        "\u5BD2",
        "\u667A",
        "\u57D4",
        "\u5BC4",
        "\u5C4A",
        "\u8DC3",
        "\u6E21",
        "\u6311",
        "\u4E39",
        "\u8270",
        "\u8D1D",
        "\u78B0",
        "\u62D4",
        "\u7239",
        "\u6234",
        "\u7801",
        "\u68A6",
        "\u82BD",
        "\u7194",
        "\u8D64",
        "\u6E14",
        "\u54ED",
        "\u656C",
        "\u9897",
        "\u5954",
        "\u94C5",
        "\u4EF2",
        "\u864E",
        "\u7A00",
        "\u59B9",
        "\u4E4F",
        "\u73CD",
        "\u7533",
        "\u684C",
        "\u9075",
        "\u5141",
        "\u9686",
        "\u87BA",
        "\u4ED3",
        "\u9B4F",
        "\u9510",
        "\u6653",
        "\u6C2E",
        "\u517C",
        "\u9690",
        "\u788D",
        "\u8D6B",
        "\u62E8",
        "\u5FE0",
        "\u8083",
        "\u7F38",
        "\u7275",
        "\u62A2",
        "\u535A",
        "\u5DE7",
        "\u58F3",
        "\u5144",
        "\u675C",
        "\u8BAF",
        "\u8BDA",
        "\u78A7",
        "\u7965",
        "\u67EF",
        "\u9875",
        "\u5DE1",
        "\u77E9",
        "\u60B2",
        "\u704C",
        "\u9F84",
        "\u4F26",
        "\u7968",
        "\u5BFB",
        "\u6842",
        "\u94FA",
        "\u5723",
        "\u6050",
        "\u6070",
        "\u90D1",
        "\u8DA3",
        "\u62AC",
        "\u8352",
        "\u817E",
        "\u8D34",
        "\u67D4",
        "\u6EF4",
        "\u731B",
        "\u9614",
        "\u8F86",
        "\u59BB",
        "\u586B",
        "\u64A4",
        "\u50A8",
        "\u7B7E",
        "\u95F9",
        "\u6270",
        "\u7D2B",
        "\u7802",
        "\u9012",
        "\u620F",
        "\u540A",
        "\u9676",
        "\u4F10",
        "\u5582",
        "\u7597",
        "\u74F6",
        "\u5A46",
        "\u629A",
        "\u81C2",
        "\u6478",
        "\u5FCD",
        "\u867E",
        "\u8721",
        "\u90BB",
        "\u80F8",
        "\u5DE9",
        "\u6324",
        "\u5076",
        "\u5F03",
        "\u69FD",
        "\u52B2",
        "\u4E73",
        "\u9093",
        "\u5409",
        "\u4EC1",
        "\u70C2",
        "\u7816",
        "\u79DF",
        "\u4E4C",
        "\u8230",
        "\u4F34",
        "\u74DC",
        "\u6D45",
        "\u4E19",
        "\u6682",
        "\u71E5",
        "\u6A61",
        "\u67F3",
        "\u8FF7",
        "\u6696",
        "\u724C",
        "\u79E7",
        "\u80C6",
        "\u8BE6",
        "\u7C27",
        "\u8E0F",
        "\u74F7",
        "\u8C31",
        "\u5446",
        "\u5BBE",
        "\u7CCA",
        "\u6D1B",
        "\u8F89",
        "\u6124",
        "\u7ADE",
        "\u9699",
        "\u6012",
        "\u7C98",
        "\u4E43",
        "\u7EEA",
        "\u80A9",
        "\u7C4D",
        "\u654F",
        "\u6D82",
        "\u7199",
        "\u7686",
        "\u4FA6",
        "\u60AC",
        "\u6398",
        "\u4EAB",
        "\u7EA0",
        "\u9192",
        "\u72C2",
        "\u9501",
        "\u6DC0",
        "\u6068",
        "\u7272",
        "\u9738",
        "\u722C",
        "\u8D4F",
        "\u9006",
        "\u73A9",
        "\u9675",
        "\u795D",
        "\u79D2",
        "\u6D59",
        "\u8C8C",
        "\u5F79",
        "\u5F7C",
        "\u6089",
        "\u9E2D",
        "\u8D8B",
        "\u51E4",
        "\u6668",
        "\u755C",
        "\u8F88",
        "\u79E9",
        "\u5375",
        "\u7F72",
        "\u68AF",
        "\u708E",
        "\u6EE9",
        "\u68CB",
        "\u9A71",
        "\u7B5B",
        "\u5CE1",
        "\u5192",
        "\u5565",
        "\u5BFF",
        "\u8BD1",
        "\u6D78",
        "\u6CC9",
        "\u5E3D",
        "\u8FDF",
        "\u7845",
        "\u7586",
        "\u8D37",
        "\u6F0F",
        "\u7A3F",
        "\u51A0",
        "\u5AE9",
        "\u80C1",
        "\u82AF",
        "\u7262",
        "\u53DB",
        "\u8680",
        "\u5965",
        "\u9E23",
        "\u5CAD",
        "\u7F8A",
        "\u51ED",
        "\u4E32",
        "\u5858",
        "\u7ED8",
        "\u9175",
        "\u878D",
        "\u76C6",
        "\u9521",
        "\u5E99",
        "\u7B79",
        "\u51BB",
        "\u8F85",
        "\u6444",
        "\u88AD",
        "\u7B4B",
        "\u62D2",
        "\u50DA",
        "\u65F1",
        "\u94BE",
        "\u9E1F",
        "\u6F06",
        "\u6C88",
        "\u7709",
        "\u758F",
        "\u6DFB",
        "\u68D2",
        "\u7A57",
        "\u785D",
        "\u97E9",
        "\u903C",
        "\u626D",
        "\u4FA8",
        "\u51C9",
        "\u633A",
        "\u7897",
        "\u683D",
        "\u7092",
        "\u676F",
        "\u60A3",
        "\u998F",
        "\u529D",
        "\u8C6A",
        "\u8FBD",
        "\u52C3",
        "\u9E3F",
        "\u65E6",
        "\u540F",
        "\u62DC",
        "\u72D7",
        "\u57CB",
        "\u8F8A",
        "\u63A9",
        "\u996E",
        "\u642C",
        "\u9A82",
        "\u8F9E",
        "\u52FE",
        "\u6263",
        "\u4F30",
        "\u848B",
        "\u7ED2",
        "\u96FE",
        "\u4E08",
        "\u6735",
        "\u59C6",
        "\u62DF",
        "\u5B87",
        "\u8F91",
        "\u9655",
        "\u96D5",
        "\u507F",
        "\u84C4",
        "\u5D07",
        "\u526A",
        "\u5021",
        "\u5385",
        "\u54AC",
        "\u9A76",
        "\u85AF",
        "\u5237",
        "\u65A5",
        "\u756A",
        "\u8D4B",
        "\u5949",
        "\u4F5B",
        "\u6D47",
        "\u6F2B",
        "\u66FC",
        "\u6247",
        "\u9499",
        "\u6843",
        "\u6276",
        "\u4ED4",
        "\u8FD4",
        "\u4FD7",
        "\u4E8F",
        "\u8154",
        "\u978B",
        "\u68F1",
        "\u8986",
        "\u6846",
        "\u6084",
        "\u53D4",
        "\u649E",
        "\u9A97",
        "\u52D8",
        "\u65FA",
        "\u6CB8",
        "\u5B64",
        "\u5410",
        "\u5B5F",
        "\u6E20",
        "\u5C48",
        "\u75BE",
        "\u5999",
        "\u60DC",
        "\u4EF0",
        "\u72E0",
        "\u80C0",
        "\u8C10",
        "\u629B",
        "\u9709",
        "\u6851",
        "\u5C97",
        "\u561B",
        "\u8870",
        "\u76D7",
        "\u6E17",
        "\u810F",
        "\u8D56",
        "\u6D8C",
        "\u751C",
        "\u66F9",
        "\u9605",
        "\u808C",
        "\u54E9",
        "\u5389",
        "\u70C3",
        "\u7EAC",
        "\u6BC5",
        "\u6628",
        "\u4F2A",
        "\u75C7",
        "\u716E",
        "\u53F9",
        "\u9489",
        "\u642D",
        "\u830E",
        "\u7B3C",
        "\u9177",
        "\u5077",
        "\u5F13",
        "\u9525",
        "\u6052",
        "\u6770",
        "\u5751",
        "\u9F3B",
        "\u7FFC",
        "\u7EB6",
        "\u53D9",
        "\u72F1",
        "\u902E",
        "\u7F50",
        "\u7EDC",
        "\u68DA",
        "\u6291",
        "\u81A8",
        "\u852C",
        "\u5BFA",
        "\u9AA4",
        "\u7A46",
        "\u51B6",
        "\u67AF",
        "\u518C",
        "\u5C38",
        "\u51F8",
        "\u7EC5",
        "\u576F",
        "\u727A",
        "\u7130",
        "\u8F70",
        "\u6B23",
        "\u664B",
        "\u7626",
        "\u5FA1",
        "\u952D",
        "\u9526",
        "\u4E27",
        "\u65EC",
        "\u953B",
        "\u5784",
        "\u641C",
        "\u6251",
        "\u9080",
        "\u4EAD",
        "\u916F",
        "\u8FC8",
        "\u8212",
        "\u8106",
        "\u9176",
        "\u95F2",
        "\u5FE7",
        "\u915A",
        "\u987D",
        "\u7FBD",
        "\u6DA8",
        "\u5378",
        "\u4ED7",
        "\u966A",
        "\u8F9F",
        "\u60E9",
        "\u676D",
        "\u59DA",
        "\u809A",
        "\u6349",
        "\u98D8",
        "\u6F02",
        "\u6606",
        "\u6B3A",
        "\u543E",
        "\u90CE",
        "\u70F7",
        "\u6C41",
        "\u5475",
        "\u9970",
        "\u8427",
        "\u96C5",
        "\u90AE",
        "\u8FC1",
        "\u71D5",
        "\u6492",
        "\u59FB",
        "\u8D74",
        "\u5BB4",
        "\u70E6",
        "\u503A",
        "\u5E10",
        "\u6591",
        "\u94C3",
        "\u65E8",
        "\u9187",
        "\u8463",
        "\u997C",
        "\u96CF",
        "\u59FF",
        "\u62CC",
        "\u5085",
        "\u8179",
        "\u59A5",
        "\u63C9",
        "\u8D24",
        "\u62C6",
        "\u6B6A",
        "\u8461",
        "\u80FA",
        "\u4E22",
        "\u6D69",
        "\u5FBD",
        "\u6602",
        "\u57AB",
        "\u6321",
        "\u89C8",
        "\u8D2A",
        "\u6170",
        "\u7F34",
        "\u6C6A",
        "\u614C",
        "\u51AF",
        "\u8BFA",
        "\u59DC",
        "\u8C0A",
        "\u51F6",
        "\u52A3",
        "\u8BEC",
        "\u8000",
        "\u660F",
        "\u8EBA",
        "\u76C8",
        "\u9A91",
        "\u4E54",
        "\u6EAA",
        "\u4E1B",
        "\u5362",
        "\u62B9",
        "\u95F7",
        "\u54A8",
        "\u522E",
        "\u9A7E",
        "\u7F06",
        "\u609F",
        "\u6458",
        "\u94D2",
        "\u63B7",
        "\u9887",
        "\u5E7B",
        "\u67C4",
        "\u60E0",
        "\u60E8",
        "\u4F73",
        "\u4EC7",
        "\u814A",
        "\u7A9D",
        "\u6DA4",
        "\u5251",
        "\u77A7",
        "\u5821",
        "\u6CFC",
        "\u8471",
        "\u7F69",
        "\u970D",
        "\u635E",
        "\u80CE",
        "\u82CD",
        "\u6EE8",
        "\u4FE9",
        "\u6345",
        "\u6E58",
        "\u780D",
        "\u971E",
        "\u90B5",
        "\u8404",
        "\u75AF",
        "\u6DEE",
        "\u9042",
        "\u718A",
        "\u7CAA",
        "\u70D8",
        "\u5BBF",
        "\u6863",
        "\u6208",
        "\u9A73",
        "\u5AC2",
        "\u88D5",
        "\u5F99",
        "\u7BAD",
        "\u6350",
        "\u80A0",
        "\u6491",
        "\u6652",
        "\u8FA8",
        "\u6BBF",
        "\u83B2",
        "\u644A",
        "\u6405",
        "\u9171",
        "\u5C4F",
        "\u75AB",
        "\u54C0",
        "\u8521",
        "\u5835",
        "\u6CAB",
        "\u76B1",
        "\u7545",
        "\u53E0",
        "\u9601",
        "\u83B1",
        "\u6572",
        "\u8F96",
        "\u94A9",
        "\u75D5",
        "\u575D",
        "\u5DF7",
        "\u997F",
        "\u7978",
        "\u4E18",
        "\u7384",
        "\u6E9C",
        "\u66F0",
        "\u903B",
        "\u5F6D",
        "\u5C1D",
        "\u537F",
        "\u59A8",
        "\u8247",
        "\u541E",
        "\u97E6",
        "\u6028",
        "\u77EE",
        "\u6B47"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/chinese-traditional.js
  var require_chinese_traditional = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/chinese-traditional.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "\u7684",
        "\u4E00",
        "\u662F",
        "\u5728",
        "\u4E0D",
        "\u4E86",
        "\u6709",
        "\u548C",
        "\u4EBA",
        "\u9019",
        "\u4E2D",
        "\u5927",
        "\u70BA",
        "\u4E0A",
        "\u500B",
        "\u570B",
        "\u6211",
        "\u4EE5",
        "\u8981",
        "\u4ED6",
        "\u6642",
        "\u4F86",
        "\u7528",
        "\u5011",
        "\u751F",
        "\u5230",
        "\u4F5C",
        "\u5730",
        "\u65BC",
        "\u51FA",
        "\u5C31",
        "\u5206",
        "\u5C0D",
        "\u6210",
        "\u6703",
        "\u53EF",
        "\u4E3B",
        "\u767C",
        "\u5E74",
        "\u52D5",
        "\u540C",
        "\u5DE5",
        "\u4E5F",
        "\u80FD",
        "\u4E0B",
        "\u904E",
        "\u5B50",
        "\u8AAA",
        "\u7522",
        "\u7A2E",
        "\u9762",
        "\u800C",
        "\u65B9",
        "\u5F8C",
        "\u591A",
        "\u5B9A",
        "\u884C",
        "\u5B78",
        "\u6CD5",
        "\u6240",
        "\u6C11",
        "\u5F97",
        "\u7D93",
        "\u5341",
        "\u4E09",
        "\u4E4B",
        "\u9032",
        "\u8457",
        "\u7B49",
        "\u90E8",
        "\u5EA6",
        "\u5BB6",
        "\u96FB",
        "\u529B",
        "\u88E1",
        "\u5982",
        "\u6C34",
        "\u5316",
        "\u9AD8",
        "\u81EA",
        "\u4E8C",
        "\u7406",
        "\u8D77",
        "\u5C0F",
        "\u7269",
        "\u73FE",
        "\u5BE6",
        "\u52A0",
        "\u91CF",
        "\u90FD",
        "\u5169",
        "\u9AD4",
        "\u5236",
        "\u6A5F",
        "\u7576",
        "\u4F7F",
        "\u9EDE",
        "\u5F9E",
        "\u696D",
        "\u672C",
        "\u53BB",
        "\u628A",
        "\u6027",
        "\u597D",
        "\u61C9",
        "\u958B",
        "\u5B83",
        "\u5408",
        "\u9084",
        "\u56E0",
        "\u7531",
        "\u5176",
        "\u4E9B",
        "\u7136",
        "\u524D",
        "\u5916",
        "\u5929",
        "\u653F",
        "\u56DB",
        "\u65E5",
        "\u90A3",
        "\u793E",
        "\u7FA9",
        "\u4E8B",
        "\u5E73",
        "\u5F62",
        "\u76F8",
        "\u5168",
        "\u8868",
        "\u9593",
        "\u6A23",
        "\u8207",
        "\u95DC",
        "\u5404",
        "\u91CD",
        "\u65B0",
        "\u7DDA",
        "\u5167",
        "\u6578",
        "\u6B63",
        "\u5FC3",
        "\u53CD",
        "\u4F60",
        "\u660E",
        "\u770B",
        "\u539F",
        "\u53C8",
        "\u9EBC",
        "\u5229",
        "\u6BD4",
        "\u6216",
        "\u4F46",
        "\u8CEA",
        "\u6C23",
        "\u7B2C",
        "\u5411",
        "\u9053",
        "\u547D",
        "\u6B64",
        "\u8B8A",
        "\u689D",
        "\u53EA",
        "\u6C92",
        "\u7D50",
        "\u89E3",
        "\u554F",
        "\u610F",
        "\u5EFA",
        "\u6708",
        "\u516C",
        "\u7121",
        "\u7CFB",
        "\u8ECD",
        "\u5F88",
        "\u60C5",
        "\u8005",
        "\u6700",
        "\u7ACB",
        "\u4EE3",
        "\u60F3",
        "\u5DF2",
        "\u901A",
        "\u4E26",
        "\u63D0",
        "\u76F4",
        "\u984C",
        "\u9EE8",
        "\u7A0B",
        "\u5C55",
        "\u4E94",
        "\u679C",
        "\u6599",
        "\u8C61",
        "\u54E1",
        "\u9769",
        "\u4F4D",
        "\u5165",
        "\u5E38",
        "\u6587",
        "\u7E3D",
        "\u6B21",
        "\u54C1",
        "\u5F0F",
        "\u6D3B",
        "\u8A2D",
        "\u53CA",
        "\u7BA1",
        "\u7279",
        "\u4EF6",
        "\u9577",
        "\u6C42",
        "\u8001",
        "\u982D",
        "\u57FA",
        "\u8CC7",
        "\u908A",
        "\u6D41",
        "\u8DEF",
        "\u7D1A",
        "\u5C11",
        "\u5716",
        "\u5C71",
        "\u7D71",
        "\u63A5",
        "\u77E5",
        "\u8F03",
        "\u5C07",
        "\u7D44",
        "\u898B",
        "\u8A08",
        "\u5225",
        "\u5979",
        "\u624B",
        "\u89D2",
        "\u671F",
        "\u6839",
        "\u8AD6",
        "\u904B",
        "\u8FB2",
        "\u6307",
        "\u5E7E",
        "\u4E5D",
        "\u5340",
        "\u5F37",
        "\u653E",
        "\u6C7A",
        "\u897F",
        "\u88AB",
        "\u5E79",
        "\u505A",
        "\u5FC5",
        "\u6230",
        "\u5148",
        "\u56DE",
        "\u5247",
        "\u4EFB",
        "\u53D6",
        "\u64DA",
        "\u8655",
        "\u968A",
        "\u5357",
        "\u7D66",
        "\u8272",
        "\u5149",
        "\u9580",
        "\u5373",
        "\u4FDD",
        "\u6CBB",
        "\u5317",
        "\u9020",
        "\u767E",
        "\u898F",
        "\u71B1",
        "\u9818",
        "\u4E03",
        "\u6D77",
        "\u53E3",
        "\u6771",
        "\u5C0E",
        "\u5668",
        "\u58D3",
        "\u5FD7",
        "\u4E16",
        "\u91D1",
        "\u589E",
        "\u722D",
        "\u6FDF",
        "\u968E",
        "\u6CB9",
        "\u601D",
        "\u8853",
        "\u6975",
        "\u4EA4",
        "\u53D7",
        "\u806F",
        "\u4EC0",
        "\u8A8D",
        "\u516D",
        "\u5171",
        "\u6B0A",
        "\u6536",
        "\u8B49",
        "\u6539",
        "\u6E05",
        "\u7F8E",
        "\u518D",
        "\u63A1",
        "\u8F49",
        "\u66F4",
        "\u55AE",
        "\u98A8",
        "\u5207",
        "\u6253",
        "\u767D",
        "\u6559",
        "\u901F",
        "\u82B1",
        "\u5E36",
        "\u5B89",
        "\u5834",
        "\u8EAB",
        "\u8ECA",
        "\u4F8B",
        "\u771F",
        "\u52D9",
        "\u5177",
        "\u842C",
        "\u6BCF",
        "\u76EE",
        "\u81F3",
        "\u9054",
        "\u8D70",
        "\u7A4D",
        "\u793A",
        "\u8B70",
        "\u8072",
        "\u5831",
        "\u9B25",
        "\u5B8C",
        "\u985E",
        "\u516B",
        "\u96E2",
        "\u83EF",
        "\u540D",
        "\u78BA",
        "\u624D",
        "\u79D1",
        "\u5F35",
        "\u4FE1",
        "\u99AC",
        "\u7BC0",
        "\u8A71",
        "\u7C73",
        "\u6574",
        "\u7A7A",
        "\u5143",
        "\u6CC1",
        "\u4ECA",
        "\u96C6",
        "\u6EAB",
        "\u50B3",
        "\u571F",
        "\u8A31",
        "\u6B65",
        "\u7FA4",
        "\u5EE3",
        "\u77F3",
        "\u8A18",
        "\u9700",
        "\u6BB5",
        "\u7814",
        "\u754C",
        "\u62C9",
        "\u6797",
        "\u5F8B",
        "\u53EB",
        "\u4E14",
        "\u7A76",
        "\u89C0",
        "\u8D8A",
        "\u7E54",
        "\u88DD",
        "\u5F71",
        "\u7B97",
        "\u4F4E",
        "\u6301",
        "\u97F3",
        "\u773E",
        "\u66F8",
        "\u5E03",
        "\u590D",
        "\u5BB9",
        "\u5152",
        "\u9808",
        "\u969B",
        "\u5546",
        "\u975E",
        "\u9A57",
        "\u9023",
        "\u65B7",
        "\u6DF1",
        "\u96E3",
        "\u8FD1",
        "\u7926",
        "\u5343",
        "\u9031",
        "\u59D4",
        "\u7D20",
        "\u6280",
        "\u5099",
        "\u534A",
        "\u8FA6",
        "\u9752",
        "\u7701",
        "\u5217",
        "\u7FD2",
        "\u97FF",
        "\u7D04",
        "\u652F",
        "\u822C",
        "\u53F2",
        "\u611F",
        "\u52DE",
        "\u4FBF",
        "\u5718",
        "\u5F80",
        "\u9178",
        "\u6B77",
        "\u5E02",
        "\u514B",
        "\u4F55",
        "\u9664",
        "\u6D88",
        "\u69CB",
        "\u5E9C",
        "\u7A31",
        "\u592A",
        "\u6E96",
        "\u7CBE",
        "\u503C",
        "\u865F",
        "\u7387",
        "\u65CF",
        "\u7DAD",
        "\u5283",
        "\u9078",
        "\u6A19",
        "\u5BEB",
        "\u5B58",
        "\u5019",
        "\u6BDB",
        "\u89AA",
        "\u5FEB",
        "\u6548",
        "\u65AF",
        "\u9662",
        "\u67E5",
        "\u6C5F",
        "\u578B",
        "\u773C",
        "\u738B",
        "\u6309",
        "\u683C",
        "\u990A",
        "\u6613",
        "\u7F6E",
        "\u6D3E",
        "\u5C64",
        "\u7247",
        "\u59CB",
        "\u537B",
        "\u5C08",
        "\u72C0",
        "\u80B2",
        "\u5EE0",
        "\u4EAC",
        "\u8B58",
        "\u9069",
        "\u5C6C",
        "\u5713",
        "\u5305",
        "\u706B",
        "\u4F4F",
        "\u8ABF",
        "\u6EFF",
        "\u7E23",
        "\u5C40",
        "\u7167",
        "\u53C3",
        "\u7D05",
        "\u7D30",
        "\u5F15",
        "\u807D",
        "\u8A72",
        "\u9435",
        "\u50F9",
        "\u56B4",
        "\u9996",
        "\u5E95",
        "\u6DB2",
        "\u5B98",
        "\u5FB7",
        "\u96A8",
        "\u75C5",
        "\u8607",
        "\u5931",
        "\u723E",
        "\u6B7B",
        "\u8B1B",
        "\u914D",
        "\u5973",
        "\u9EC3",
        "\u63A8",
        "\u986F",
        "\u8AC7",
        "\u7F6A",
        "\u795E",
        "\u85DD",
        "\u5462",
        "\u5E2D",
        "\u542B",
        "\u4F01",
        "\u671B",
        "\u5BC6",
        "\u6279",
        "\u71DF",
        "\u9805",
        "\u9632",
        "\u8209",
        "\u7403",
        "\u82F1",
        "\u6C27",
        "\u52E2",
        "\u544A",
        "\u674E",
        "\u53F0",
        "\u843D",
        "\u6728",
        "\u5E6B",
        "\u8F2A",
        "\u7834",
        "\u4E9E",
        "\u5E2B",
        "\u570D",
        "\u6CE8",
        "\u9060",
        "\u5B57",
        "\u6750",
        "\u6392",
        "\u4F9B",
        "\u6CB3",
        "\u614B",
        "\u5C01",
        "\u53E6",
        "\u65BD",
        "\u6E1B",
        "\u6A39",
        "\u6EB6",
        "\u600E",
        "\u6B62",
        "\u6848",
        "\u8A00",
        "\u58EB",
        "\u5747",
        "\u6B66",
        "\u56FA",
        "\u8449",
        "\u9B5A",
        "\u6CE2",
        "\u8996",
        "\u50C5",
        "\u8CBB",
        "\u7DCA",
        "\u611B",
        "\u5DE6",
        "\u7AE0",
        "\u65E9",
        "\u671D",
        "\u5BB3",
        "\u7E8C",
        "\u8F15",
        "\u670D",
        "\u8A66",
        "\u98DF",
        "\u5145",
        "\u5175",
        "\u6E90",
        "\u5224",
        "\u8B77",
        "\u53F8",
        "\u8DB3",
        "\u67D0",
        "\u7DF4",
        "\u5DEE",
        "\u81F4",
        "\u677F",
        "\u7530",
        "\u964D",
        "\u9ED1",
        "\u72AF",
        "\u8CA0",
        "\u64CA",
        "\u8303",
        "\u7E7C",
        "\u8208",
        "\u4F3C",
        "\u9918",
        "\u5805",
        "\u66F2",
        "\u8F38",
        "\u4FEE",
        "\u6545",
        "\u57CE",
        "\u592B",
        "\u5920",
        "\u9001",
        "\u7B46",
        "\u8239",
        "\u4F54",
        "\u53F3",
        "\u8CA1",
        "\u5403",
        "\u5BCC",
        "\u6625",
        "\u8077",
        "\u89BA",
        "\u6F22",
        "\u756B",
        "\u529F",
        "\u5DF4",
        "\u8DDF",
        "\u96D6",
        "\u96DC",
        "\u98DB",
        "\u6AA2",
        "\u5438",
        "\u52A9",
        "\u6607",
        "\u967D",
        "\u4E92",
        "\u521D",
        "\u5275",
        "\u6297",
        "\u8003",
        "\u6295",
        "\u58DE",
        "\u7B56",
        "\u53E4",
        "\u5F91",
        "\u63DB",
        "\u672A",
        "\u8DD1",
        "\u7559",
        "\u92FC",
        "\u66FE",
        "\u7AEF",
        "\u8CAC",
        "\u7AD9",
        "\u7C21",
        "\u8FF0",
        "\u9322",
        "\u526F",
        "\u76E1",
        "\u5E1D",
        "\u5C04",
        "\u8349",
        "\u885D",
        "\u627F",
        "\u7368",
        "\u4EE4",
        "\u9650",
        "\u963F",
        "\u5BA3",
        "\u74B0",
        "\u96D9",
        "\u8ACB",
        "\u8D85",
        "\u5FAE",
        "\u8B93",
        "\u63A7",
        "\u5DDE",
        "\u826F",
        "\u8EF8",
        "\u627E",
        "\u5426",
        "\u7D00",
        "\u76CA",
        "\u4F9D",
        "\u512A",
        "\u9802",
        "\u790E",
        "\u8F09",
        "\u5012",
        "\u623F",
        "\u7A81",
        "\u5750",
        "\u7C89",
        "\u6575",
        "\u7565",
        "\u5BA2",
        "\u8881",
        "\u51B7",
        "\u52DD",
        "\u7D55",
        "\u6790",
        "\u584A",
        "\u5291",
        "\u6E2C",
        "\u7D72",
        "\u5354",
        "\u8A34",
        "\u5FF5",
        "\u9673",
        "\u4ECD",
        "\u7F85",
        "\u9E7D",
        "\u53CB",
        "\u6D0B",
        "\u932F",
        "\u82E6",
        "\u591C",
        "\u5211",
        "\u79FB",
        "\u983B",
        "\u9010",
        "\u9760",
        "\u6DF7",
        "\u6BCD",
        "\u77ED",
        "\u76AE",
        "\u7D42",
        "\u805A",
        "\u6C7D",
        "\u6751",
        "\u96F2",
        "\u54EA",
        "\u65E2",
        "\u8DDD",
        "\u885B",
        "\u505C",
        "\u70C8",
        "\u592E",
        "\u5BDF",
        "\u71D2",
        "\u8FC5",
        "\u5883",
        "\u82E5",
        "\u5370",
        "\u6D32",
        "\u523B",
        "\u62EC",
        "\u6FC0",
        "\u5B54",
        "\u641E",
        "\u751A",
        "\u5BA4",
        "\u5F85",
        "\u6838",
        "\u6821",
        "\u6563",
        "\u4FB5",
        "\u5427",
        "\u7532",
        "\u904A",
        "\u4E45",
        "\u83DC",
        "\u5473",
        "\u820A",
        "\u6A21",
        "\u6E56",
        "\u8CA8",
        "\u640D",
        "\u9810",
        "\u963B",
        "\u6BEB",
        "\u666E",
        "\u7A69",
        "\u4E59",
        "\u5ABD",
        "\u690D",
        "\u606F",
        "\u64F4",
        "\u9280",
        "\u8A9E",
        "\u63EE",
        "\u9152",
        "\u5B88",
        "\u62FF",
        "\u5E8F",
        "\u7D19",
        "\u91AB",
        "\u7F3A",
        "\u96E8",
        "\u55CE",
        "\u91DD",
        "\u5289",
        "\u554A",
        "\u6025",
        "\u5531",
        "\u8AA4",
        "\u8A13",
        "\u9858",
        "\u5BE9",
        "\u9644",
        "\u7372",
        "\u8336",
        "\u9BAE",
        "\u7CE7",
        "\u65A4",
        "\u5B69",
        "\u812B",
        "\u786B",
        "\u80A5",
        "\u5584",
        "\u9F8D",
        "\u6F14",
        "\u7236",
        "\u6F38",
        "\u8840",
        "\u6B61",
        "\u68B0",
        "\u638C",
        "\u6B4C",
        "\u6C99",
        "\u525B",
        "\u653B",
        "\u8B02",
        "\u76FE",
        "\u8A0E",
        "\u665A",
        "\u7C92",
        "\u4E82",
        "\u71C3",
        "\u77DB",
        "\u4E4E",
        "\u6BBA",
        "\u85E5",
        "\u5BE7",
        "\u9B6F",
        "\u8CB4",
        "\u9418",
        "\u7164",
        "\u8B80",
        "\u73ED",
        "\u4F2F",
        "\u9999",
        "\u4ECB",
        "\u8FEB",
        "\u53E5",
        "\u8C50",
        "\u57F9",
        "\u63E1",
        "\u862D",
        "\u64D4",
        "\u5F26",
        "\u86CB",
        "\u6C89",
        "\u5047",
        "\u7A7F",
        "\u57F7",
        "\u7B54",
        "\u6A02",
        "\u8AB0",
        "\u9806",
        "\u7159",
        "\u7E2E",
        "\u5FB5",
        "\u81C9",
        "\u559C",
        "\u677E",
        "\u8173",
        "\u56F0",
        "\u7570",
        "\u514D",
        "\u80CC",
        "\u661F",
        "\u798F",
        "\u8CB7",
        "\u67D3",
        "\u4E95",
        "\u6982",
        "\u6162",
        "\u6015",
        "\u78C1",
        "\u500D",
        "\u7956",
        "\u7687",
        "\u4FC3",
        "\u975C",
        "\u88DC",
        "\u8A55",
        "\u7FFB",
        "\u8089",
        "\u8E10",
        "\u5C3C",
        "\u8863",
        "\u5BEC",
        "\u63DA",
        "\u68C9",
        "\u5E0C",
        "\u50B7",
        "\u64CD",
        "\u5782",
        "\u79CB",
        "\u5B9C",
        "\u6C2B",
        "\u5957",
        "\u7763",
        "\u632F",
        "\u67B6",
        "\u4EAE",
        "\u672B",
        "\u61B2",
        "\u6176",
        "\u7DE8",
        "\u725B",
        "\u89F8",
        "\u6620",
        "\u96F7",
        "\u92B7",
        "\u8A69",
        "\u5EA7",
        "\u5C45",
        "\u6293",
        "\u88C2",
        "\u80DE",
        "\u547C",
        "\u5A18",
        "\u666F",
        "\u5A01",
        "\u7DA0",
        "\u6676",
        "\u539A",
        "\u76DF",
        "\u8861",
        "\u96DE",
        "\u5B6B",
        "\u5EF6",
        "\u5371",
        "\u81A0",
        "\u5C4B",
        "\u9109",
        "\u81E8",
        "\u9678",
        "\u9867",
        "\u6389",
        "\u5440",
        "\u71C8",
        "\u6B72",
        "\u63AA",
        "\u675F",
        "\u8010",
        "\u5287",
        "\u7389",
        "\u8D99",
        "\u8DF3",
        "\u54E5",
        "\u5B63",
        "\u8AB2",
        "\u51F1",
        "\u80E1",
        "\u984D",
        "\u6B3E",
        "\u7D39",
        "\u5377",
        "\u9F4A",
        "\u5049",
        "\u84B8",
        "\u6B96",
        "\u6C38",
        "\u5B97",
        "\u82D7",
        "\u5DDD",
        "\u7210",
        "\u5CA9",
        "\u5F31",
        "\u96F6",
        "\u694A",
        "\u594F",
        "\u6CBF",
        "\u9732",
        "\u687F",
        "\u63A2",
        "\u6ED1",
        "\u93AE",
        "\u98EF",
        "\u6FC3",
        "\u822A",
        "\u61F7",
        "\u8D95",
        "\u5EAB",
        "\u596A",
        "\u4F0A",
        "\u9748",
        "\u7A05",
        "\u9014",
        "\u6EC5",
        "\u8CFD",
        "\u6B78",
        "\u53EC",
        "\u9F13",
        "\u64AD",
        "\u76E4",
        "\u88C1",
        "\u96AA",
        "\u5EB7",
        "\u552F",
        "\u9304",
        "\u83CC",
        "\u7D14",
        "\u501F",
        "\u7CD6",
        "\u84CB",
        "\u6A6B",
        "\u7B26",
        "\u79C1",
        "\u52AA",
        "\u5802",
        "\u57DF",
        "\u69CD",
        "\u6F64",
        "\u5E45",
        "\u54C8",
        "\u7ADF",
        "\u719F",
        "\u87F2",
        "\u6FA4",
        "\u8166",
        "\u58E4",
        "\u78B3",
        "\u6B50",
        "\u904D",
        "\u5074",
        "\u5BE8",
        "\u6562",
        "\u5FB9",
        "\u616E",
        "\u659C",
        "\u8584",
        "\u5EAD",
        "\u7D0D",
        "\u5F48",
        "\u98FC",
        "\u4F38",
        "\u6298",
        "\u9EA5",
        "\u6FD5",
        "\u6697",
        "\u8377",
        "\u74E6",
        "\u585E",
        "\u5E8A",
        "\u7BC9",
        "\u60E1",
        "\u6236",
        "\u8A2A",
        "\u5854",
        "\u5947",
        "\u900F",
        "\u6881",
        "\u5200",
        "\u65CB",
        "\u8DE1",
        "\u5361",
        "\u6C2F",
        "\u9047",
        "\u4EFD",
        "\u6BD2",
        "\u6CE5",
        "\u9000",
        "\u6D17",
        "\u64FA",
        "\u7070",
        "\u5F69",
        "\u8CE3",
        "\u8017",
        "\u590F",
        "\u64C7",
        "\u5FD9",
        "\u9285",
        "\u737B",
        "\u786C",
        "\u4E88",
        "\u7E41",
        "\u5708",
        "\u96EA",
        "\u51FD",
        "\u4EA6",
        "\u62BD",
        "\u7BC7",
        "\u9663",
        "\u9670",
        "\u4E01",
        "\u5C3A",
        "\u8FFD",
        "\u5806",
        "\u96C4",
        "\u8FCE",
        "\u6CDB",
        "\u7238",
        "\u6A13",
        "\u907F",
        "\u8B00",
        "\u5678",
        "\u91CE",
        "\u8C6C",
        "\u65D7",
        "\u7D2F",
        "\u504F",
        "\u5178",
        "\u9928",
        "\u7D22",
        "\u79E6",
        "\u8102",
        "\u6F6E",
        "\u723A",
        "\u8C46",
        "\u5FFD",
        "\u6258",
        "\u9A5A",
        "\u5851",
        "\u907A",
        "\u6108",
        "\u6731",
        "\u66FF",
        "\u7E96",
        "\u7C97",
        "\u50BE",
        "\u5C1A",
        "\u75DB",
        "\u695A",
        "\u8B1D",
        "\u596E",
        "\u8CFC",
        "\u78E8",
        "\u541B",
        "\u6C60",
        "\u65C1",
        "\u788E",
        "\u9AA8",
        "\u76E3",
        "\u6355",
        "\u5F1F",
        "\u66B4",
        "\u5272",
        "\u8CAB",
        "\u6B8A",
        "\u91CB",
        "\u8A5E",
        "\u4EA1",
        "\u58C1",
        "\u9813",
        "\u5BF6",
        "\u5348",
        "\u5875",
        "\u805E",
        "\u63ED",
        "\u70AE",
        "\u6B98",
        "\u51AC",
        "\u6A4B",
        "\u5A66",
        "\u8B66",
        "\u7D9C",
        "\u62DB",
        "\u5433",
        "\u4ED8",
        "\u6D6E",
        "\u906D",
        "\u5F90",
        "\u60A8",
        "\u6416",
        "\u8C37",
        "\u8D0A",
        "\u7BB1",
        "\u9694",
        "\u8A02",
        "\u7537",
        "\u5439",
        "\u5712",
        "\u7D1B",
        "\u5510",
        "\u6557",
        "\u5B8B",
        "\u73BB",
        "\u5DE8",
        "\u8015",
        "\u5766",
        "\u69AE",
        "\u9589",
        "\u7063",
        "\u9375",
        "\u51E1",
        "\u99D0",
        "\u934B",
        "\u6551",
        "\u6069",
        "\u525D",
        "\u51DD",
        "\u9E7C",
        "\u9F52",
        "\u622A",
        "\u7149",
        "\u9EBB",
        "\u7D21",
        "\u7981",
        "\u5EE2",
        "\u76DB",
        "\u7248",
        "\u7DE9",
        "\u6DE8",
        "\u775B",
        "\u660C",
        "\u5A5A",
        "\u6D89",
        "\u7B52",
        "\u5634",
        "\u63D2",
        "\u5CB8",
        "\u6717",
        "\u838A",
        "\u8857",
        "\u85CF",
        "\u59D1",
        "\u8CBF",
        "\u8150",
        "\u5974",
        "\u5566",
        "\u6163",
        "\u4E58",
        "\u5925",
        "\u6062",
        "\u52FB",
        "\u7D17",
        "\u624E",
        "\u8FAF",
        "\u8033",
        "\u5F6A",
        "\u81E3",
        "\u5104",
        "\u7483",
        "\u62B5",
        "\u8108",
        "\u79C0",
        "\u85A9",
        "\u4FC4",
        "\u7DB2",
        "\u821E",
        "\u5E97",
        "\u5674",
        "\u7E31",
        "\u5BF8",
        "\u6C57",
        "\u639B",
        "\u6D2A",
        "\u8CC0",
        "\u9583",
        "\u67EC",
        "\u7206",
        "\u70EF",
        "\u6D25",
        "\u7A3B",
        "\u7246",
        "\u8EDF",
        "\u52C7",
        "\u50CF",
        "\u6EFE",
        "\u5398",
        "\u8499",
        "\u82B3",
        "\u80AF",
        "\u5761",
        "\u67F1",
        "\u76EA",
        "\u817F",
        "\u5100",
        "\u65C5",
        "\u5C3E",
        "\u8ECB",
        "\u51B0",
        "\u8CA2",
        "\u767B",
        "\u9ECE",
        "\u524A",
        "\u947D",
        "\u52D2",
        "\u9003",
        "\u969C",
        "\u6C28",
        "\u90ED",
        "\u5CF0",
        "\u5E63",
        "\u6E2F",
        "\u4F0F",
        "\u8ECC",
        "\u755D",
        "\u7562",
        "\u64E6",
        "\u83AB",
        "\u523A",
        "\u6D6A",
        "\u79D8",
        "\u63F4",
        "\u682A",
        "\u5065",
        "\u552E",
        "\u80A1",
        "\u5CF6",
        "\u7518",
        "\u6CE1",
        "\u7761",
        "\u7AE5",
        "\u9444",
        "\u6E6F",
        "\u95A5",
        "\u4F11",
        "\u532F",
        "\u820D",
        "\u7267",
        "\u7E5E",
        "\u70B8",
        "\u54F2",
        "\u78F7",
        "\u7E3E",
        "\u670B",
        "\u6DE1",
        "\u5C16",
        "\u555F",
        "\u9677",
        "\u67F4",
        "\u5448",
        "\u5F92",
        "\u984F",
        "\u6DDA",
        "\u7A0D",
        "\u5FD8",
        "\u6CF5",
        "\u85CD",
        "\u62D6",
        "\u6D1E",
        "\u6388",
        "\u93E1",
        "\u8F9B",
        "\u58EF",
        "\u92D2",
        "\u8CA7",
        "\u865B",
        "\u5F4E",
        "\u6469",
        "\u6CF0",
        "\u5E7C",
        "\u5EF7",
        "\u5C0A",
        "\u7A97",
        "\u7DB1",
        "\u5F04",
        "\u96B8",
        "\u7591",
        "\u6C0F",
        "\u5BAE",
        "\u59D0",
        "\u9707",
        "\u745E",
        "\u602A",
        "\u5C24",
        "\u7434",
        "\u5FAA",
        "\u63CF",
        "\u819C",
        "\u9055",
        "\u593E",
        "\u8170",
        "\u7DE3",
        "\u73E0",
        "\u7AAE",
        "\u68EE",
        "\u679D",
        "\u7AF9",
        "\u6E9D",
        "\u50AC",
        "\u7E69",
        "\u61B6",
        "\u90A6",
        "\u5269",
        "\u5E78",
        "\u6F3F",
        "\u6B04",
        "\u64C1",
        "\u7259",
        "\u8CAF",
        "\u79AE",
        "\u6FFE",
        "\u9209",
        "\u7D0B",
        "\u7F77",
        "\u62CD",
        "\u54B1",
        "\u558A",
        "\u8896",
        "\u57C3",
        "\u52E4",
        "\u7F70",
        "\u7126",
        "\u6F5B",
        "\u4F0D",
        "\u58A8",
        "\u6B32",
        "\u7E2B",
        "\u59D3",
        "\u520A",
        "\u98FD",
        "\u4EFF",
        "\u734E",
        "\u92C1",
        "\u9B3C",
        "\u9E97",
        "\u8DE8",
        "\u9ED8",
        "\u6316",
        "\u93C8",
        "\u6383",
        "\u559D",
        "\u888B",
        "\u70AD",
        "\u6C61",
        "\u5E55",
        "\u8AF8",
        "\u5F27",
        "\u52F5",
        "\u6885",
        "\u5976",
        "\u6F54",
        "\u707D",
        "\u821F",
        "\u9451",
        "\u82EF",
        "\u8A1F",
        "\u62B1",
        "\u6BC0",
        "\u61C2",
        "\u5BD2",
        "\u667A",
        "\u57D4",
        "\u5BC4",
        "\u5C46",
        "\u8E8D",
        "\u6E21",
        "\u6311",
        "\u4E39",
        "\u8271",
        "\u8C9D",
        "\u78B0",
        "\u62D4",
        "\u7239",
        "\u6234",
        "\u78BC",
        "\u5922",
        "\u82BD",
        "\u7194",
        "\u8D64",
        "\u6F01",
        "\u54ED",
        "\u656C",
        "\u9846",
        "\u5954",
        "\u925B",
        "\u4EF2",
        "\u864E",
        "\u7A00",
        "\u59B9",
        "\u4E4F",
        "\u73CD",
        "\u7533",
        "\u684C",
        "\u9075",
        "\u5141",
        "\u9686",
        "\u87BA",
        "\u5009",
        "\u9B4F",
        "\u92B3",
        "\u66C9",
        "\u6C2E",
        "\u517C",
        "\u96B1",
        "\u7919",
        "\u8D6B",
        "\u64A5",
        "\u5FE0",
        "\u8085",
        "\u7F38",
        "\u727D",
        "\u6436",
        "\u535A",
        "\u5DE7",
        "\u6BBC",
        "\u5144",
        "\u675C",
        "\u8A0A",
        "\u8AA0",
        "\u78A7",
        "\u7965",
        "\u67EF",
        "\u9801",
        "\u5DE1",
        "\u77E9",
        "\u60B2",
        "\u704C",
        "\u9F61",
        "\u502B",
        "\u7968",
        "\u5C0B",
        "\u6842",
        "\u92EA",
        "\u8056",
        "\u6050",
        "\u6070",
        "\u912D",
        "\u8DA3",
        "\u62AC",
        "\u8352",
        "\u9A30",
        "\u8CBC",
        "\u67D4",
        "\u6EF4",
        "\u731B",
        "\u95CA",
        "\u8F1B",
        "\u59BB",
        "\u586B",
        "\u64A4",
        "\u5132",
        "\u7C3D",
        "\u9B27",
        "\u64FE",
        "\u7D2B",
        "\u7802",
        "\u905E",
        "\u6232",
        "\u540A",
        "\u9676",
        "\u4F10",
        "\u9935",
        "\u7642",
        "\u74F6",
        "\u5A46",
        "\u64AB",
        "\u81C2",
        "\u6478",
        "\u5FCD",
        "\u8766",
        "\u881F",
        "\u9130",
        "\u80F8",
        "\u978F",
        "\u64E0",
        "\u5076",
        "\u68C4",
        "\u69FD",
        "\u52C1",
        "\u4E73",
        "\u9127",
        "\u5409",
        "\u4EC1",
        "\u721B",
        "\u78DA",
        "\u79DF",
        "\u70CF",
        "\u8266",
        "\u4F34",
        "\u74DC",
        "\u6DFA",
        "\u4E19",
        "\u66AB",
        "\u71E5",
        "\u6A61",
        "\u67F3",
        "\u8FF7",
        "\u6696",
        "\u724C",
        "\u79E7",
        "\u81BD",
        "\u8A73",
        "\u7C27",
        "\u8E0F",
        "\u74F7",
        "\u8B5C",
        "\u5446",
        "\u8CD3",
        "\u7CCA",
        "\u6D1B",
        "\u8F1D",
        "\u61A4",
        "\u7AF6",
        "\u9699",
        "\u6012",
        "\u7C98",
        "\u4E43",
        "\u7DD2",
        "\u80A9",
        "\u7C4D",
        "\u654F",
        "\u5857",
        "\u7199",
        "\u7686",
        "\u5075",
        "\u61F8",
        "\u6398",
        "\u4EAB",
        "\u7CFE",
        "\u9192",
        "\u72C2",
        "\u9396",
        "\u6DC0",
        "\u6068",
        "\u7272",
        "\u9738",
        "\u722C",
        "\u8CDE",
        "\u9006",
        "\u73A9",
        "\u9675",
        "\u795D",
        "\u79D2",
        "\u6D59",
        "\u8C8C",
        "\u5F79",
        "\u5F7C",
        "\u6089",
        "\u9D28",
        "\u8DA8",
        "\u9CF3",
        "\u6668",
        "\u755C",
        "\u8F29",
        "\u79E9",
        "\u5375",
        "\u7F72",
        "\u68AF",
        "\u708E",
        "\u7058",
        "\u68CB",
        "\u9A45",
        "\u7BE9",
        "\u5CFD",
        "\u5192",
        "\u5565",
        "\u58FD",
        "\u8B6F",
        "\u6D78",
        "\u6CC9",
        "\u5E3D",
        "\u9072",
        "\u77FD",
        "\u7586",
        "\u8CB8",
        "\u6F0F",
        "\u7A3F",
        "\u51A0",
        "\u5AE9",
        "\u8105",
        "\u82AF",
        "\u7262",
        "\u53DB",
        "\u8755",
        "\u5967",
        "\u9CF4",
        "\u5DBA",
        "\u7F8A",
        "\u6191",
        "\u4E32",
        "\u5858",
        "\u7E6A",
        "\u9175",
        "\u878D",
        "\u76C6",
        "\u932B",
        "\u5EDF",
        "\u7C4C",
        "\u51CD",
        "\u8F14",
        "\u651D",
        "\u8972",
        "\u7B4B",
        "\u62D2",
        "\u50DA",
        "\u65F1",
        "\u9240",
        "\u9CE5",
        "\u6F06",
        "\u6C88",
        "\u7709",
        "\u758F",
        "\u6DFB",
        "\u68D2",
        "\u7A57",
        "\u785D",
        "\u97D3",
        "\u903C",
        "\u626D",
        "\u50D1",
        "\u6DBC",
        "\u633A",
        "\u7897",
        "\u683D",
        "\u7092",
        "\u676F",
        "\u60A3",
        "\u993E",
        "\u52F8",
        "\u8C6A",
        "\u907C",
        "\u52C3",
        "\u9D3B",
        "\u65E6",
        "\u540F",
        "\u62DC",
        "\u72D7",
        "\u57CB",
        "\u8F25",
        "\u63A9",
        "\u98F2",
        "\u642C",
        "\u7F75",
        "\u8FAD",
        "\u52FE",
        "\u6263",
        "\u4F30",
        "\u8523",
        "\u7D68",
        "\u9727",
        "\u4E08",
        "\u6735",
        "\u59C6",
        "\u64EC",
        "\u5B87",
        "\u8F2F",
        "\u965D",
        "\u96D5",
        "\u511F",
        "\u84C4",
        "\u5D07",
        "\u526A",
        "\u5021",
        "\u5EF3",
        "\u54AC",
        "\u99DB",
        "\u85AF",
        "\u5237",
        "\u65A5",
        "\u756A",
        "\u8CE6",
        "\u5949",
        "\u4F5B",
        "\u6F86",
        "\u6F2B",
        "\u66FC",
        "\u6247",
        "\u9223",
        "\u6843",
        "\u6276",
        "\u4ED4",
        "\u8FD4",
        "\u4FD7",
        "\u8667",
        "\u8154",
        "\u978B",
        "\u68F1",
        "\u8986",
        "\u6846",
        "\u6084",
        "\u53D4",
        "\u649E",
        "\u9A19",
        "\u52D8",
        "\u65FA",
        "\u6CB8",
        "\u5B64",
        "\u5410",
        "\u5B5F",
        "\u6E20",
        "\u5C48",
        "\u75BE",
        "\u5999",
        "\u60DC",
        "\u4EF0",
        "\u72E0",
        "\u8139",
        "\u8AE7",
        "\u62CB",
        "\u9EF4",
        "\u6851",
        "\u5D17",
        "\u561B",
        "\u8870",
        "\u76DC",
        "\u6EF2",
        "\u81DF",
        "\u8CF4",
        "\u6E67",
        "\u751C",
        "\u66F9",
        "\u95B1",
        "\u808C",
        "\u54E9",
        "\u53B2",
        "\u70F4",
        "\u7DEF",
        "\u6BC5",
        "\u6628",
        "\u507D",
        "\u75C7",
        "\u716E",
        "\u5606",
        "\u91D8",
        "\u642D",
        "\u8396",
        "\u7C60",
        "\u9177",
        "\u5077",
        "\u5F13",
        "\u9310",
        "\u6046",
        "\u5091",
        "\u5751",
        "\u9F3B",
        "\u7FFC",
        "\u7DB8",
        "\u6558",
        "\u7344",
        "\u902E",
        "\u7F50",
        "\u7D61",
        "\u68DA",
        "\u6291",
        "\u81A8",
        "\u852C",
        "\u5BFA",
        "\u9A5F",
        "\u7A46",
        "\u51B6",
        "\u67AF",
        "\u518A",
        "\u5C4D",
        "\u51F8",
        "\u7D33",
        "\u576F",
        "\u72A7",
        "\u7130",
        "\u8F5F",
        "\u6B23",
        "\u6649",
        "\u7626",
        "\u79A6",
        "\u9320",
        "\u9326",
        "\u55AA",
        "\u65EC",
        "\u935B",
        "\u58DF",
        "\u641C",
        "\u64B2",
        "\u9080",
        "\u4EAD",
        "\u916F",
        "\u9081",
        "\u8212",
        "\u8106",
        "\u9176",
        "\u9592",
        "\u6182",
        "\u915A",
        "\u9811",
        "\u7FBD",
        "\u6F32",
        "\u5378",
        "\u4ED7",
        "\u966A",
        "\u95E2",
        "\u61F2",
        "\u676D",
        "\u59DA",
        "\u809A",
        "\u6349",
        "\u98C4",
        "\u6F02",
        "\u6606",
        "\u6B3A",
        "\u543E",
        "\u90CE",
        "\u70F7",
        "\u6C41",
        "\u5475",
        "\u98FE",
        "\u856D",
        "\u96C5",
        "\u90F5",
        "\u9077",
        "\u71D5",
        "\u6492",
        "\u59FB",
        "\u8D74",
        "\u5BB4",
        "\u7169",
        "\u50B5",
        "\u5E33",
        "\u6591",
        "\u9234",
        "\u65E8",
        "\u9187",
        "\u8463",
        "\u9905",
        "\u96DB",
        "\u59FF",
        "\u62CC",
        "\u5085",
        "\u8179",
        "\u59A5",
        "\u63C9",
        "\u8CE2",
        "\u62C6",
        "\u6B6A",
        "\u8461",
        "\u80FA",
        "\u4E1F",
        "\u6D69",
        "\u5FBD",
        "\u6602",
        "\u588A",
        "\u64CB",
        "\u89BD",
        "\u8CAA",
        "\u6170",
        "\u7E73",
        "\u6C6A",
        "\u614C",
        "\u99AE",
        "\u8AFE",
        "\u59DC",
        "\u8ABC",
        "\u5147",
        "\u52A3",
        "\u8AA3",
        "\u8000",
        "\u660F",
        "\u8EBA",
        "\u76C8",
        "\u9A0E",
        "\u55AC",
        "\u6EAA",
        "\u53E2",
        "\u76E7",
        "\u62B9",
        "\u60B6",
        "\u8AEE",
        "\u522E",
        "\u99D5",
        "\u7E9C",
        "\u609F",
        "\u6458",
        "\u927A",
        "\u64F2",
        "\u9817",
        "\u5E7B",
        "\u67C4",
        "\u60E0",
        "\u6158",
        "\u4F73",
        "\u4EC7",
        "\u81D8",
        "\u7AA9",
        "\u6ECC",
        "\u528D",
        "\u77A7",
        "\u5821",
        "\u6F51",
        "\u8525",
        "\u7F69",
        "\u970D",
        "\u6488",
        "\u80CE",
        "\u84BC",
        "\u6FF1",
        "\u5006",
        "\u6345",
        "\u6E58",
        "\u780D",
        "\u971E",
        "\u90B5",
        "\u8404",
        "\u760B",
        "\u6DEE",
        "\u9042",
        "\u718A",
        "\u7CDE",
        "\u70D8",
        "\u5BBF",
        "\u6A94",
        "\u6208",
        "\u99C1",
        "\u5AC2",
        "\u88D5",
        "\u5F99",
        "\u7BAD",
        "\u6350",
        "\u8178",
        "\u6490",
        "\u66EC",
        "\u8FA8",
        "\u6BBF",
        "\u84EE",
        "\u6524",
        "\u652A",
        "\u91AC",
        "\u5C4F",
        "\u75AB",
        "\u54C0",
        "\u8521",
        "\u5835",
        "\u6CAB",
        "\u76BA",
        "\u66A2",
        "\u758A",
        "\u95A3",
        "\u840A",
        "\u6572",
        "\u8F44",
        "\u9264",
        "\u75D5",
        "\u58E9",
        "\u5DF7",
        "\u9913",
        "\u798D",
        "\u4E18",
        "\u7384",
        "\u6E9C",
        "\u66F0",
        "\u908F",
        "\u5F6D",
        "\u5617",
        "\u537F",
        "\u59A8",
        "\u8247",
        "\u541E",
        "\u97CB",
        "\u6028",
        "\u77EE",
        "\u6B47"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/french.js
  var require_french = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/french.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "abaisser",
        "abandon",
        "abdiquer",
        "abeille",
        "abolir",
        "aborder",
        "aboutir",
        "aboyer",
        "abrasif",
        "abreuver",
        "abriter",
        "abroger",
        "abrupt",
        "absence",
        "absolu",
        "absurde",
        "abusif",
        "abyssal",
        "acade\u0301mie",
        "acajou",
        "acarien",
        "accabler",
        "accepter",
        "acclamer",
        "accolade",
        "accroche",
        "accuser",
        "acerbe",
        "achat",
        "acheter",
        "aciduler",
        "acier",
        "acompte",
        "acque\u0301rir",
        "acronyme",
        "acteur",
        "actif",
        "actuel",
        "adepte",
        "ade\u0301quat",
        "adhe\u0301sif",
        "adjectif",
        "adjuger",
        "admettre",
        "admirer",
        "adopter",
        "adorer",
        "adoucir",
        "adresse",
        "adroit",
        "adulte",
        "adverbe",
        "ae\u0301rer",
        "ae\u0301ronef",
        "affaire",
        "affecter",
        "affiche",
        "affreux",
        "affubler",
        "agacer",
        "agencer",
        "agile",
        "agiter",
        "agrafer",
        "agre\u0301able",
        "agrume",
        "aider",
        "aiguille",
        "ailier",
        "aimable",
        "aisance",
        "ajouter",
        "ajuster",
        "alarmer",
        "alchimie",
        "alerte",
        "alge\u0300bre",
        "algue",
        "alie\u0301ner",
        "aliment",
        "alle\u0301ger",
        "alliage",
        "allouer",
        "allumer",
        "alourdir",
        "alpaga",
        "altesse",
        "alve\u0301ole",
        "amateur",
        "ambigu",
        "ambre",
        "ame\u0301nager",
        "amertume",
        "amidon",
        "amiral",
        "amorcer",
        "amour",
        "amovible",
        "amphibie",
        "ampleur",
        "amusant",
        "analyse",
        "anaphore",
        "anarchie",
        "anatomie",
        "ancien",
        "ane\u0301antir",
        "angle",
        "angoisse",
        "anguleux",
        "animal",
        "annexer",
        "annonce",
        "annuel",
        "anodin",
        "anomalie",
        "anonyme",
        "anormal",
        "antenne",
        "antidote",
        "anxieux",
        "apaiser",
        "ape\u0301ritif",
        "aplanir",
        "apologie",
        "appareil",
        "appeler",
        "apporter",
        "appuyer",
        "aquarium",
        "aqueduc",
        "arbitre",
        "arbuste",
        "ardeur",
        "ardoise",
        "argent",
        "arlequin",
        "armature",
        "armement",
        "armoire",
        "armure",
        "arpenter",
        "arracher",
        "arriver",
        "arroser",
        "arsenic",
        "arte\u0301riel",
        "article",
        "aspect",
        "asphalte",
        "aspirer",
        "assaut",
        "asservir",
        "assiette",
        "associer",
        "assurer",
        "asticot",
        "astre",
        "astuce",
        "atelier",
        "atome",
        "atrium",
        "atroce",
        "attaque",
        "attentif",
        "attirer",
        "attraper",
        "aubaine",
        "auberge",
        "audace",
        "audible",
        "augurer",
        "aurore",
        "automne",
        "autruche",
        "avaler",
        "avancer",
        "avarice",
        "avenir",
        "averse",
        "aveugle",
        "aviateur",
        "avide",
        "avion",
        "aviser",
        "avoine",
        "avouer",
        "avril",
        "axial",
        "axiome",
        "badge",
        "bafouer",
        "bagage",
        "baguette",
        "baignade",
        "balancer",
        "balcon",
        "baleine",
        "balisage",
        "bambin",
        "bancaire",
        "bandage",
        "banlieue",
        "bannie\u0300re",
        "banquier",
        "barbier",
        "baril",
        "baron",
        "barque",
        "barrage",
        "bassin",
        "bastion",
        "bataille",
        "bateau",
        "batterie",
        "baudrier",
        "bavarder",
        "belette",
        "be\u0301lier",
        "belote",
        "be\u0301ne\u0301fice",
        "berceau",
        "berger",
        "berline",
        "bermuda",
        "besace",
        "besogne",
        "be\u0301tail",
        "beurre",
        "biberon",
        "bicycle",
        "bidule",
        "bijou",
        "bilan",
        "bilingue",
        "billard",
        "binaire",
        "biologie",
        "biopsie",
        "biotype",
        "biscuit",
        "bison",
        "bistouri",
        "bitume",
        "bizarre",
        "blafard",
        "blague",
        "blanchir",
        "blessant",
        "blinder",
        "blond",
        "bloquer",
        "blouson",
        "bobard",
        "bobine",
        "boire",
        "boiser",
        "bolide",
        "bonbon",
        "bondir",
        "bonheur",
        "bonifier",
        "bonus",
        "bordure",
        "borne",
        "botte",
        "boucle",
        "boueux",
        "bougie",
        "boulon",
        "bouquin",
        "bourse",
        "boussole",
        "boutique",
        "boxeur",
        "branche",
        "brasier",
        "brave",
        "brebis",
        "bre\u0300che",
        "breuvage",
        "bricoler",
        "brigade",
        "brillant",
        "brioche",
        "brique",
        "brochure",
        "broder",
        "bronzer",
        "brousse",
        "broyeur",
        "brume",
        "brusque",
        "brutal",
        "bruyant",
        "buffle",
        "buisson",
        "bulletin",
        "bureau",
        "burin",
        "bustier",
        "butiner",
        "butoir",
        "buvable",
        "buvette",
        "cabanon",
        "cabine",
        "cachette",
        "cadeau",
        "cadre",
        "cafe\u0301ine",
        "caillou",
        "caisson",
        "calculer",
        "calepin",
        "calibre",
        "calmer",
        "calomnie",
        "calvaire",
        "camarade",
        "came\u0301ra",
        "camion",
        "campagne",
        "canal",
        "caneton",
        "canon",
        "cantine",
        "canular",
        "capable",
        "caporal",
        "caprice",
        "capsule",
        "capter",
        "capuche",
        "carabine",
        "carbone",
        "caresser",
        "caribou",
        "carnage",
        "carotte",
        "carreau",
        "carton",
        "cascade",
        "casier",
        "casque",
        "cassure",
        "causer",
        "caution",
        "cavalier",
        "caverne",
        "caviar",
        "ce\u0301dille",
        "ceinture",
        "ce\u0301leste",
        "cellule",
        "cendrier",
        "censurer",
        "central",
        "cercle",
        "ce\u0301re\u0301bral",
        "cerise",
        "cerner",
        "cerveau",
        "cesser",
        "chagrin",
        "chaise",
        "chaleur",
        "chambre",
        "chance",
        "chapitre",
        "charbon",
        "chasseur",
        "chaton",
        "chausson",
        "chavirer",
        "chemise",
        "chenille",
        "che\u0301quier",
        "chercher",
        "cheval",
        "chien",
        "chiffre",
        "chignon",
        "chime\u0300re",
        "chiot",
        "chlorure",
        "chocolat",
        "choisir",
        "chose",
        "chouette",
        "chrome",
        "chute",
        "cigare",
        "cigogne",
        "cimenter",
        "cine\u0301ma",
        "cintrer",
        "circuler",
        "cirer",
        "cirque",
        "citerne",
        "citoyen",
        "citron",
        "civil",
        "clairon",
        "clameur",
        "claquer",
        "classe",
        "clavier",
        "client",
        "cligner",
        "climat",
        "clivage",
        "cloche",
        "clonage",
        "cloporte",
        "cobalt",
        "cobra",
        "cocasse",
        "cocotier",
        "coder",
        "codifier",
        "coffre",
        "cogner",
        "cohe\u0301sion",
        "coiffer",
        "coincer",
        "cole\u0300re",
        "colibri",
        "colline",
        "colmater",
        "colonel",
        "combat",
        "come\u0301die",
        "commande",
        "compact",
        "concert",
        "conduire",
        "confier",
        "congeler",
        "connoter",
        "consonne",
        "contact",
        "convexe",
        "copain",
        "copie",
        "corail",
        "corbeau",
        "cordage",
        "corniche",
        "corpus",
        "correct",
        "corte\u0300ge",
        "cosmique",
        "costume",
        "coton",
        "coude",
        "coupure",
        "courage",
        "couteau",
        "couvrir",
        "coyote",
        "crabe",
        "crainte",
        "cravate",
        "crayon",
        "cre\u0301ature",
        "cre\u0301diter",
        "cre\u0301meux",
        "creuser",
        "crevette",
        "cribler",
        "crier",
        "cristal",
        "crite\u0300re",
        "croire",
        "croquer",
        "crotale",
        "crucial",
        "cruel",
        "crypter",
        "cubique",
        "cueillir",
        "cuille\u0300re",
        "cuisine",
        "cuivre",
        "culminer",
        "cultiver",
        "cumuler",
        "cupide",
        "curatif",
        "curseur",
        "cyanure",
        "cycle",
        "cylindre",
        "cynique",
        "daigner",
        "damier",
        "danger",
        "danseur",
        "dauphin",
        "de\u0301battre",
        "de\u0301biter",
        "de\u0301border",
        "de\u0301brider",
        "de\u0301butant",
        "de\u0301caler",
        "de\u0301cembre",
        "de\u0301chirer",
        "de\u0301cider",
        "de\u0301clarer",
        "de\u0301corer",
        "de\u0301crire",
        "de\u0301cupler",
        "de\u0301dale",
        "de\u0301ductif",
        "de\u0301esse",
        "de\u0301fensif",
        "de\u0301filer",
        "de\u0301frayer",
        "de\u0301gager",
        "de\u0301givrer",
        "de\u0301glutir",
        "de\u0301grafer",
        "de\u0301jeuner",
        "de\u0301lice",
        "de\u0301loger",
        "demander",
        "demeurer",
        "de\u0301molir",
        "de\u0301nicher",
        "de\u0301nouer",
        "dentelle",
        "de\u0301nuder",
        "de\u0301part",
        "de\u0301penser",
        "de\u0301phaser",
        "de\u0301placer",
        "de\u0301poser",
        "de\u0301ranger",
        "de\u0301rober",
        "de\u0301sastre",
        "descente",
        "de\u0301sert",
        "de\u0301signer",
        "de\u0301sobe\u0301ir",
        "dessiner",
        "destrier",
        "de\u0301tacher",
        "de\u0301tester",
        "de\u0301tourer",
        "de\u0301tresse",
        "devancer",
        "devenir",
        "deviner",
        "devoir",
        "diable",
        "dialogue",
        "diamant",
        "dicter",
        "diffe\u0301rer",
        "dige\u0301rer",
        "digital",
        "digne",
        "diluer",
        "dimanche",
        "diminuer",
        "dioxyde",
        "directif",
        "diriger",
        "discuter",
        "disposer",
        "dissiper",
        "distance",
        "divertir",
        "diviser",
        "docile",
        "docteur",
        "dogme",
        "doigt",
        "domaine",
        "domicile",
        "dompter",
        "donateur",
        "donjon",
        "donner",
        "dopamine",
        "dortoir",
        "dorure",
        "dosage",
        "doseur",
        "dossier",
        "dotation",
        "douanier",
        "double",
        "douceur",
        "douter",
        "doyen",
        "dragon",
        "draper",
        "dresser",
        "dribbler",
        "droiture",
        "duperie",
        "duplexe",
        "durable",
        "durcir",
        "dynastie",
        "e\u0301blouir",
        "e\u0301carter",
        "e\u0301charpe",
        "e\u0301chelle",
        "e\u0301clairer",
        "e\u0301clipse",
        "e\u0301clore",
        "e\u0301cluse",
        "e\u0301cole",
        "e\u0301conomie",
        "e\u0301corce",
        "e\u0301couter",
        "e\u0301craser",
        "e\u0301cre\u0301mer",
        "e\u0301crivain",
        "e\u0301crou",
        "e\u0301cume",
        "e\u0301cureuil",
        "e\u0301difier",
        "e\u0301duquer",
        "effacer",
        "effectif",
        "effigie",
        "effort",
        "effrayer",
        "effusion",
        "e\u0301galiser",
        "e\u0301garer",
        "e\u0301jecter",
        "e\u0301laborer",
        "e\u0301largir",
        "e\u0301lectron",
        "e\u0301le\u0301gant",
        "e\u0301le\u0301phant",
        "e\u0301le\u0300ve",
        "e\u0301ligible",
        "e\u0301litisme",
        "e\u0301loge",
        "e\u0301lucider",
        "e\u0301luder",
        "emballer",
        "embellir",
        "embryon",
        "e\u0301meraude",
        "e\u0301mission",
        "emmener",
        "e\u0301motion",
        "e\u0301mouvoir",
        "empereur",
        "employer",
        "emporter",
        "emprise",
        "e\u0301mulsion",
        "encadrer",
        "enche\u0300re",
        "enclave",
        "encoche",
        "endiguer",
        "endosser",
        "endroit",
        "enduire",
        "e\u0301nergie",
        "enfance",
        "enfermer",
        "enfouir",
        "engager",
        "engin",
        "englober",
        "e\u0301nigme",
        "enjamber",
        "enjeu",
        "enlever",
        "ennemi",
        "ennuyeux",
        "enrichir",
        "enrobage",
        "enseigne",
        "entasser",
        "entendre",
        "entier",
        "entourer",
        "entraver",
        "e\u0301nume\u0301rer",
        "envahir",
        "enviable",
        "envoyer",
        "enzyme",
        "e\u0301olien",
        "e\u0301paissir",
        "e\u0301pargne",
        "e\u0301patant",
        "e\u0301paule",
        "e\u0301picerie",
        "e\u0301pide\u0301mie",
        "e\u0301pier",
        "e\u0301pilogue",
        "e\u0301pine",
        "e\u0301pisode",
        "e\u0301pitaphe",
        "e\u0301poque",
        "e\u0301preuve",
        "e\u0301prouver",
        "e\u0301puisant",
        "e\u0301querre",
        "e\u0301quipe",
        "e\u0301riger",
        "e\u0301rosion",
        "erreur",
        "e\u0301ruption",
        "escalier",
        "espadon",
        "espe\u0300ce",
        "espie\u0300gle",
        "espoir",
        "esprit",
        "esquiver",
        "essayer",
        "essence",
        "essieu",
        "essorer",
        "estime",
        "estomac",
        "estrade",
        "e\u0301tage\u0300re",
        "e\u0301taler",
        "e\u0301tanche",
        "e\u0301tatique",
        "e\u0301teindre",
        "e\u0301tendoir",
        "e\u0301ternel",
        "e\u0301thanol",
        "e\u0301thique",
        "ethnie",
        "e\u0301tirer",
        "e\u0301toffer",
        "e\u0301toile",
        "e\u0301tonnant",
        "e\u0301tourdir",
        "e\u0301trange",
        "e\u0301troit",
        "e\u0301tude",
        "euphorie",
        "e\u0301valuer",
        "e\u0301vasion",
        "e\u0301ventail",
        "e\u0301vidence",
        "e\u0301viter",
        "e\u0301volutif",
        "e\u0301voquer",
        "exact",
        "exage\u0301rer",
        "exaucer",
        "exceller",
        "excitant",
        "exclusif",
        "excuse",
        "exe\u0301cuter",
        "exemple",
        "exercer",
        "exhaler",
        "exhorter",
        "exigence",
        "exiler",
        "exister",
        "exotique",
        "expe\u0301dier",
        "explorer",
        "exposer",
        "exprimer",
        "exquis",
        "extensif",
        "extraire",
        "exulter",
        "fable",
        "fabuleux",
        "facette",
        "facile",
        "facture",
        "faiblir",
        "falaise",
        "fameux",
        "famille",
        "farceur",
        "farfelu",
        "farine",
        "farouche",
        "fasciner",
        "fatal",
        "fatigue",
        "faucon",
        "fautif",
        "faveur",
        "favori",
        "fe\u0301brile",
        "fe\u0301conder",
        "fe\u0301de\u0301rer",
        "fe\u0301lin",
        "femme",
        "fe\u0301mur",
        "fendoir",
        "fe\u0301odal",
        "fermer",
        "fe\u0301roce",
        "ferveur",
        "festival",
        "feuille",
        "feutre",
        "fe\u0301vrier",
        "fiasco",
        "ficeler",
        "fictif",
        "fide\u0300le",
        "figure",
        "filature",
        "filetage",
        "filie\u0300re",
        "filleul",
        "filmer",
        "filou",
        "filtrer",
        "financer",
        "finir",
        "fiole",
        "firme",
        "fissure",
        "fixer",
        "flairer",
        "flamme",
        "flasque",
        "flatteur",
        "fle\u0301au",
        "fle\u0300che",
        "fleur",
        "flexion",
        "flocon",
        "flore",
        "fluctuer",
        "fluide",
        "fluvial",
        "folie",
        "fonderie",
        "fongible",
        "fontaine",
        "forcer",
        "forgeron",
        "formuler",
        "fortune",
        "fossile",
        "foudre",
        "fouge\u0300re",
        "fouiller",
        "foulure",
        "fourmi",
        "fragile",
        "fraise",
        "franchir",
        "frapper",
        "frayeur",
        "fre\u0301gate",
        "freiner",
        "frelon",
        "fre\u0301mir",
        "fre\u0301ne\u0301sie",
        "fre\u0300re",
        "friable",
        "friction",
        "frisson",
        "frivole",
        "froid",
        "fromage",
        "frontal",
        "frotter",
        "fruit",
        "fugitif",
        "fuite",
        "fureur",
        "furieux",
        "furtif",
        "fusion",
        "futur",
        "gagner",
        "galaxie",
        "galerie",
        "gambader",
        "garantir",
        "gardien",
        "garnir",
        "garrigue",
        "gazelle",
        "gazon",
        "ge\u0301ant",
        "ge\u0301latine",
        "ge\u0301lule",
        "gendarme",
        "ge\u0301ne\u0301ral",
        "ge\u0301nie",
        "genou",
        "gentil",
        "ge\u0301ologie",
        "ge\u0301ome\u0300tre",
        "ge\u0301ranium",
        "germe",
        "gestuel",
        "geyser",
        "gibier",
        "gicler",
        "girafe",
        "givre",
        "glace",
        "glaive",
        "glisser",
        "globe",
        "gloire",
        "glorieux",
        "golfeur",
        "gomme",
        "gonfler",
        "gorge",
        "gorille",
        "goudron",
        "gouffre",
        "goulot",
        "goupille",
        "gourmand",
        "goutte",
        "graduel",
        "graffiti",
        "graine",
        "grand",
        "grappin",
        "gratuit",
        "gravir",
        "grenat",
        "griffure",
        "griller",
        "grimper",
        "grogner",
        "gronder",
        "grotte",
        "groupe",
        "gruger",
        "grutier",
        "gruye\u0300re",
        "gue\u0301pard",
        "guerrier",
        "guide",
        "guimauve",
        "guitare",
        "gustatif",
        "gymnaste",
        "gyrostat",
        "habitude",
        "hachoir",
        "halte",
        "hameau",
        "hangar",
        "hanneton",
        "haricot",
        "harmonie",
        "harpon",
        "hasard",
        "he\u0301lium",
        "he\u0301matome",
        "herbe",
        "he\u0301risson",
        "hermine",
        "he\u0301ron",
        "he\u0301siter",
        "heureux",
        "hiberner",
        "hibou",
        "hilarant",
        "histoire",
        "hiver",
        "homard",
        "hommage",
        "homoge\u0300ne",
        "honneur",
        "honorer",
        "honteux",
        "horde",
        "horizon",
        "horloge",
        "hormone",
        "horrible",
        "houleux",
        "housse",
        "hublot",
        "huileux",
        "humain",
        "humble",
        "humide",
        "humour",
        "hurler",
        "hydromel",
        "hygie\u0300ne",
        "hymne",
        "hypnose",
        "idylle",
        "ignorer",
        "iguane",
        "illicite",
        "illusion",
        "image",
        "imbiber",
        "imiter",
        "immense",
        "immobile",
        "immuable",
        "impact",
        "impe\u0301rial",
        "implorer",
        "imposer",
        "imprimer",
        "imputer",
        "incarner",
        "incendie",
        "incident",
        "incliner",
        "incolore",
        "indexer",
        "indice",
        "inductif",
        "ine\u0301dit",
        "ineptie",
        "inexact",
        "infini",
        "infliger",
        "informer",
        "infusion",
        "inge\u0301rer",
        "inhaler",
        "inhiber",
        "injecter",
        "injure",
        "innocent",
        "inoculer",
        "inonder",
        "inscrire",
        "insecte",
        "insigne",
        "insolite",
        "inspirer",
        "instinct",
        "insulter",
        "intact",
        "intense",
        "intime",
        "intrigue",
        "intuitif",
        "inutile",
        "invasion",
        "inventer",
        "inviter",
        "invoquer",
        "ironique",
        "irradier",
        "irre\u0301el",
        "irriter",
        "isoler",
        "ivoire",
        "ivresse",
        "jaguar",
        "jaillir",
        "jambe",
        "janvier",
        "jardin",
        "jauger",
        "jaune",
        "javelot",
        "jetable",
        "jeton",
        "jeudi",
        "jeunesse",
        "joindre",
        "joncher",
        "jongler",
        "joueur",
        "jouissif",
        "journal",
        "jovial",
        "joyau",
        "joyeux",
        "jubiler",
        "jugement",
        "junior",
        "jupon",
        "juriste",
        "justice",
        "juteux",
        "juve\u0301nile",
        "kayak",
        "kimono",
        "kiosque",
        "label",
        "labial",
        "labourer",
        "lace\u0301rer",
        "lactose",
        "lagune",
        "laine",
        "laisser",
        "laitier",
        "lambeau",
        "lamelle",
        "lampe",
        "lanceur",
        "langage",
        "lanterne",
        "lapin",
        "largeur",
        "larme",
        "laurier",
        "lavabo",
        "lavoir",
        "lecture",
        "le\u0301gal",
        "le\u0301ger",
        "le\u0301gume",
        "lessive",
        "lettre",
        "levier",
        "lexique",
        "le\u0301zard",
        "liasse",
        "libe\u0301rer",
        "libre",
        "licence",
        "licorne",
        "lie\u0300ge",
        "lie\u0300vre",
        "ligature",
        "ligoter",
        "ligue",
        "limer",
        "limite",
        "limonade",
        "limpide",
        "line\u0301aire",
        "lingot",
        "lionceau",
        "liquide",
        "lisie\u0300re",
        "lister",
        "lithium",
        "litige",
        "littoral",
        "livreur",
        "logique",
        "lointain",
        "loisir",
        "lombric",
        "loterie",
        "louer",
        "lourd",
        "loutre",
        "louve",
        "loyal",
        "lubie",
        "lucide",
        "lucratif",
        "lueur",
        "lugubre",
        "luisant",
        "lumie\u0300re",
        "lunaire",
        "lundi",
        "luron",
        "lutter",
        "luxueux",
        "machine",
        "magasin",
        "magenta",
        "magique",
        "maigre",
        "maillon",
        "maintien",
        "mairie",
        "maison",
        "majorer",
        "malaxer",
        "male\u0301fice",
        "malheur",
        "malice",
        "mallette",
        "mammouth",
        "mandater",
        "maniable",
        "manquant",
        "manteau",
        "manuel",
        "marathon",
        "marbre",
        "marchand",
        "mardi",
        "maritime",
        "marqueur",
        "marron",
        "marteler",
        "mascotte",
        "massif",
        "mate\u0301riel",
        "matie\u0300re",
        "matraque",
        "maudire",
        "maussade",
        "mauve",
        "maximal",
        "me\u0301chant",
        "me\u0301connu",
        "me\u0301daille",
        "me\u0301decin",
        "me\u0301diter",
        "me\u0301duse",
        "meilleur",
        "me\u0301lange",
        "me\u0301lodie",
        "membre",
        "me\u0301moire",
        "menacer",
        "mener",
        "menhir",
        "mensonge",
        "mentor",
        "mercredi",
        "me\u0301rite",
        "merle",
        "messager",
        "mesure",
        "me\u0301tal",
        "me\u0301te\u0301ore",
        "me\u0301thode",
        "me\u0301tier",
        "meuble",
        "miauler",
        "microbe",
        "miette",
        "mignon",
        "migrer",
        "milieu",
        "million",
        "mimique",
        "mince",
        "mine\u0301ral",
        "minimal",
        "minorer",
        "minute",
        "miracle",
        "miroiter",
        "missile",
        "mixte",
        "mobile",
        "moderne",
        "moelleux",
        "mondial",
        "moniteur",
        "monnaie",
        "monotone",
        "monstre",
        "montagne",
        "monument",
        "moqueur",
        "morceau",
        "morsure",
        "mortier",
        "moteur",
        "motif",
        "mouche",
        "moufle",
        "moulin",
        "mousson",
        "mouton",
        "mouvant",
        "multiple",
        "munition",
        "muraille",
        "mure\u0300ne",
        "murmure",
        "muscle",
        "muse\u0301um",
        "musicien",
        "mutation",
        "muter",
        "mutuel",
        "myriade",
        "myrtille",
        "myste\u0300re",
        "mythique",
        "nageur",
        "nappe",
        "narquois",
        "narrer",
        "natation",
        "nation",
        "nature",
        "naufrage",
        "nautique",
        "navire",
        "ne\u0301buleux",
        "nectar",
        "ne\u0301faste",
        "ne\u0301gation",
        "ne\u0301gliger",
        "ne\u0301gocier",
        "neige",
        "nerveux",
        "nettoyer",
        "neurone",
        "neutron",
        "neveu",
        "niche",
        "nickel",
        "nitrate",
        "niveau",
        "noble",
        "nocif",
        "nocturne",
        "noirceur",
        "noisette",
        "nomade",
        "nombreux",
        "nommer",
        "normatif",
        "notable",
        "notifier",
        "notoire",
        "nourrir",
        "nouveau",
        "novateur",
        "novembre",
        "novice",
        "nuage",
        "nuancer",
        "nuire",
        "nuisible",
        "nume\u0301ro",
        "nuptial",
        "nuque",
        "nutritif",
        "obe\u0301ir",
        "objectif",
        "obliger",
        "obscur",
        "observer",
        "obstacle",
        "obtenir",
        "obturer",
        "occasion",
        "occuper",
        "oce\u0301an",
        "octobre",
        "octroyer",
        "octupler",
        "oculaire",
        "odeur",
        "odorant",
        "offenser",
        "officier",
        "offrir",
        "ogive",
        "oiseau",
        "oisillon",
        "olfactif",
        "olivier",
        "ombrage",
        "omettre",
        "onctueux",
        "onduler",
        "one\u0301reux",
        "onirique",
        "opale",
        "opaque",
        "ope\u0301rer",
        "opinion",
        "opportun",
        "opprimer",
        "opter",
        "optique",
        "orageux",
        "orange",
        "orbite",
        "ordonner",
        "oreille",
        "organe",
        "orgueil",
        "orifice",
        "ornement",
        "orque",
        "ortie",
        "osciller",
        "osmose",
        "ossature",
        "otarie",
        "ouragan",
        "ourson",
        "outil",
        "outrager",
        "ouvrage",
        "ovation",
        "oxyde",
        "oxyge\u0300ne",
        "ozone",
        "paisible",
        "palace",
        "palmare\u0300s",
        "palourde",
        "palper",
        "panache",
        "panda",
        "pangolin",
        "paniquer",
        "panneau",
        "panorama",
        "pantalon",
        "papaye",
        "papier",
        "papoter",
        "papyrus",
        "paradoxe",
        "parcelle",
        "paresse",
        "parfumer",
        "parler",
        "parole",
        "parrain",
        "parsemer",
        "partager",
        "parure",
        "parvenir",
        "passion",
        "paste\u0300que",
        "paternel",
        "patience",
        "patron",
        "pavillon",
        "pavoiser",
        "payer",
        "paysage",
        "peigne",
        "peintre",
        "pelage",
        "pe\u0301lican",
        "pelle",
        "pelouse",
        "peluche",
        "pendule",
        "pe\u0301ne\u0301trer",
        "pe\u0301nible",
        "pensif",
        "pe\u0301nurie",
        "pe\u0301pite",
        "pe\u0301plum",
        "perdrix",
        "perforer",
        "pe\u0301riode",
        "permuter",
        "perplexe",
        "persil",
        "perte",
        "peser",
        "pe\u0301tale",
        "petit",
        "pe\u0301trir",
        "peuple",
        "pharaon",
        "phobie",
        "phoque",
        "photon",
        "phrase",
        "physique",
        "piano",
        "pictural",
        "pie\u0300ce",
        "pierre",
        "pieuvre",
        "pilote",
        "pinceau",
        "pipette",
        "piquer",
        "pirogue",
        "piscine",
        "piston",
        "pivoter",
        "pixel",
        "pizza",
        "placard",
        "plafond",
        "plaisir",
        "planer",
        "plaque",
        "plastron",
        "plateau",
        "pleurer",
        "plexus",
        "pliage",
        "plomb",
        "plonger",
        "pluie",
        "plumage",
        "pochette",
        "poe\u0301sie",
        "poe\u0300te",
        "pointe",
        "poirier",
        "poisson",
        "poivre",
        "polaire",
        "policier",
        "pollen",
        "polygone",
        "pommade",
        "pompier",
        "ponctuel",
        "ponde\u0301rer",
        "poney",
        "portique",
        "position",
        "posse\u0301der",
        "posture",
        "potager",
        "poteau",
        "potion",
        "pouce",
        "poulain",
        "poumon",
        "pourpre",
        "poussin",
        "pouvoir",
        "prairie",
        "pratique",
        "pre\u0301cieux",
        "pre\u0301dire",
        "pre\u0301fixe",
        "pre\u0301lude",
        "pre\u0301nom",
        "pre\u0301sence",
        "pre\u0301texte",
        "pre\u0301voir",
        "primitif",
        "prince",
        "prison",
        "priver",
        "proble\u0300me",
        "proce\u0301der",
        "prodige",
        "profond",
        "progre\u0300s",
        "proie",
        "projeter",
        "prologue",
        "promener",
        "propre",
        "prospe\u0300re",
        "prote\u0301ger",
        "prouesse",
        "proverbe",
        "prudence",
        "pruneau",
        "psychose",
        "public",
        "puceron",
        "puiser",
        "pulpe",
        "pulsar",
        "punaise",
        "punitif",
        "pupitre",
        "purifier",
        "puzzle",
        "pyramide",
        "quasar",
        "querelle",
        "question",
        "quie\u0301tude",
        "quitter",
        "quotient",
        "racine",
        "raconter",
        "radieux",
        "ragondin",
        "raideur",
        "raisin",
        "ralentir",
        "rallonge",
        "ramasser",
        "rapide",
        "rasage",
        "ratisser",
        "ravager",
        "ravin",
        "rayonner",
        "re\u0301actif",
        "re\u0301agir",
        "re\u0301aliser",
        "re\u0301animer",
        "recevoir",
        "re\u0301citer",
        "re\u0301clamer",
        "re\u0301colter",
        "recruter",
        "reculer",
        "recycler",
        "re\u0301diger",
        "redouter",
        "refaire",
        "re\u0301flexe",
        "re\u0301former",
        "refrain",
        "refuge",
        "re\u0301galien",
        "re\u0301gion",
        "re\u0301glage",
        "re\u0301gulier",
        "re\u0301ite\u0301rer",
        "rejeter",
        "rejouer",
        "relatif",
        "relever",
        "relief",
        "remarque",
        "reme\u0300de",
        "remise",
        "remonter",
        "remplir",
        "remuer",
        "renard",
        "renfort",
        "renifler",
        "renoncer",
        "rentrer",
        "renvoi",
        "replier",
        "reporter",
        "reprise",
        "reptile",
        "requin",
        "re\u0301serve",
        "re\u0301sineux",
        "re\u0301soudre",
        "respect",
        "rester",
        "re\u0301sultat",
        "re\u0301tablir",
        "retenir",
        "re\u0301ticule",
        "retomber",
        "retracer",
        "re\u0301union",
        "re\u0301ussir",
        "revanche",
        "revivre",
        "re\u0301volte",
        "re\u0301vulsif",
        "richesse",
        "rideau",
        "rieur",
        "rigide",
        "rigoler",
        "rincer",
        "riposter",
        "risible",
        "risque",
        "rituel",
        "rival",
        "rivie\u0300re",
        "rocheux",
        "romance",
        "rompre",
        "ronce",
        "rondin",
        "roseau",
        "rosier",
        "rotatif",
        "rotor",
        "rotule",
        "rouge",
        "rouille",
        "rouleau",
        "routine",
        "royaume",
        "ruban",
        "rubis",
        "ruche",
        "ruelle",
        "rugueux",
        "ruiner",
        "ruisseau",
        "ruser",
        "rustique",
        "rythme",
        "sabler",
        "saboter",
        "sabre",
        "sacoche",
        "safari",
        "sagesse",
        "saisir",
        "salade",
        "salive",
        "salon",
        "saluer",
        "samedi",
        "sanction",
        "sanglier",
        "sarcasme",
        "sardine",
        "saturer",
        "saugrenu",
        "saumon",
        "sauter",
        "sauvage",
        "savant",
        "savonner",
        "scalpel",
        "scandale",
        "sce\u0301le\u0301rat",
        "sce\u0301nario",
        "sceptre",
        "sche\u0301ma",
        "science",
        "scinder",
        "score",
        "scrutin",
        "sculpter",
        "se\u0301ance",
        "se\u0301cable",
        "se\u0301cher",
        "secouer",
        "se\u0301cre\u0301ter",
        "se\u0301datif",
        "se\u0301duire",
        "seigneur",
        "se\u0301jour",
        "se\u0301lectif",
        "semaine",
        "sembler",
        "semence",
        "se\u0301minal",
        "se\u0301nateur",
        "sensible",
        "sentence",
        "se\u0301parer",
        "se\u0301quence",
        "serein",
        "sergent",
        "se\u0301rieux",
        "serrure",
        "se\u0301rum",
        "service",
        "se\u0301same",
        "se\u0301vir",
        "sevrage",
        "sextuple",
        "side\u0301ral",
        "sie\u0300cle",
        "sie\u0301ger",
        "siffler",
        "sigle",
        "signal",
        "silence",
        "silicium",
        "simple",
        "since\u0300re",
        "sinistre",
        "siphon",
        "sirop",
        "sismique",
        "situer",
        "skier",
        "social",
        "socle",
        "sodium",
        "soigneux",
        "soldat",
        "soleil",
        "solitude",
        "soluble",
        "sombre",
        "sommeil",
        "somnoler",
        "sonde",
        "songeur",
        "sonnette",
        "sonore",
        "sorcier",
        "sortir",
        "sosie",
        "sottise",
        "soucieux",
        "soudure",
        "souffle",
        "soulever",
        "soupape",
        "source",
        "soutirer",
        "souvenir",
        "spacieux",
        "spatial",
        "spe\u0301cial",
        "sphe\u0300re",
        "spiral",
        "stable",
        "station",
        "sternum",
        "stimulus",
        "stipuler",
        "strict",
        "studieux",
        "stupeur",
        "styliste",
        "sublime",
        "substrat",
        "subtil",
        "subvenir",
        "succe\u0300s",
        "sucre",
        "suffixe",
        "sugge\u0301rer",
        "suiveur",
        "sulfate",
        "superbe",
        "supplier",
        "surface",
        "suricate",
        "surmener",
        "surprise",
        "sursaut",
        "survie",
        "suspect",
        "syllabe",
        "symbole",
        "syme\u0301trie",
        "synapse",
        "syntaxe",
        "syste\u0300me",
        "tabac",
        "tablier",
        "tactile",
        "tailler",
        "talent",
        "talisman",
        "talonner",
        "tambour",
        "tamiser",
        "tangible",
        "tapis",
        "taquiner",
        "tarder",
        "tarif",
        "tartine",
        "tasse",
        "tatami",
        "tatouage",
        "taupe",
        "taureau",
        "taxer",
        "te\u0301moin",
        "temporel",
        "tenaille",
        "tendre",
        "teneur",
        "tenir",
        "tension",
        "terminer",
        "terne",
        "terrible",
        "te\u0301tine",
        "texte",
        "the\u0300me",
        "the\u0301orie",
        "the\u0301rapie",
        "thorax",
        "tibia",
        "tie\u0300de",
        "timide",
        "tirelire",
        "tiroir",
        "tissu",
        "titane",
        "titre",
        "tituber",
        "toboggan",
        "tole\u0301rant",
        "tomate",
        "tonique",
        "tonneau",
        "toponyme",
        "torche",
        "tordre",
        "tornade",
        "torpille",
        "torrent",
        "torse",
        "tortue",
        "totem",
        "toucher",
        "tournage",
        "tousser",
        "toxine",
        "traction",
        "trafic",
        "tragique",
        "trahir",
        "train",
        "trancher",
        "travail",
        "tre\u0300fle",
        "tremper",
        "tre\u0301sor",
        "treuil",
        "triage",
        "tribunal",
        "tricoter",
        "trilogie",
        "triomphe",
        "tripler",
        "triturer",
        "trivial",
        "trombone",
        "tronc",
        "tropical",
        "troupeau",
        "tuile",
        "tulipe",
        "tumulte",
        "tunnel",
        "turbine",
        "tuteur",
        "tutoyer",
        "tuyau",
        "tympan",
        "typhon",
        "typique",
        "tyran",
        "ubuesque",
        "ultime",
        "ultrason",
        "unanime",
        "unifier",
        "union",
        "unique",
        "unitaire",
        "univers",
        "uranium",
        "urbain",
        "urticant",
        "usage",
        "usine",
        "usuel",
        "usure",
        "utile",
        "utopie",
        "vacarme",
        "vaccin",
        "vagabond",
        "vague",
        "vaillant",
        "vaincre",
        "vaisseau",
        "valable",
        "valise",
        "vallon",
        "valve",
        "vampire",
        "vanille",
        "vapeur",
        "varier",
        "vaseux",
        "vassal",
        "vaste",
        "vecteur",
        "vedette",
        "ve\u0301ge\u0301tal",
        "ve\u0301hicule",
        "veinard",
        "ve\u0301loce",
        "vendredi",
        "ve\u0301ne\u0301rer",
        "venger",
        "venimeux",
        "ventouse",
        "verdure",
        "ve\u0301rin",
        "vernir",
        "verrou",
        "verser",
        "vertu",
        "veston",
        "ve\u0301te\u0301ran",
        "ve\u0301tuste",
        "vexant",
        "vexer",
        "viaduc",
        "viande",
        "victoire",
        "vidange",
        "vide\u0301o",
        "vignette",
        "vigueur",
        "vilain",
        "village",
        "vinaigre",
        "violon",
        "vipe\u0300re",
        "virement",
        "virtuose",
        "virus",
        "visage",
        "viseur",
        "vision",
        "visqueux",
        "visuel",
        "vital",
        "vitesse",
        "viticole",
        "vitrine",
        "vivace",
        "vivipare",
        "vocation",
        "voguer",
        "voile",
        "voisin",
        "voiture",
        "volaille",
        "volcan",
        "voltiger",
        "volume",
        "vorace",
        "vortex",
        "voter",
        "vouloir",
        "voyage",
        "voyelle",
        "wagon",
        "xe\u0301non",
        "yacht",
        "ze\u0300bre",
        "ze\u0301nith",
        "zeste",
        "zoologie"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/english.js
  var require_english = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/english.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "abandon",
        "ability",
        "able",
        "about",
        "above",
        "absent",
        "absorb",
        "abstract",
        "absurd",
        "abuse",
        "access",
        "accident",
        "account",
        "accuse",
        "achieve",
        "acid",
        "acoustic",
        "acquire",
        "across",
        "act",
        "action",
        "actor",
        "actress",
        "actual",
        "adapt",
        "add",
        "addict",
        "address",
        "adjust",
        "admit",
        "adult",
        "advance",
        "advice",
        "aerobic",
        "affair",
        "afford",
        "afraid",
        "again",
        "age",
        "agent",
        "agree",
        "ahead",
        "aim",
        "air",
        "airport",
        "aisle",
        "alarm",
        "album",
        "alcohol",
        "alert",
        "alien",
        "all",
        "alley",
        "allow",
        "almost",
        "alone",
        "alpha",
        "already",
        "also",
        "alter",
        "always",
        "amateur",
        "amazing",
        "among",
        "amount",
        "amused",
        "analyst",
        "anchor",
        "ancient",
        "anger",
        "angle",
        "angry",
        "animal",
        "ankle",
        "announce",
        "annual",
        "another",
        "answer",
        "antenna",
        "antique",
        "anxiety",
        "any",
        "apart",
        "apology",
        "appear",
        "apple",
        "approve",
        "april",
        "arch",
        "arctic",
        "area",
        "arena",
        "argue",
        "arm",
        "armed",
        "armor",
        "army",
        "around",
        "arrange",
        "arrest",
        "arrive",
        "arrow",
        "art",
        "artefact",
        "artist",
        "artwork",
        "ask",
        "aspect",
        "assault",
        "asset",
        "assist",
        "assume",
        "asthma",
        "athlete",
        "atom",
        "attack",
        "attend",
        "attitude",
        "attract",
        "auction",
        "audit",
        "august",
        "aunt",
        "author",
        "auto",
        "autumn",
        "average",
        "avocado",
        "avoid",
        "awake",
        "aware",
        "away",
        "awesome",
        "awful",
        "awkward",
        "axis",
        "baby",
        "bachelor",
        "bacon",
        "badge",
        "bag",
        "balance",
        "balcony",
        "ball",
        "bamboo",
        "banana",
        "banner",
        "bar",
        "barely",
        "bargain",
        "barrel",
        "base",
        "basic",
        "basket",
        "battle",
        "beach",
        "bean",
        "beauty",
        "because",
        "become",
        "beef",
        "before",
        "begin",
        "behave",
        "behind",
        "believe",
        "below",
        "belt",
        "bench",
        "benefit",
        "best",
        "betray",
        "better",
        "between",
        "beyond",
        "bicycle",
        "bid",
        "bike",
        "bind",
        "biology",
        "bird",
        "birth",
        "bitter",
        "black",
        "blade",
        "blame",
        "blanket",
        "blast",
        "bleak",
        "bless",
        "blind",
        "blood",
        "blossom",
        "blouse",
        "blue",
        "blur",
        "blush",
        "board",
        "boat",
        "body",
        "boil",
        "bomb",
        "bone",
        "bonus",
        "book",
        "boost",
        "border",
        "boring",
        "borrow",
        "boss",
        "bottom",
        "bounce",
        "box",
        "boy",
        "bracket",
        "brain",
        "brand",
        "brass",
        "brave",
        "bread",
        "breeze",
        "brick",
        "bridge",
        "brief",
        "bright",
        "bring",
        "brisk",
        "broccoli",
        "broken",
        "bronze",
        "broom",
        "brother",
        "brown",
        "brush",
        "bubble",
        "buddy",
        "budget",
        "buffalo",
        "build",
        "bulb",
        "bulk",
        "bullet",
        "bundle",
        "bunker",
        "burden",
        "burger",
        "burst",
        "bus",
        "business",
        "busy",
        "butter",
        "buyer",
        "buzz",
        "cabbage",
        "cabin",
        "cable",
        "cactus",
        "cage",
        "cake",
        "call",
        "calm",
        "camera",
        "camp",
        "can",
        "canal",
        "cancel",
        "candy",
        "cannon",
        "canoe",
        "canvas",
        "canyon",
        "capable",
        "capital",
        "captain",
        "car",
        "carbon",
        "card",
        "cargo",
        "carpet",
        "carry",
        "cart",
        "case",
        "cash",
        "casino",
        "castle",
        "casual",
        "cat",
        "catalog",
        "catch",
        "category",
        "cattle",
        "caught",
        "cause",
        "caution",
        "cave",
        "ceiling",
        "celery",
        "cement",
        "census",
        "century",
        "cereal",
        "certain",
        "chair",
        "chalk",
        "champion",
        "change",
        "chaos",
        "chapter",
        "charge",
        "chase",
        "chat",
        "cheap",
        "check",
        "cheese",
        "chef",
        "cherry",
        "chest",
        "chicken",
        "chief",
        "child",
        "chimney",
        "choice",
        "choose",
        "chronic",
        "chuckle",
        "chunk",
        "churn",
        "cigar",
        "cinnamon",
        "circle",
        "citizen",
        "city",
        "civil",
        "claim",
        "clap",
        "clarify",
        "claw",
        "clay",
        "clean",
        "clerk",
        "clever",
        "click",
        "client",
        "cliff",
        "climb",
        "clinic",
        "clip",
        "clock",
        "clog",
        "close",
        "cloth",
        "cloud",
        "clown",
        "club",
        "clump",
        "cluster",
        "clutch",
        "coach",
        "coast",
        "coconut",
        "code",
        "coffee",
        "coil",
        "coin",
        "collect",
        "color",
        "column",
        "combine",
        "come",
        "comfort",
        "comic",
        "common",
        "company",
        "concert",
        "conduct",
        "confirm",
        "congress",
        "connect",
        "consider",
        "control",
        "convince",
        "cook",
        "cool",
        "copper",
        "copy",
        "coral",
        "core",
        "corn",
        "correct",
        "cost",
        "cotton",
        "couch",
        "country",
        "couple",
        "course",
        "cousin",
        "cover",
        "coyote",
        "crack",
        "cradle",
        "craft",
        "cram",
        "crane",
        "crash",
        "crater",
        "crawl",
        "crazy",
        "cream",
        "credit",
        "creek",
        "crew",
        "cricket",
        "crime",
        "crisp",
        "critic",
        "crop",
        "cross",
        "crouch",
        "crowd",
        "crucial",
        "cruel",
        "cruise",
        "crumble",
        "crunch",
        "crush",
        "cry",
        "crystal",
        "cube",
        "culture",
        "cup",
        "cupboard",
        "curious",
        "current",
        "curtain",
        "curve",
        "cushion",
        "custom",
        "cute",
        "cycle",
        "dad",
        "damage",
        "damp",
        "dance",
        "danger",
        "daring",
        "dash",
        "daughter",
        "dawn",
        "day",
        "deal",
        "debate",
        "debris",
        "decade",
        "december",
        "decide",
        "decline",
        "decorate",
        "decrease",
        "deer",
        "defense",
        "define",
        "defy",
        "degree",
        "delay",
        "deliver",
        "demand",
        "demise",
        "denial",
        "dentist",
        "deny",
        "depart",
        "depend",
        "deposit",
        "depth",
        "deputy",
        "derive",
        "describe",
        "desert",
        "design",
        "desk",
        "despair",
        "destroy",
        "detail",
        "detect",
        "develop",
        "device",
        "devote",
        "diagram",
        "dial",
        "diamond",
        "diary",
        "dice",
        "diesel",
        "diet",
        "differ",
        "digital",
        "dignity",
        "dilemma",
        "dinner",
        "dinosaur",
        "direct",
        "dirt",
        "disagree",
        "discover",
        "disease",
        "dish",
        "dismiss",
        "disorder",
        "display",
        "distance",
        "divert",
        "divide",
        "divorce",
        "dizzy",
        "doctor",
        "document",
        "dog",
        "doll",
        "dolphin",
        "domain",
        "donate",
        "donkey",
        "donor",
        "door",
        "dose",
        "double",
        "dove",
        "draft",
        "dragon",
        "drama",
        "drastic",
        "draw",
        "dream",
        "dress",
        "drift",
        "drill",
        "drink",
        "drip",
        "drive",
        "drop",
        "drum",
        "dry",
        "duck",
        "dumb",
        "dune",
        "during",
        "dust",
        "dutch",
        "duty",
        "dwarf",
        "dynamic",
        "eager",
        "eagle",
        "early",
        "earn",
        "earth",
        "easily",
        "east",
        "easy",
        "echo",
        "ecology",
        "economy",
        "edge",
        "edit",
        "educate",
        "effort",
        "egg",
        "eight",
        "either",
        "elbow",
        "elder",
        "electric",
        "elegant",
        "element",
        "elephant",
        "elevator",
        "elite",
        "else",
        "embark",
        "embody",
        "embrace",
        "emerge",
        "emotion",
        "employ",
        "empower",
        "empty",
        "enable",
        "enact",
        "end",
        "endless",
        "endorse",
        "enemy",
        "energy",
        "enforce",
        "engage",
        "engine",
        "enhance",
        "enjoy",
        "enlist",
        "enough",
        "enrich",
        "enroll",
        "ensure",
        "enter",
        "entire",
        "entry",
        "envelope",
        "episode",
        "equal",
        "equip",
        "era",
        "erase",
        "erode",
        "erosion",
        "error",
        "erupt",
        "escape",
        "essay",
        "essence",
        "estate",
        "eternal",
        "ethics",
        "evidence",
        "evil",
        "evoke",
        "evolve",
        "exact",
        "example",
        "excess",
        "exchange",
        "excite",
        "exclude",
        "excuse",
        "execute",
        "exercise",
        "exhaust",
        "exhibit",
        "exile",
        "exist",
        "exit",
        "exotic",
        "expand",
        "expect",
        "expire",
        "explain",
        "expose",
        "express",
        "extend",
        "extra",
        "eye",
        "eyebrow",
        "fabric",
        "face",
        "faculty",
        "fade",
        "faint",
        "faith",
        "fall",
        "false",
        "fame",
        "family",
        "famous",
        "fan",
        "fancy",
        "fantasy",
        "farm",
        "fashion",
        "fat",
        "fatal",
        "father",
        "fatigue",
        "fault",
        "favorite",
        "feature",
        "february",
        "federal",
        "fee",
        "feed",
        "feel",
        "female",
        "fence",
        "festival",
        "fetch",
        "fever",
        "few",
        "fiber",
        "fiction",
        "field",
        "figure",
        "file",
        "film",
        "filter",
        "final",
        "find",
        "fine",
        "finger",
        "finish",
        "fire",
        "firm",
        "first",
        "fiscal",
        "fish",
        "fit",
        "fitness",
        "fix",
        "flag",
        "flame",
        "flash",
        "flat",
        "flavor",
        "flee",
        "flight",
        "flip",
        "float",
        "flock",
        "floor",
        "flower",
        "fluid",
        "flush",
        "fly",
        "foam",
        "focus",
        "fog",
        "foil",
        "fold",
        "follow",
        "food",
        "foot",
        "force",
        "forest",
        "forget",
        "fork",
        "fortune",
        "forum",
        "forward",
        "fossil",
        "foster",
        "found",
        "fox",
        "fragile",
        "frame",
        "frequent",
        "fresh",
        "friend",
        "fringe",
        "frog",
        "front",
        "frost",
        "frown",
        "frozen",
        "fruit",
        "fuel",
        "fun",
        "funny",
        "furnace",
        "fury",
        "future",
        "gadget",
        "gain",
        "galaxy",
        "gallery",
        "game",
        "gap",
        "garage",
        "garbage",
        "garden",
        "garlic",
        "garment",
        "gas",
        "gasp",
        "gate",
        "gather",
        "gauge",
        "gaze",
        "general",
        "genius",
        "genre",
        "gentle",
        "genuine",
        "gesture",
        "ghost",
        "giant",
        "gift",
        "giggle",
        "ginger",
        "giraffe",
        "girl",
        "give",
        "glad",
        "glance",
        "glare",
        "glass",
        "glide",
        "glimpse",
        "globe",
        "gloom",
        "glory",
        "glove",
        "glow",
        "glue",
        "goat",
        "goddess",
        "gold",
        "good",
        "goose",
        "gorilla",
        "gospel",
        "gossip",
        "govern",
        "gown",
        "grab",
        "grace",
        "grain",
        "grant",
        "grape",
        "grass",
        "gravity",
        "great",
        "green",
        "grid",
        "grief",
        "grit",
        "grocery",
        "group",
        "grow",
        "grunt",
        "guard",
        "guess",
        "guide",
        "guilt",
        "guitar",
        "gun",
        "gym",
        "habit",
        "hair",
        "half",
        "hammer",
        "hamster",
        "hand",
        "happy",
        "harbor",
        "hard",
        "harsh",
        "harvest",
        "hat",
        "have",
        "hawk",
        "hazard",
        "head",
        "health",
        "heart",
        "heavy",
        "hedgehog",
        "height",
        "hello",
        "helmet",
        "help",
        "hen",
        "hero",
        "hidden",
        "high",
        "hill",
        "hint",
        "hip",
        "hire",
        "history",
        "hobby",
        "hockey",
        "hold",
        "hole",
        "holiday",
        "hollow",
        "home",
        "honey",
        "hood",
        "hope",
        "horn",
        "horror",
        "horse",
        "hospital",
        "host",
        "hotel",
        "hour",
        "hover",
        "hub",
        "huge",
        "human",
        "humble",
        "humor",
        "hundred",
        "hungry",
        "hunt",
        "hurdle",
        "hurry",
        "hurt",
        "husband",
        "hybrid",
        "ice",
        "icon",
        "idea",
        "identify",
        "idle",
        "ignore",
        "ill",
        "illegal",
        "illness",
        "image",
        "imitate",
        "immense",
        "immune",
        "impact",
        "impose",
        "improve",
        "impulse",
        "inch",
        "include",
        "income",
        "increase",
        "index",
        "indicate",
        "indoor",
        "industry",
        "infant",
        "inflict",
        "inform",
        "inhale",
        "inherit",
        "initial",
        "inject",
        "injury",
        "inmate",
        "inner",
        "innocent",
        "input",
        "inquiry",
        "insane",
        "insect",
        "inside",
        "inspire",
        "install",
        "intact",
        "interest",
        "into",
        "invest",
        "invite",
        "involve",
        "iron",
        "island",
        "isolate",
        "issue",
        "item",
        "ivory",
        "jacket",
        "jaguar",
        "jar",
        "jazz",
        "jealous",
        "jeans",
        "jelly",
        "jewel",
        "job",
        "join",
        "joke",
        "journey",
        "joy",
        "judge",
        "juice",
        "jump",
        "jungle",
        "junior",
        "junk",
        "just",
        "kangaroo",
        "keen",
        "keep",
        "ketchup",
        "key",
        "kick",
        "kid",
        "kidney",
        "kind",
        "kingdom",
        "kiss",
        "kit",
        "kitchen",
        "kite",
        "kitten",
        "kiwi",
        "knee",
        "knife",
        "knock",
        "know",
        "lab",
        "label",
        "labor",
        "ladder",
        "lady",
        "lake",
        "lamp",
        "language",
        "laptop",
        "large",
        "later",
        "latin",
        "laugh",
        "laundry",
        "lava",
        "law",
        "lawn",
        "lawsuit",
        "layer",
        "lazy",
        "leader",
        "leaf",
        "learn",
        "leave",
        "lecture",
        "left",
        "leg",
        "legal",
        "legend",
        "leisure",
        "lemon",
        "lend",
        "length",
        "lens",
        "leopard",
        "lesson",
        "letter",
        "level",
        "liar",
        "liberty",
        "library",
        "license",
        "life",
        "lift",
        "light",
        "like",
        "limb",
        "limit",
        "link",
        "lion",
        "liquid",
        "list",
        "little",
        "live",
        "lizard",
        "load",
        "loan",
        "lobster",
        "local",
        "lock",
        "logic",
        "lonely",
        "long",
        "loop",
        "lottery",
        "loud",
        "lounge",
        "love",
        "loyal",
        "lucky",
        "luggage",
        "lumber",
        "lunar",
        "lunch",
        "luxury",
        "lyrics",
        "machine",
        "mad",
        "magic",
        "magnet",
        "maid",
        "mail",
        "main",
        "major",
        "make",
        "mammal",
        "man",
        "manage",
        "mandate",
        "mango",
        "mansion",
        "manual",
        "maple",
        "marble",
        "march",
        "margin",
        "marine",
        "market",
        "marriage",
        "mask",
        "mass",
        "master",
        "match",
        "material",
        "math",
        "matrix",
        "matter",
        "maximum",
        "maze",
        "meadow",
        "mean",
        "measure",
        "meat",
        "mechanic",
        "medal",
        "media",
        "melody",
        "melt",
        "member",
        "memory",
        "mention",
        "menu",
        "mercy",
        "merge",
        "merit",
        "merry",
        "mesh",
        "message",
        "metal",
        "method",
        "middle",
        "midnight",
        "milk",
        "million",
        "mimic",
        "mind",
        "minimum",
        "minor",
        "minute",
        "miracle",
        "mirror",
        "misery",
        "miss",
        "mistake",
        "mix",
        "mixed",
        "mixture",
        "mobile",
        "model",
        "modify",
        "mom",
        "moment",
        "monitor",
        "monkey",
        "monster",
        "month",
        "moon",
        "moral",
        "more",
        "morning",
        "mosquito",
        "mother",
        "motion",
        "motor",
        "mountain",
        "mouse",
        "move",
        "movie",
        "much",
        "muffin",
        "mule",
        "multiply",
        "muscle",
        "museum",
        "mushroom",
        "music",
        "must",
        "mutual",
        "myself",
        "mystery",
        "myth",
        "naive",
        "name",
        "napkin",
        "narrow",
        "nasty",
        "nation",
        "nature",
        "near",
        "neck",
        "need",
        "negative",
        "neglect",
        "neither",
        "nephew",
        "nerve",
        "nest",
        "net",
        "network",
        "neutral",
        "never",
        "news",
        "next",
        "nice",
        "night",
        "noble",
        "noise",
        "nominee",
        "noodle",
        "normal",
        "north",
        "nose",
        "notable",
        "note",
        "nothing",
        "notice",
        "novel",
        "now",
        "nuclear",
        "number",
        "nurse",
        "nut",
        "oak",
        "obey",
        "object",
        "oblige",
        "obscure",
        "observe",
        "obtain",
        "obvious",
        "occur",
        "ocean",
        "october",
        "odor",
        "off",
        "offer",
        "office",
        "often",
        "oil",
        "okay",
        "old",
        "olive",
        "olympic",
        "omit",
        "once",
        "one",
        "onion",
        "online",
        "only",
        "open",
        "opera",
        "opinion",
        "oppose",
        "option",
        "orange",
        "orbit",
        "orchard",
        "order",
        "ordinary",
        "organ",
        "orient",
        "original",
        "orphan",
        "ostrich",
        "other",
        "outdoor",
        "outer",
        "output",
        "outside",
        "oval",
        "oven",
        "over",
        "own",
        "owner",
        "oxygen",
        "oyster",
        "ozone",
        "pact",
        "paddle",
        "page",
        "pair",
        "palace",
        "palm",
        "panda",
        "panel",
        "panic",
        "panther",
        "paper",
        "parade",
        "parent",
        "park",
        "parrot",
        "party",
        "pass",
        "patch",
        "path",
        "patient",
        "patrol",
        "pattern",
        "pause",
        "pave",
        "payment",
        "peace",
        "peanut",
        "pear",
        "peasant",
        "pelican",
        "pen",
        "penalty",
        "pencil",
        "people",
        "pepper",
        "perfect",
        "permit",
        "person",
        "pet",
        "phone",
        "photo",
        "phrase",
        "physical",
        "piano",
        "picnic",
        "picture",
        "piece",
        "pig",
        "pigeon",
        "pill",
        "pilot",
        "pink",
        "pioneer",
        "pipe",
        "pistol",
        "pitch",
        "pizza",
        "place",
        "planet",
        "plastic",
        "plate",
        "play",
        "please",
        "pledge",
        "pluck",
        "plug",
        "plunge",
        "poem",
        "poet",
        "point",
        "polar",
        "pole",
        "police",
        "pond",
        "pony",
        "pool",
        "popular",
        "portion",
        "position",
        "possible",
        "post",
        "potato",
        "pottery",
        "poverty",
        "powder",
        "power",
        "practice",
        "praise",
        "predict",
        "prefer",
        "prepare",
        "present",
        "pretty",
        "prevent",
        "price",
        "pride",
        "primary",
        "print",
        "priority",
        "prison",
        "private",
        "prize",
        "problem",
        "process",
        "produce",
        "profit",
        "program",
        "project",
        "promote",
        "proof",
        "property",
        "prosper",
        "protect",
        "proud",
        "provide",
        "public",
        "pudding",
        "pull",
        "pulp",
        "pulse",
        "pumpkin",
        "punch",
        "pupil",
        "puppy",
        "purchase",
        "purity",
        "purpose",
        "purse",
        "push",
        "put",
        "puzzle",
        "pyramid",
        "quality",
        "quantum",
        "quarter",
        "question",
        "quick",
        "quit",
        "quiz",
        "quote",
        "rabbit",
        "raccoon",
        "race",
        "rack",
        "radar",
        "radio",
        "rail",
        "rain",
        "raise",
        "rally",
        "ramp",
        "ranch",
        "random",
        "range",
        "rapid",
        "rare",
        "rate",
        "rather",
        "raven",
        "raw",
        "razor",
        "ready",
        "real",
        "reason",
        "rebel",
        "rebuild",
        "recall",
        "receive",
        "recipe",
        "record",
        "recycle",
        "reduce",
        "reflect",
        "reform",
        "refuse",
        "region",
        "regret",
        "regular",
        "reject",
        "relax",
        "release",
        "relief",
        "rely",
        "remain",
        "remember",
        "remind",
        "remove",
        "render",
        "renew",
        "rent",
        "reopen",
        "repair",
        "repeat",
        "replace",
        "report",
        "require",
        "rescue",
        "resemble",
        "resist",
        "resource",
        "response",
        "result",
        "retire",
        "retreat",
        "return",
        "reunion",
        "reveal",
        "review",
        "reward",
        "rhythm",
        "rib",
        "ribbon",
        "rice",
        "rich",
        "ride",
        "ridge",
        "rifle",
        "right",
        "rigid",
        "ring",
        "riot",
        "ripple",
        "risk",
        "ritual",
        "rival",
        "river",
        "road",
        "roast",
        "robot",
        "robust",
        "rocket",
        "romance",
        "roof",
        "rookie",
        "room",
        "rose",
        "rotate",
        "rough",
        "round",
        "route",
        "royal",
        "rubber",
        "rude",
        "rug",
        "rule",
        "run",
        "runway",
        "rural",
        "sad",
        "saddle",
        "sadness",
        "safe",
        "sail",
        "salad",
        "salmon",
        "salon",
        "salt",
        "salute",
        "same",
        "sample",
        "sand",
        "satisfy",
        "satoshi",
        "sauce",
        "sausage",
        "save",
        "say",
        "scale",
        "scan",
        "scare",
        "scatter",
        "scene",
        "scheme",
        "school",
        "science",
        "scissors",
        "scorpion",
        "scout",
        "scrap",
        "screen",
        "script",
        "scrub",
        "sea",
        "search",
        "season",
        "seat",
        "second",
        "secret",
        "section",
        "security",
        "seed",
        "seek",
        "segment",
        "select",
        "sell",
        "seminar",
        "senior",
        "sense",
        "sentence",
        "series",
        "service",
        "session",
        "settle",
        "setup",
        "seven",
        "shadow",
        "shaft",
        "shallow",
        "share",
        "shed",
        "shell",
        "sheriff",
        "shield",
        "shift",
        "shine",
        "ship",
        "shiver",
        "shock",
        "shoe",
        "shoot",
        "shop",
        "short",
        "shoulder",
        "shove",
        "shrimp",
        "shrug",
        "shuffle",
        "shy",
        "sibling",
        "sick",
        "side",
        "siege",
        "sight",
        "sign",
        "silent",
        "silk",
        "silly",
        "silver",
        "similar",
        "simple",
        "since",
        "sing",
        "siren",
        "sister",
        "situate",
        "six",
        "size",
        "skate",
        "sketch",
        "ski",
        "skill",
        "skin",
        "skirt",
        "skull",
        "slab",
        "slam",
        "sleep",
        "slender",
        "slice",
        "slide",
        "slight",
        "slim",
        "slogan",
        "slot",
        "slow",
        "slush",
        "small",
        "smart",
        "smile",
        "smoke",
        "smooth",
        "snack",
        "snake",
        "snap",
        "sniff",
        "snow",
        "soap",
        "soccer",
        "social",
        "sock",
        "soda",
        "soft",
        "solar",
        "soldier",
        "solid",
        "solution",
        "solve",
        "someone",
        "song",
        "soon",
        "sorry",
        "sort",
        "soul",
        "sound",
        "soup",
        "source",
        "south",
        "space",
        "spare",
        "spatial",
        "spawn",
        "speak",
        "special",
        "speed",
        "spell",
        "spend",
        "sphere",
        "spice",
        "spider",
        "spike",
        "spin",
        "spirit",
        "split",
        "spoil",
        "sponsor",
        "spoon",
        "sport",
        "spot",
        "spray",
        "spread",
        "spring",
        "spy",
        "square",
        "squeeze",
        "squirrel",
        "stable",
        "stadium",
        "staff",
        "stage",
        "stairs",
        "stamp",
        "stand",
        "start",
        "state",
        "stay",
        "steak",
        "steel",
        "stem",
        "step",
        "stereo",
        "stick",
        "still",
        "sting",
        "stock",
        "stomach",
        "stone",
        "stool",
        "story",
        "stove",
        "strategy",
        "street",
        "strike",
        "strong",
        "struggle",
        "student",
        "stuff",
        "stumble",
        "style",
        "subject",
        "submit",
        "subway",
        "success",
        "such",
        "sudden",
        "suffer",
        "sugar",
        "suggest",
        "suit",
        "summer",
        "sun",
        "sunny",
        "sunset",
        "super",
        "supply",
        "supreme",
        "sure",
        "surface",
        "surge",
        "surprise",
        "surround",
        "survey",
        "suspect",
        "sustain",
        "swallow",
        "swamp",
        "swap",
        "swarm",
        "swear",
        "sweet",
        "swift",
        "swim",
        "swing",
        "switch",
        "sword",
        "symbol",
        "symptom",
        "syrup",
        "system",
        "table",
        "tackle",
        "tag",
        "tail",
        "talent",
        "talk",
        "tank",
        "tape",
        "target",
        "task",
        "taste",
        "tattoo",
        "taxi",
        "teach",
        "team",
        "tell",
        "ten",
        "tenant",
        "tennis",
        "tent",
        "term",
        "test",
        "text",
        "thank",
        "that",
        "theme",
        "then",
        "theory",
        "there",
        "they",
        "thing",
        "this",
        "thought",
        "three",
        "thrive",
        "throw",
        "thumb",
        "thunder",
        "ticket",
        "tide",
        "tiger",
        "tilt",
        "timber",
        "time",
        "tiny",
        "tip",
        "tired",
        "tissue",
        "title",
        "toast",
        "tobacco",
        "today",
        "toddler",
        "toe",
        "together",
        "toilet",
        "token",
        "tomato",
        "tomorrow",
        "tone",
        "tongue",
        "tonight",
        "tool",
        "tooth",
        "top",
        "topic",
        "topple",
        "torch",
        "tornado",
        "tortoise",
        "toss",
        "total",
        "tourist",
        "toward",
        "tower",
        "town",
        "toy",
        "track",
        "trade",
        "traffic",
        "tragic",
        "train",
        "transfer",
        "trap",
        "trash",
        "travel",
        "tray",
        "treat",
        "tree",
        "trend",
        "trial",
        "tribe",
        "trick",
        "trigger",
        "trim",
        "trip",
        "trophy",
        "trouble",
        "truck",
        "true",
        "truly",
        "trumpet",
        "trust",
        "truth",
        "try",
        "tube",
        "tuition",
        "tumble",
        "tuna",
        "tunnel",
        "turkey",
        "turn",
        "turtle",
        "twelve",
        "twenty",
        "twice",
        "twin",
        "twist",
        "two",
        "type",
        "typical",
        "ugly",
        "umbrella",
        "unable",
        "unaware",
        "uncle",
        "uncover",
        "under",
        "undo",
        "unfair",
        "unfold",
        "unhappy",
        "uniform",
        "unique",
        "unit",
        "universe",
        "unknown",
        "unlock",
        "until",
        "unusual",
        "unveil",
        "update",
        "upgrade",
        "uphold",
        "upon",
        "upper",
        "upset",
        "urban",
        "urge",
        "usage",
        "use",
        "used",
        "useful",
        "useless",
        "usual",
        "utility",
        "vacant",
        "vacuum",
        "vague",
        "valid",
        "valley",
        "valve",
        "van",
        "vanish",
        "vapor",
        "various",
        "vast",
        "vault",
        "vehicle",
        "velvet",
        "vendor",
        "venture",
        "venue",
        "verb",
        "verify",
        "version",
        "very",
        "vessel",
        "veteran",
        "viable",
        "vibrant",
        "vicious",
        "victory",
        "video",
        "view",
        "village",
        "vintage",
        "violin",
        "virtual",
        "virus",
        "visa",
        "visit",
        "visual",
        "vital",
        "vivid",
        "vocal",
        "voice",
        "void",
        "volcano",
        "volume",
        "vote",
        "voyage",
        "wage",
        "wagon",
        "wait",
        "walk",
        "wall",
        "walnut",
        "want",
        "warfare",
        "warm",
        "warrior",
        "wash",
        "wasp",
        "waste",
        "water",
        "wave",
        "way",
        "wealth",
        "weapon",
        "wear",
        "weasel",
        "weather",
        "web",
        "wedding",
        "weekend",
        "weird",
        "welcome",
        "west",
        "wet",
        "whale",
        "what",
        "wheat",
        "wheel",
        "when",
        "where",
        "whip",
        "whisper",
        "wide",
        "width",
        "wife",
        "wild",
        "will",
        "win",
        "window",
        "wine",
        "wing",
        "wink",
        "winner",
        "winter",
        "wire",
        "wisdom",
        "wise",
        "wish",
        "witness",
        "wolf",
        "woman",
        "wonder",
        "wood",
        "wool",
        "word",
        "work",
        "world",
        "worry",
        "worth",
        "wrap",
        "wreck",
        "wrestle",
        "wrist",
        "write",
        "wrong",
        "yard",
        "year",
        "yellow",
        "you",
        "young",
        "youth",
        "zebra",
        "zero",
        "zone",
        "zoo"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/italian.js
  var require_italian = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/italian.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "abaco",
        "abbaglio",
        "abbinato",
        "abete",
        "abisso",
        "abolire",
        "abrasivo",
        "abrogato",
        "accadere",
        "accenno",
        "accusato",
        "acetone",
        "achille",
        "acido",
        "acqua",
        "acre",
        "acrilico",
        "acrobata",
        "acuto",
        "adagio",
        "addebito",
        "addome",
        "adeguato",
        "aderire",
        "adipe",
        "adottare",
        "adulare",
        "affabile",
        "affetto",
        "affisso",
        "affranto",
        "aforisma",
        "afoso",
        "africano",
        "agave",
        "agente",
        "agevole",
        "aggancio",
        "agire",
        "agitare",
        "agonismo",
        "agricolo",
        "agrumeto",
        "aguzzo",
        "alabarda",
        "alato",
        "albatro",
        "alberato",
        "albo",
        "albume",
        "alce",
        "alcolico",
        "alettone",
        "alfa",
        "algebra",
        "aliante",
        "alibi",
        "alimento",
        "allagato",
        "allegro",
        "allievo",
        "allodola",
        "allusivo",
        "almeno",
        "alogeno",
        "alpaca",
        "alpestre",
        "altalena",
        "alterno",
        "alticcio",
        "altrove",
        "alunno",
        "alveolo",
        "alzare",
        "amalgama",
        "amanita",
        "amarena",
        "ambito",
        "ambrato",
        "ameba",
        "america",
        "ametista",
        "amico",
        "ammasso",
        "ammenda",
        "ammirare",
        "ammonito",
        "amore",
        "ampio",
        "ampliare",
        "amuleto",
        "anacardo",
        "anagrafe",
        "analista",
        "anarchia",
        "anatra",
        "anca",
        "ancella",
        "ancora",
        "andare",
        "andrea",
        "anello",
        "angelo",
        "angolare",
        "angusto",
        "anima",
        "annegare",
        "annidato",
        "anno",
        "annuncio",
        "anonimo",
        "anticipo",
        "anzi",
        "apatico",
        "apertura",
        "apode",
        "apparire",
        "appetito",
        "appoggio",
        "approdo",
        "appunto",
        "aprile",
        "arabica",
        "arachide",
        "aragosta",
        "araldica",
        "arancio",
        "aratura",
        "arazzo",
        "arbitro",
        "archivio",
        "ardito",
        "arenile",
        "argento",
        "argine",
        "arguto",
        "aria",
        "armonia",
        "arnese",
        "arredato",
        "arringa",
        "arrosto",
        "arsenico",
        "arso",
        "artefice",
        "arzillo",
        "asciutto",
        "ascolto",
        "asepsi",
        "asettico",
        "asfalto",
        "asino",
        "asola",
        "aspirato",
        "aspro",
        "assaggio",
        "asse",
        "assoluto",
        "assurdo",
        "asta",
        "astenuto",
        "astice",
        "astratto",
        "atavico",
        "ateismo",
        "atomico",
        "atono",
        "attesa",
        "attivare",
        "attorno",
        "attrito",
        "attuale",
        "ausilio",
        "austria",
        "autista",
        "autonomo",
        "autunno",
        "avanzato",
        "avere",
        "avvenire",
        "avviso",
        "avvolgere",
        "azione",
        "azoto",
        "azzimo",
        "azzurro",
        "babele",
        "baccano",
        "bacino",
        "baco",
        "badessa",
        "badilata",
        "bagnato",
        "baita",
        "balcone",
        "baldo",
        "balena",
        "ballata",
        "balzano",
        "bambino",
        "bandire",
        "baraonda",
        "barbaro",
        "barca",
        "baritono",
        "barlume",
        "barocco",
        "basilico",
        "basso",
        "batosta",
        "battuto",
        "baule",
        "bava",
        "bavosa",
        "becco",
        "beffa",
        "belgio",
        "belva",
        "benda",
        "benevole",
        "benigno",
        "benzina",
        "bere",
        "berlina",
        "beta",
        "bibita",
        "bici",
        "bidone",
        "bifido",
        "biga",
        "bilancia",
        "bimbo",
        "binocolo",
        "biologo",
        "bipede",
        "bipolare",
        "birbante",
        "birra",
        "biscotto",
        "bisesto",
        "bisnonno",
        "bisonte",
        "bisturi",
        "bizzarro",
        "blando",
        "blatta",
        "bollito",
        "bonifico",
        "bordo",
        "bosco",
        "botanico",
        "bottino",
        "bozzolo",
        "braccio",
        "bradipo",
        "brama",
        "branca",
        "bravura",
        "bretella",
        "brevetto",
        "brezza",
        "briglia",
        "brillante",
        "brindare",
        "broccolo",
        "brodo",
        "bronzina",
        "brullo",
        "bruno",
        "bubbone",
        "buca",
        "budino",
        "buffone",
        "buio",
        "bulbo",
        "buono",
        "burlone",
        "burrasca",
        "bussola",
        "busta",
        "cadetto",
        "caduco",
        "calamaro",
        "calcolo",
        "calesse",
        "calibro",
        "calmo",
        "caloria",
        "cambusa",
        "camerata",
        "camicia",
        "cammino",
        "camola",
        "campale",
        "canapa",
        "candela",
        "cane",
        "canino",
        "canotto",
        "cantina",
        "capace",
        "capello",
        "capitolo",
        "capogiro",
        "cappero",
        "capra",
        "capsula",
        "carapace",
        "carcassa",
        "cardo",
        "carisma",
        "carovana",
        "carretto",
        "cartolina",
        "casaccio",
        "cascata",
        "caserma",
        "caso",
        "cassone",
        "castello",
        "casuale",
        "catasta",
        "catena",
        "catrame",
        "cauto",
        "cavillo",
        "cedibile",
        "cedrata",
        "cefalo",
        "celebre",
        "cellulare",
        "cena",
        "cenone",
        "centesimo",
        "ceramica",
        "cercare",
        "certo",
        "cerume",
        "cervello",
        "cesoia",
        "cespo",
        "ceto",
        "chela",
        "chiaro",
        "chicca",
        "chiedere",
        "chimera",
        "china",
        "chirurgo",
        "chitarra",
        "ciao",
        "ciclismo",
        "cifrare",
        "cigno",
        "cilindro",
        "ciottolo",
        "circa",
        "cirrosi",
        "citrico",
        "cittadino",
        "ciuffo",
        "civetta",
        "civile",
        "classico",
        "clinica",
        "cloro",
        "cocco",
        "codardo",
        "codice",
        "coerente",
        "cognome",
        "collare",
        "colmato",
        "colore",
        "colposo",
        "coltivato",
        "colza",
        "coma",
        "cometa",
        "commando",
        "comodo",
        "computer",
        "comune",
        "conciso",
        "condurre",
        "conferma",
        "congelare",
        "coniuge",
        "connesso",
        "conoscere",
        "consumo",
        "continuo",
        "convegno",
        "coperto",
        "copione",
        "coppia",
        "copricapo",
        "corazza",
        "cordata",
        "coricato",
        "cornice",
        "corolla",
        "corpo",
        "corredo",
        "corsia",
        "cortese",
        "cosmico",
        "costante",
        "cottura",
        "covato",
        "cratere",
        "cravatta",
        "creato",
        "credere",
        "cremoso",
        "crescita",
        "creta",
        "criceto",
        "crinale",
        "crisi",
        "critico",
        "croce",
        "cronaca",
        "crostata",
        "cruciale",
        "crusca",
        "cucire",
        "cuculo",
        "cugino",
        "cullato",
        "cupola",
        "curatore",
        "cursore",
        "curvo",
        "cuscino",
        "custode",
        "dado",
        "daino",
        "dalmata",
        "damerino",
        "daniela",
        "dannoso",
        "danzare",
        "datato",
        "davanti",
        "davvero",
        "debutto",
        "decennio",
        "deciso",
        "declino",
        "decollo",
        "decreto",
        "dedicato",
        "definito",
        "deforme",
        "degno",
        "delegare",
        "delfino",
        "delirio",
        "delta",
        "demenza",
        "denotato",
        "dentro",
        "deposito",
        "derapata",
        "derivare",
        "deroga",
        "descritto",
        "deserto",
        "desiderio",
        "desumere",
        "detersivo",
        "devoto",
        "diametro",
        "dicembre",
        "diedro",
        "difeso",
        "diffuso",
        "digerire",
        "digitale",
        "diluvio",
        "dinamico",
        "dinnanzi",
        "dipinto",
        "diploma",
        "dipolo",
        "diradare",
        "dire",
        "dirotto",
        "dirupo",
        "disagio",
        "discreto",
        "disfare",
        "disgelo",
        "disposto",
        "distanza",
        "disumano",
        "dito",
        "divano",
        "divelto",
        "dividere",
        "divorato",
        "doblone",
        "docente",
        "doganale",
        "dogma",
        "dolce",
        "domato",
        "domenica",
        "dominare",
        "dondolo",
        "dono",
        "dormire",
        "dote",
        "dottore",
        "dovuto",
        "dozzina",
        "drago",
        "druido",
        "dubbio",
        "dubitare",
        "ducale",
        "duna",
        "duomo",
        "duplice",
        "duraturo",
        "ebano",
        "eccesso",
        "ecco",
        "eclissi",
        "economia",
        "edera",
        "edicola",
        "edile",
        "editoria",
        "educare",
        "egemonia",
        "egli",
        "egoismo",
        "egregio",
        "elaborato",
        "elargire",
        "elegante",
        "elencato",
        "eletto",
        "elevare",
        "elfico",
        "elica",
        "elmo",
        "elsa",
        "eluso",
        "emanato",
        "emblema",
        "emesso",
        "emiro",
        "emotivo",
        "emozione",
        "empirico",
        "emulo",
        "endemico",
        "enduro",
        "energia",
        "enfasi",
        "enoteca",
        "entrare",
        "enzima",
        "epatite",
        "epilogo",
        "episodio",
        "epocale",
        "eppure",
        "equatore",
        "erario",
        "erba",
        "erboso",
        "erede",
        "eremita",
        "erigere",
        "ermetico",
        "eroe",
        "erosivo",
        "errante",
        "esagono",
        "esame",
        "esanime",
        "esaudire",
        "esca",
        "esempio",
        "esercito",
        "esibito",
        "esigente",
        "esistere",
        "esito",
        "esofago",
        "esortato",
        "esoso",
        "espanso",
        "espresso",
        "essenza",
        "esso",
        "esteso",
        "estimare",
        "estonia",
        "estroso",
        "esultare",
        "etilico",
        "etnico",
        "etrusco",
        "etto",
        "euclideo",
        "europa",
        "evaso",
        "evidenza",
        "evitato",
        "evoluto",
        "evviva",
        "fabbrica",
        "faccenda",
        "fachiro",
        "falco",
        "famiglia",
        "fanale",
        "fanfara",
        "fango",
        "fantasma",
        "fare",
        "farfalla",
        "farinoso",
        "farmaco",
        "fascia",
        "fastoso",
        "fasullo",
        "faticare",
        "fato",
        "favoloso",
        "febbre",
        "fecola",
        "fede",
        "fegato",
        "felpa",
        "feltro",
        "femmina",
        "fendere",
        "fenomeno",
        "fermento",
        "ferro",
        "fertile",
        "fessura",
        "festivo",
        "fetta",
        "feudo",
        "fiaba",
        "fiducia",
        "fifa",
        "figurato",
        "filo",
        "finanza",
        "finestra",
        "finire",
        "fiore",
        "fiscale",
        "fisico",
        "fiume",
        "flacone",
        "flamenco",
        "flebo",
        "flemma",
        "florido",
        "fluente",
        "fluoro",
        "fobico",
        "focaccia",
        "focoso",
        "foderato",
        "foglio",
        "folata",
        "folclore",
        "folgore",
        "fondente",
        "fonetico",
        "fonia",
        "fontana",
        "forbito",
        "forchetta",
        "foresta",
        "formica",
        "fornaio",
        "foro",
        "fortezza",
        "forzare",
        "fosfato",
        "fosso",
        "fracasso",
        "frana",
        "frassino",
        "fratello",
        "freccetta",
        "frenata",
        "fresco",
        "frigo",
        "frollino",
        "fronde",
        "frugale",
        "frutta",
        "fucilata",
        "fucsia",
        "fuggente",
        "fulmine",
        "fulvo",
        "fumante",
        "fumetto",
        "fumoso",
        "fune",
        "funzione",
        "fuoco",
        "furbo",
        "furgone",
        "furore",
        "fuso",
        "futile",
        "gabbiano",
        "gaffe",
        "galateo",
        "gallina",
        "galoppo",
        "gambero",
        "gamma",
        "garanzia",
        "garbo",
        "garofano",
        "garzone",
        "gasdotto",
        "gasolio",
        "gastrico",
        "gatto",
        "gaudio",
        "gazebo",
        "gazzella",
        "geco",
        "gelatina",
        "gelso",
        "gemello",
        "gemmato",
        "gene",
        "genitore",
        "gennaio",
        "genotipo",
        "gergo",
        "ghepardo",
        "ghiaccio",
        "ghisa",
        "giallo",
        "gilda",
        "ginepro",
        "giocare",
        "gioiello",
        "giorno",
        "giove",
        "girato",
        "girone",
        "gittata",
        "giudizio",
        "giurato",
        "giusto",
        "globulo",
        "glutine",
        "gnomo",
        "gobba",
        "golf",
        "gomito",
        "gommone",
        "gonfio",
        "gonna",
        "governo",
        "gracile",
        "grado",
        "grafico",
        "grammo",
        "grande",
        "grattare",
        "gravoso",
        "grazia",
        "greca",
        "gregge",
        "grifone",
        "grigio",
        "grinza",
        "grotta",
        "gruppo",
        "guadagno",
        "guaio",
        "guanto",
        "guardare",
        "gufo",
        "guidare",
        "ibernato",
        "icona",
        "identico",
        "idillio",
        "idolo",
        "idra",
        "idrico",
        "idrogeno",
        "igiene",
        "ignaro",
        "ignorato",
        "ilare",
        "illeso",
        "illogico",
        "illudere",
        "imballo",
        "imbevuto",
        "imbocco",
        "imbuto",
        "immane",
        "immerso",
        "immolato",
        "impacco",
        "impeto",
        "impiego",
        "importo",
        "impronta",
        "inalare",
        "inarcare",
        "inattivo",
        "incanto",
        "incendio",
        "inchino",
        "incisivo",
        "incluso",
        "incontro",
        "incrocio",
        "incubo",
        "indagine",
        "india",
        "indole",
        "inedito",
        "infatti",
        "infilare",
        "inflitto",
        "ingaggio",
        "ingegno",
        "inglese",
        "ingordo",
        "ingrosso",
        "innesco",
        "inodore",
        "inoltrare",
        "inondato",
        "insano",
        "insetto",
        "insieme",
        "insonnia",
        "insulina",
        "intasato",
        "intero",
        "intonaco",
        "intuito",
        "inumidire",
        "invalido",
        "invece",
        "invito",
        "iperbole",
        "ipnotico",
        "ipotesi",
        "ippica",
        "iride",
        "irlanda",
        "ironico",
        "irrigato",
        "irrorare",
        "isolato",
        "isotopo",
        "isterico",
        "istituto",
        "istrice",
        "italia",
        "iterare",
        "labbro",
        "labirinto",
        "lacca",
        "lacerato",
        "lacrima",
        "lacuna",
        "laddove",
        "lago",
        "lampo",
        "lancetta",
        "lanterna",
        "lardoso",
        "larga",
        "laringe",
        "lastra",
        "latenza",
        "latino",
        "lattuga",
        "lavagna",
        "lavoro",
        "legale",
        "leggero",
        "lembo",
        "lentezza",
        "lenza",
        "leone",
        "lepre",
        "lesivo",
        "lessato",
        "lesto",
        "letterale",
        "leva",
        "levigato",
        "libero",
        "lido",
        "lievito",
        "lilla",
        "limatura",
        "limitare",
        "limpido",
        "lineare",
        "lingua",
        "liquido",
        "lira",
        "lirica",
        "lisca",
        "lite",
        "litigio",
        "livrea",
        "locanda",
        "lode",
        "logica",
        "lombare",
        "londra",
        "longevo",
        "loquace",
        "lorenzo",
        "loto",
        "lotteria",
        "luce",
        "lucidato",
        "lumaca",
        "luminoso",
        "lungo",
        "lupo",
        "luppolo",
        "lusinga",
        "lusso",
        "lutto",
        "macabro",
        "macchina",
        "macero",
        "macinato",
        "madama",
        "magico",
        "maglia",
        "magnete",
        "magro",
        "maiolica",
        "malafede",
        "malgrado",
        "malinteso",
        "malsano",
        "malto",
        "malumore",
        "mana",
        "mancia",
        "mandorla",
        "mangiare",
        "manifesto",
        "mannaro",
        "manovra",
        "mansarda",
        "mantide",
        "manubrio",
        "mappa",
        "maratona",
        "marcire",
        "maretta",
        "marmo",
        "marsupio",
        "maschera",
        "massaia",
        "mastino",
        "materasso",
        "matricola",
        "mattone",
        "maturo",
        "mazurca",
        "meandro",
        "meccanico",
        "mecenate",
        "medesimo",
        "meditare",
        "mega",
        "melassa",
        "melis",
        "melodia",
        "meninge",
        "meno",
        "mensola",
        "mercurio",
        "merenda",
        "merlo",
        "meschino",
        "mese",
        "messere",
        "mestolo",
        "metallo",
        "metodo",
        "mettere",
        "miagolare",
        "mica",
        "micelio",
        "michele",
        "microbo",
        "midollo",
        "miele",
        "migliore",
        "milano",
        "milite",
        "mimosa",
        "minerale",
        "mini",
        "minore",
        "mirino",
        "mirtillo",
        "miscela",
        "missiva",
        "misto",
        "misurare",
        "mitezza",
        "mitigare",
        "mitra",
        "mittente",
        "mnemonico",
        "modello",
        "modifica",
        "modulo",
        "mogano",
        "mogio",
        "mole",
        "molosso",
        "monastero",
        "monco",
        "mondina",
        "monetario",
        "monile",
        "monotono",
        "monsone",
        "montato",
        "monviso",
        "mora",
        "mordere",
        "morsicato",
        "mostro",
        "motivato",
        "motosega",
        "motto",
        "movenza",
        "movimento",
        "mozzo",
        "mucca",
        "mucosa",
        "muffa",
        "mughetto",
        "mugnaio",
        "mulatto",
        "mulinello",
        "multiplo",
        "mummia",
        "munto",
        "muovere",
        "murale",
        "musa",
        "muscolo",
        "musica",
        "mutevole",
        "muto",
        "nababbo",
        "nafta",
        "nanometro",
        "narciso",
        "narice",
        "narrato",
        "nascere",
        "nastrare",
        "naturale",
        "nautica",
        "naviglio",
        "nebulosa",
        "necrosi",
        "negativo",
        "negozio",
        "nemmeno",
        "neofita",
        "neretto",
        "nervo",
        "nessuno",
        "nettuno",
        "neutrale",
        "neve",
        "nevrotico",
        "nicchia",
        "ninfa",
        "nitido",
        "nobile",
        "nocivo",
        "nodo",
        "nome",
        "nomina",
        "nordico",
        "normale",
        "norvegese",
        "nostrano",
        "notare",
        "notizia",
        "notturno",
        "novella",
        "nucleo",
        "nulla",
        "numero",
        "nuovo",
        "nutrire",
        "nuvola",
        "nuziale",
        "oasi",
        "obbedire",
        "obbligo",
        "obelisco",
        "oblio",
        "obolo",
        "obsoleto",
        "occasione",
        "occhio",
        "occidente",
        "occorrere",
        "occultare",
        "ocra",
        "oculato",
        "odierno",
        "odorare",
        "offerta",
        "offrire",
        "offuscato",
        "oggetto",
        "oggi",
        "ognuno",
        "olandese",
        "olfatto",
        "oliato",
        "oliva",
        "ologramma",
        "oltre",
        "omaggio",
        "ombelico",
        "ombra",
        "omega",
        "omissione",
        "ondoso",
        "onere",
        "onice",
        "onnivoro",
        "onorevole",
        "onta",
        "operato",
        "opinione",
        "opposto",
        "oracolo",
        "orafo",
        "ordine",
        "orecchino",
        "orefice",
        "orfano",
        "organico",
        "origine",
        "orizzonte",
        "orma",
        "ormeggio",
        "ornativo",
        "orologio",
        "orrendo",
        "orribile",
        "ortensia",
        "ortica",
        "orzata",
        "orzo",
        "osare",
        "oscurare",
        "osmosi",
        "ospedale",
        "ospite",
        "ossa",
        "ossidare",
        "ostacolo",
        "oste",
        "otite",
        "otre",
        "ottagono",
        "ottimo",
        "ottobre",
        "ovale",
        "ovest",
        "ovino",
        "oviparo",
        "ovocito",
        "ovunque",
        "ovviare",
        "ozio",
        "pacchetto",
        "pace",
        "pacifico",
        "padella",
        "padrone",
        "paese",
        "paga",
        "pagina",
        "palazzina",
        "palesare",
        "pallido",
        "palo",
        "palude",
        "pandoro",
        "pannello",
        "paolo",
        "paonazzo",
        "paprica",
        "parabola",
        "parcella",
        "parere",
        "pargolo",
        "pari",
        "parlato",
        "parola",
        "partire",
        "parvenza",
        "parziale",
        "passivo",
        "pasticca",
        "patacca",
        "patologia",
        "pattume",
        "pavone",
        "peccato",
        "pedalare",
        "pedonale",
        "peggio",
        "peloso",
        "penare",
        "pendice",
        "penisola",
        "pennuto",
        "penombra",
        "pensare",
        "pentola",
        "pepe",
        "pepita",
        "perbene",
        "percorso",
        "perdonato",
        "perforare",
        "pergamena",
        "periodo",
        "permesso",
        "perno",
        "perplesso",
        "persuaso",
        "pertugio",
        "pervaso",
        "pesatore",
        "pesista",
        "peso",
        "pestifero",
        "petalo",
        "pettine",
        "petulante",
        "pezzo",
        "piacere",
        "pianta",
        "piattino",
        "piccino",
        "picozza",
        "piega",
        "pietra",
        "piffero",
        "pigiama",
        "pigolio",
        "pigro",
        "pila",
        "pilifero",
        "pillola",
        "pilota",
        "pimpante",
        "pineta",
        "pinna",
        "pinolo",
        "pioggia",
        "piombo",
        "piramide",
        "piretico",
        "pirite",
        "pirolisi",
        "pitone",
        "pizzico",
        "placebo",
        "planare",
        "plasma",
        "platano",
        "plenario",
        "pochezza",
        "poderoso",
        "podismo",
        "poesia",
        "poggiare",
        "polenta",
        "poligono",
        "pollice",
        "polmonite",
        "polpetta",
        "polso",
        "poltrona",
        "polvere",
        "pomice",
        "pomodoro",
        "ponte",
        "popoloso",
        "porfido",
        "poroso",
        "porpora",
        "porre",
        "portata",
        "posa",
        "positivo",
        "possesso",
        "postulato",
        "potassio",
        "potere",
        "pranzo",
        "prassi",
        "pratica",
        "precluso",
        "predica",
        "prefisso",
        "pregiato",
        "prelievo",
        "premere",
        "prenotare",
        "preparato",
        "presenza",
        "pretesto",
        "prevalso",
        "prima",
        "principe",
        "privato",
        "problema",
        "procura",
        "produrre",
        "profumo",
        "progetto",
        "prolunga",
        "promessa",
        "pronome",
        "proposta",
        "proroga",
        "proteso",
        "prova",
        "prudente",
        "prugna",
        "prurito",
        "psiche",
        "pubblico",
        "pudica",
        "pugilato",
        "pugno",
        "pulce",
        "pulito",
        "pulsante",
        "puntare",
        "pupazzo",
        "pupilla",
        "puro",
        "quadro",
        "qualcosa",
        "quasi",
        "querela",
        "quota",
        "raccolto",
        "raddoppio",
        "radicale",
        "radunato",
        "raffica",
        "ragazzo",
        "ragione",
        "ragno",
        "ramarro",
        "ramingo",
        "ramo",
        "randagio",
        "rantolare",
        "rapato",
        "rapina",
        "rappreso",
        "rasatura",
        "raschiato",
        "rasente",
        "rassegna",
        "rastrello",
        "rata",
        "ravveduto",
        "reale",
        "recepire",
        "recinto",
        "recluta",
        "recondito",
        "recupero",
        "reddito",
        "redimere",
        "regalato",
        "registro",
        "regola",
        "regresso",
        "relazione",
        "remare",
        "remoto",
        "renna",
        "replica",
        "reprimere",
        "reputare",
        "resa",
        "residente",
        "responso",
        "restauro",
        "rete",
        "retina",
        "retorica",
        "rettifica",
        "revocato",
        "riassunto",
        "ribadire",
        "ribelle",
        "ribrezzo",
        "ricarica",
        "ricco",
        "ricevere",
        "riciclato",
        "ricordo",
        "ricreduto",
        "ridicolo",
        "ridurre",
        "rifasare",
        "riflesso",
        "riforma",
        "rifugio",
        "rigare",
        "rigettato",
        "righello",
        "rilassato",
        "rilevato",
        "rimanere",
        "rimbalzo",
        "rimedio",
        "rimorchio",
        "rinascita",
        "rincaro",
        "rinforzo",
        "rinnovo",
        "rinomato",
        "rinsavito",
        "rintocco",
        "rinuncia",
        "rinvenire",
        "riparato",
        "ripetuto",
        "ripieno",
        "riportare",
        "ripresa",
        "ripulire",
        "risata",
        "rischio",
        "riserva",
        "risibile",
        "riso",
        "rispetto",
        "ristoro",
        "risultato",
        "risvolto",
        "ritardo",
        "ritegno",
        "ritmico",
        "ritrovo",
        "riunione",
        "riva",
        "riverso",
        "rivincita",
        "rivolto",
        "rizoma",
        "roba",
        "robotico",
        "robusto",
        "roccia",
        "roco",
        "rodaggio",
        "rodere",
        "roditore",
        "rogito",
        "rollio",
        "romantico",
        "rompere",
        "ronzio",
        "rosolare",
        "rospo",
        "rotante",
        "rotondo",
        "rotula",
        "rovescio",
        "rubizzo",
        "rubrica",
        "ruga",
        "rullino",
        "rumine",
        "rumoroso",
        "ruolo",
        "rupe",
        "russare",
        "rustico",
        "sabato",
        "sabbiare",
        "sabotato",
        "sagoma",
        "salasso",
        "saldatura",
        "salgemma",
        "salivare",
        "salmone",
        "salone",
        "saltare",
        "saluto",
        "salvo",
        "sapere",
        "sapido",
        "saporito",
        "saraceno",
        "sarcasmo",
        "sarto",
        "sassoso",
        "satellite",
        "satira",
        "satollo",
        "saturno",
        "savana",
        "savio",
        "saziato",
        "sbadiglio",
        "sbalzo",
        "sbancato",
        "sbarra",
        "sbattere",
        "sbavare",
        "sbendare",
        "sbirciare",
        "sbloccato",
        "sbocciato",
        "sbrinare",
        "sbruffone",
        "sbuffare",
        "scabroso",
        "scadenza",
        "scala",
        "scambiare",
        "scandalo",
        "scapola",
        "scarso",
        "scatenare",
        "scavato",
        "scelto",
        "scenico",
        "scettro",
        "scheda",
        "schiena",
        "sciarpa",
        "scienza",
        "scindere",
        "scippo",
        "sciroppo",
        "scivolo",
        "sclerare",
        "scodella",
        "scolpito",
        "scomparto",
        "sconforto",
        "scoprire",
        "scorta",
        "scossone",
        "scozzese",
        "scriba",
        "scrollare",
        "scrutinio",
        "scuderia",
        "scultore",
        "scuola",
        "scuro",
        "scusare",
        "sdebitare",
        "sdoganare",
        "seccatura",
        "secondo",
        "sedano",
        "seggiola",
        "segnalato",
        "segregato",
        "seguito",
        "selciato",
        "selettivo",
        "sella",
        "selvaggio",
        "semaforo",
        "sembrare",
        "seme",
        "seminato",
        "sempre",
        "senso",
        "sentire",
        "sepolto",
        "sequenza",
        "serata",
        "serbato",
        "sereno",
        "serio",
        "serpente",
        "serraglio",
        "servire",
        "sestina",
        "setola",
        "settimana",
        "sfacelo",
        "sfaldare",
        "sfamato",
        "sfarzoso",
        "sfaticato",
        "sfera",
        "sfida",
        "sfilato",
        "sfinge",
        "sfocato",
        "sfoderare",
        "sfogo",
        "sfoltire",
        "sforzato",
        "sfratto",
        "sfruttato",
        "sfuggito",
        "sfumare",
        "sfuso",
        "sgabello",
        "sgarbato",
        "sgonfiare",
        "sgorbio",
        "sgrassato",
        "sguardo",
        "sibilo",
        "siccome",
        "sierra",
        "sigla",
        "signore",
        "silenzio",
        "sillaba",
        "simbolo",
        "simpatico",
        "simulato",
        "sinfonia",
        "singolo",
        "sinistro",
        "sino",
        "sintesi",
        "sinusoide",
        "sipario",
        "sisma",
        "sistole",
        "situato",
        "slitta",
        "slogatura",
        "sloveno",
        "smarrito",
        "smemorato",
        "smentito",
        "smeraldo",
        "smilzo",
        "smontare",
        "smottato",
        "smussato",
        "snellire",
        "snervato",
        "snodo",
        "sobbalzo",
        "sobrio",
        "soccorso",
        "sociale",
        "sodale",
        "soffitto",
        "sogno",
        "soldato",
        "solenne",
        "solido",
        "sollazzo",
        "solo",
        "solubile",
        "solvente",
        "somatico",
        "somma",
        "sonda",
        "sonetto",
        "sonnifero",
        "sopire",
        "soppeso",
        "sopra",
        "sorgere",
        "sorpasso",
        "sorriso",
        "sorso",
        "sorteggio",
        "sorvolato",
        "sospiro",
        "sosta",
        "sottile",
        "spada",
        "spalla",
        "spargere",
        "spatola",
        "spavento",
        "spazzola",
        "specie",
        "spedire",
        "spegnere",
        "spelatura",
        "speranza",
        "spessore",
        "spettrale",
        "spezzato",
        "spia",
        "spigoloso",
        "spillato",
        "spinoso",
        "spirale",
        "splendido",
        "sportivo",
        "sposo",
        "spranga",
        "sprecare",
        "spronato",
        "spruzzo",
        "spuntino",
        "squillo",
        "sradicare",
        "srotolato",
        "stabile",
        "stacco",
        "staffa",
        "stagnare",
        "stampato",
        "stantio",
        "starnuto",
        "stasera",
        "statuto",
        "stelo",
        "steppa",
        "sterzo",
        "stiletto",
        "stima",
        "stirpe",
        "stivale",
        "stizzoso",
        "stonato",
        "storico",
        "strappo",
        "stregato",
        "stridulo",
        "strozzare",
        "strutto",
        "stuccare",
        "stufo",
        "stupendo",
        "subentro",
        "succoso",
        "sudore",
        "suggerito",
        "sugo",
        "sultano",
        "suonare",
        "superbo",
        "supporto",
        "surgelato",
        "surrogato",
        "sussurro",
        "sutura",
        "svagare",
        "svedese",
        "sveglio",
        "svelare",
        "svenuto",
        "svezia",
        "sviluppo",
        "svista",
        "svizzera",
        "svolta",
        "svuotare",
        "tabacco",
        "tabulato",
        "tacciare",
        "taciturno",
        "tale",
        "talismano",
        "tampone",
        "tannino",
        "tara",
        "tardivo",
        "targato",
        "tariffa",
        "tarpare",
        "tartaruga",
        "tasto",
        "tattico",
        "taverna",
        "tavolata",
        "tazza",
        "teca",
        "tecnico",
        "telefono",
        "temerario",
        "tempo",
        "temuto",
        "tendone",
        "tenero",
        "tensione",
        "tentacolo",
        "teorema",
        "terme",
        "terrazzo",
        "terzetto",
        "tesi",
        "tesserato",
        "testato",
        "tetro",
        "tettoia",
        "tifare",
        "tigella",
        "timbro",
        "tinto",
        "tipico",
        "tipografo",
        "tiraggio",
        "tiro",
        "titanio",
        "titolo",
        "titubante",
        "tizio",
        "tizzone",
        "toccare",
        "tollerare",
        "tolto",
        "tombola",
        "tomo",
        "tonfo",
        "tonsilla",
        "topazio",
        "topologia",
        "toppa",
        "torba",
        "tornare",
        "torrone",
        "tortora",
        "toscano",
        "tossire",
        "tostatura",
        "totano",
        "trabocco",
        "trachea",
        "trafila",
        "tragedia",
        "tralcio",
        "tramonto",
        "transito",
        "trapano",
        "trarre",
        "trasloco",
        "trattato",
        "trave",
        "treccia",
        "tremolio",
        "trespolo",
        "tributo",
        "tricheco",
        "trifoglio",
        "trillo",
        "trincea",
        "trio",
        "tristezza",
        "triturato",
        "trivella",
        "tromba",
        "trono",
        "troppo",
        "trottola",
        "trovare",
        "truccato",
        "tubatura",
        "tuffato",
        "tulipano",
        "tumulto",
        "tunisia",
        "turbare",
        "turchino",
        "tuta",
        "tutela",
        "ubicato",
        "uccello",
        "uccisore",
        "udire",
        "uditivo",
        "uffa",
        "ufficio",
        "uguale",
        "ulisse",
        "ultimato",
        "umano",
        "umile",
        "umorismo",
        "uncinetto",
        "ungere",
        "ungherese",
        "unicorno",
        "unificato",
        "unisono",
        "unitario",
        "unte",
        "uovo",
        "upupa",
        "uragano",
        "urgenza",
        "urlo",
        "usanza",
        "usato",
        "uscito",
        "usignolo",
        "usuraio",
        "utensile",
        "utilizzo",
        "utopia",
        "vacante",
        "vaccinato",
        "vagabondo",
        "vagliato",
        "valanga",
        "valgo",
        "valico",
        "valletta",
        "valoroso",
        "valutare",
        "valvola",
        "vampata",
        "vangare",
        "vanitoso",
        "vano",
        "vantaggio",
        "vanvera",
        "vapore",
        "varano",
        "varcato",
        "variante",
        "vasca",
        "vedetta",
        "vedova",
        "veduto",
        "vegetale",
        "veicolo",
        "velcro",
        "velina",
        "velluto",
        "veloce",
        "venato",
        "vendemmia",
        "vento",
        "verace",
        "verbale",
        "vergogna",
        "verifica",
        "vero",
        "verruca",
        "verticale",
        "vescica",
        "vessillo",
        "vestale",
        "veterano",
        "vetrina",
        "vetusto",
        "viandante",
        "vibrante",
        "vicenda",
        "vichingo",
        "vicinanza",
        "vidimare",
        "vigilia",
        "vigneto",
        "vigore",
        "vile",
        "villano",
        "vimini",
        "vincitore",
        "viola",
        "vipera",
        "virgola",
        "virologo",
        "virulento",
        "viscoso",
        "visione",
        "vispo",
        "vissuto",
        "visura",
        "vita",
        "vitello",
        "vittima",
        "vivanda",
        "vivido",
        "viziare",
        "voce",
        "voga",
        "volatile",
        "volere",
        "volpe",
        "voragine",
        "vulcano",
        "zampogna",
        "zanna",
        "zappato",
        "zattera",
        "zavorra",
        "zefiro",
        "zelante",
        "zelo",
        "zenzero",
        "zerbino",
        "zibetto",
        "zinco",
        "zircone",
        "zitto",
        "zolla",
        "zotico",
        "zucchero",
        "zufolo",
        "zulu",
        "zuppa"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/japanese.js
  var require_japanese = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/japanese.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "\u3042\u3044\u3053\u304F\u3057\u3093",
        "\u3042\u3044\u3055\u3064",
        "\u3042\u3044\u305F\u3099",
        "\u3042\u304A\u305D\u3099\u3089",
        "\u3042\u304B\u3061\u3083\u3093",
        "\u3042\u304D\u308B",
        "\u3042\u3051\u304B\u3099\u305F",
        "\u3042\u3051\u308B",
        "\u3042\u3053\u304B\u3099\u308C\u308B",
        "\u3042\u3055\u3044",
        "\u3042\u3055\u3072",
        "\u3042\u3057\u3042\u3068",
        "\u3042\u3057\u3099\u308F\u3046",
        "\u3042\u3059\u3099\u304B\u308B",
        "\u3042\u3059\u3099\u304D",
        "\u3042\u305D\u3075\u3099",
        "\u3042\u305F\u3048\u308B",
        "\u3042\u305F\u305F\u3081\u308B",
        "\u3042\u305F\u308A\u307E\u3048",
        "\u3042\u305F\u308B",
        "\u3042\u3064\u3044",
        "\u3042\u3064\u304B\u3046",
        "\u3042\u3063\u3057\u3085\u304F",
        "\u3042\u3064\u307E\u308A",
        "\u3042\u3064\u3081\u308B",
        "\u3042\u3066\u306A",
        "\u3042\u3066\u306F\u307E\u308B",
        "\u3042\u3072\u308B",
        "\u3042\u3075\u3099\u3089",
        "\u3042\u3075\u3099\u308B",
        "\u3042\u3075\u308C\u308B",
        "\u3042\u307E\u3044",
        "\u3042\u307E\u3068\u3099",
        "\u3042\u307E\u3084\u304B\u3059",
        "\u3042\u307E\u308A",
        "\u3042\u307F\u3082\u306E",
        "\u3042\u3081\u308A\u304B",
        "\u3042\u3084\u307E\u308B",
        "\u3042\u3086\u3080",
        "\u3042\u3089\u3044\u304F\u3099\u307E",
        "\u3042\u3089\u3057",
        "\u3042\u3089\u3059\u3057\u3099",
        "\u3042\u3089\u305F\u3081\u308B",
        "\u3042\u3089\u3086\u308B",
        "\u3042\u3089\u308F\u3059",
        "\u3042\u308A\u304B\u3099\u3068\u3046",
        "\u3042\u308F\u305B\u308B",
        "\u3042\u308F\u3066\u308B",
        "\u3042\u3093\u3044",
        "\u3042\u3093\u304B\u3099\u3044",
        "\u3042\u3093\u3053",
        "\u3042\u3093\u305B\u3099\u3093",
        "\u3042\u3093\u3066\u3044",
        "\u3042\u3093\u306A\u3044",
        "\u3042\u3093\u307E\u308A",
        "\u3044\u3044\u305F\u3099\u3059",
        "\u3044\u304A\u3093",
        "\u3044\u304B\u3099\u3044",
        "\u3044\u304B\u3099\u304F",
        "\u3044\u304D\u304A\u3044",
        "\u3044\u304D\u306A\u308A",
        "\u3044\u304D\u3082\u306E",
        "\u3044\u304D\u308B",
        "\u3044\u304F\u3057\u3099",
        "\u3044\u304F\u3075\u3099\u3093",
        "\u3044\u3051\u306F\u3099\u306A",
        "\u3044\u3051\u3093",
        "\u3044\u3053\u3046",
        "\u3044\u3053\u304F",
        "\u3044\u3053\u3064",
        "\u3044\u3055\u307E\u3057\u3044",
        "\u3044\u3055\u3093",
        "\u3044\u3057\u304D",
        "\u3044\u3057\u3099\u3085\u3046",
        "\u3044\u3057\u3099\u3087\u3046",
        "\u3044\u3057\u3099\u308F\u308B",
        "\u3044\u3059\u3099\u307F",
        "\u3044\u3059\u3099\u308C",
        "\u3044\u305B\u3044",
        "\u3044\u305B\u3048\u3072\u3099",
        "\u3044\u305B\u304B\u3044",
        "\u3044\u305B\u304D",
        "\u3044\u305B\u3099\u3093",
        "\u3044\u305D\u3046\u308D\u3046",
        "\u3044\u305D\u304B\u3099\u3057\u3044",
        "\u3044\u305F\u3099\u3044",
        "\u3044\u305F\u3099\u304F",
        "\u3044\u305F\u3059\u3099\u3089",
        "\u3044\u305F\u307F",
        "\u3044\u305F\u308A\u3042",
        "\u3044\u3061\u304A\u3046",
        "\u3044\u3061\u3057\u3099",
        "\u3044\u3061\u3068\u3099",
        "\u3044\u3061\u306F\u3099",
        "\u3044\u3061\u3075\u3099",
        "\u3044\u3061\u308A\u3085\u3046",
        "\u3044\u3064\u304B",
        "\u3044\u3063\u3057\u3085\u3093",
        "\u3044\u3063\u305B\u3044",
        "\u3044\u3063\u305D\u3046",
        "\u3044\u3063\u305F\u3093",
        "\u3044\u3063\u3061",
        "\u3044\u3063\u3066\u3044",
        "\u3044\u3063\u307B\u309A\u3046",
        "\u3044\u3066\u3055\u3099",
        "\u3044\u3066\u3093",
        "\u3044\u3068\u3099\u3046",
        "\u3044\u3068\u3053",
        "\u3044\u306A\u3044",
        "\u3044\u306A\u304B",
        "\u3044\u306D\u3080\u308A",
        "\u3044\u306E\u3061",
        "\u3044\u306E\u308B",
        "\u3044\u306F\u3064",
        "\u3044\u306F\u3099\u308B",
        "\u3044\u306F\u3093",
        "\u3044\u3072\u3099\u304D",
        "\u3044\u3072\u3093",
        "\u3044\u3075\u304F",
        "\u3044\u3078\u3093",
        "\u3044\u307B\u3046",
        "\u3044\u307F\u3093",
        "\u3044\u3082\u3046\u3068",
        "\u3044\u3082\u305F\u308C",
        "\u3044\u3082\u308A",
        "\u3044\u3084\u304B\u3099\u308B",
        "\u3044\u3084\u3059",
        "\u3044\u3088\u304B\u3093",
        "\u3044\u3088\u304F",
        "\u3044\u3089\u3044",
        "\u3044\u3089\u3059\u3068",
        "\u3044\u308A\u304F\u3099\u3061",
        "\u3044\u308A\u3087\u3046",
        "\u3044\u308C\u3044",
        "\u3044\u308C\u3082\u306E",
        "\u3044\u308C\u308B",
        "\u3044\u308D\u3048\u3093\u3072\u309A\u3064",
        "\u3044\u308F\u3044",
        "\u3044\u308F\u3046",
        "\u3044\u308F\u304B\u3093",
        "\u3044\u308F\u306F\u3099",
        "\u3044\u308F\u3086\u308B",
        "\u3044\u3093\u3051\u3099\u3093\u307E\u3081",
        "\u3044\u3093\u3055\u3064",
        "\u3044\u3093\u3057\u3087\u3046",
        "\u3044\u3093\u3088\u3046",
        "\u3046\u3048\u304D",
        "\u3046\u3048\u308B",
        "\u3046\u304A\u3055\u3099",
        "\u3046\u304B\u3099\u3044",
        "\u3046\u304B\u3075\u3099",
        "\u3046\u304B\u3078\u3099\u308B",
        "\u3046\u304D\u308F",
        "\u3046\u304F\u3089\u3044\u306A",
        "\u3046\u304F\u308C\u308C",
        "\u3046\u3051\u305F\u307E\u308F\u308B",
        "\u3046\u3051\u3064\u3051",
        "\u3046\u3051\u3068\u308B",
        "\u3046\u3051\u3082\u3064",
        "\u3046\u3051\u308B",
        "\u3046\u3053\u3099\u304B\u3059",
        "\u3046\u3053\u3099\u304F",
        "\u3046\u3053\u3093",
        "\u3046\u3055\u304D\u3099",
        "\u3046\u3057\u306A\u3046",
        "\u3046\u3057\u308D\u304B\u3099\u307F",
        "\u3046\u3059\u3044",
        "\u3046\u3059\u304D\u3099",
        "\u3046\u3059\u304F\u3099\u3089\u3044",
        "\u3046\u3059\u3081\u308B",
        "\u3046\u305B\u3064",
        "\u3046\u3061\u3042\u308F\u305B",
        "\u3046\u3061\u304B\u3099\u308F",
        "\u3046\u3061\u304D",
        "\u3046\u3061\u3085\u3046",
        "\u3046\u3063\u304B\u308A",
        "\u3046\u3064\u304F\u3057\u3044",
        "\u3046\u3063\u305F\u3048\u308B",
        "\u3046\u3064\u308B",
        "\u3046\u3068\u3099\u3093",
        "\u3046\u306A\u304D\u3099",
        "\u3046\u306A\u3057\u3099",
        "\u3046\u306A\u3059\u3099\u304F",
        "\u3046\u306A\u308B",
        "\u3046\u306D\u308B",
        "\u3046\u306E\u3046",
        "\u3046\u3075\u3099\u3051\u3099",
        "\u3046\u3075\u3099\u3053\u3099\u3048",
        "\u3046\u307E\u308C\u308B",
        "\u3046\u3081\u308B",
        "\u3046\u3082\u3046",
        "\u3046\u3084\u307E\u3046",
        "\u3046\u3088\u304F",
        "\u3046\u3089\u304B\u3099\u3048\u3059",
        "\u3046\u3089\u304F\u3099\u3061",
        "\u3046\u3089\u306A\u3044",
        "\u3046\u308A\u3042\u3051\u3099",
        "\u3046\u308A\u304D\u308C",
        "\u3046\u308B\u3055\u3044",
        "\u3046\u308C\u3057\u3044",
        "\u3046\u308C\u3086\u304D",
        "\u3046\u308C\u308B",
        "\u3046\u308D\u3053",
        "\u3046\u308F\u304D",
        "\u3046\u308F\u3055",
        "\u3046\u3093\u3053\u3046",
        "\u3046\u3093\u3061\u3093",
        "\u3046\u3093\u3066\u3093",
        "\u3046\u3093\u3068\u3099\u3046",
        "\u3048\u3044\u3048\u3093",
        "\u3048\u3044\u304B\u3099",
        "\u3048\u3044\u304D\u3087\u3046",
        "\u3048\u3044\u3053\u3099",
        "\u3048\u3044\u305B\u3044",
        "\u3048\u3044\u3075\u3099\u3093",
        "\u3048\u3044\u3088\u3046",
        "\u3048\u3044\u308F",
        "\u3048\u304A\u308A",
        "\u3048\u304B\u3099\u304A",
        "\u3048\u304B\u3099\u304F",
        "\u3048\u304D\u305F\u3044",
        "\u3048\u304F\u305B\u308B",
        "\u3048\u3057\u3083\u304F",
        "\u3048\u3059\u3066",
        "\u3048\u3064\u3089\u3093",
        "\u3048\u306E\u304F\u3099",
        "\u3048\u307B\u3046\u307E\u304D",
        "\u3048\u307B\u3093",
        "\u3048\u307E\u304D",
        "\u3048\u3082\u3057\u3099",
        "\u3048\u3082\u306E",
        "\u3048\u3089\u3044",
        "\u3048\u3089\u3075\u3099",
        "\u3048\u308A\u3042",
        "\u3048\u3093\u3048\u3093",
        "\u3048\u3093\u304B\u3044",
        "\u3048\u3093\u304D\u3099",
        "\u3048\u3093\u3051\u3099\u304D",
        "\u3048\u3093\u3057\u3085\u3046",
        "\u3048\u3093\u305B\u3099\u3064",
        "\u3048\u3093\u305D\u304F",
        "\u3048\u3093\u3061\u3087\u3046",
        "\u3048\u3093\u3068\u3064",
        "\u304A\u3044\u304B\u3051\u308B",
        "\u304A\u3044\u3053\u3059",
        "\u304A\u3044\u3057\u3044",
        "\u304A\u3044\u3064\u304F",
        "\u304A\u3046\u3048\u3093",
        "\u304A\u3046\u3055\u307E",
        "\u304A\u3046\u3057\u3099",
        "\u304A\u3046\u305B\u3064",
        "\u304A\u3046\u305F\u3044",
        "\u304A\u3046\u3075\u304F",
        "\u304A\u3046\u3078\u3099\u3044",
        "\u304A\u3046\u3088\u3046",
        "\u304A\u3048\u308B",
        "\u304A\u304A\u3044",
        "\u304A\u304A\u3046",
        "\u304A\u304A\u3068\u3099\u304A\u308A",
        "\u304A\u304A\u3084",
        "\u304A\u304A\u3088\u305D",
        "\u304A\u304B\u3048\u308A",
        "\u304A\u304B\u3059\u3099",
        "\u304A\u304B\u3099\u3080",
        "\u304A\u304B\u308F\u308A",
        "\u304A\u304D\u3099\u306A\u3046",
        "\u304A\u304D\u308B",
        "\u304A\u304F\u3055\u307E",
        "\u304A\u304F\u3057\u3099\u3087\u3046",
        "\u304A\u304F\u308A\u304B\u3099\u306A",
        "\u304A\u304F\u308B",
        "\u304A\u304F\u308C\u308B",
        "\u304A\u3053\u3059",
        "\u304A\u3053\u306A\u3046",
        "\u304A\u3053\u308B",
        "\u304A\u3055\u3048\u308B",
        "\u304A\u3055\u306A\u3044",
        "\u304A\u3055\u3081\u308B",
        "\u304A\u3057\u3044\u308C",
        "\u304A\u3057\u3048\u308B",
        "\u304A\u3057\u3099\u304D\u3099",
        "\u304A\u3057\u3099\u3055\u3093",
        "\u304A\u3057\u3083\u308C",
        "\u304A\u305D\u3089\u304F",
        "\u304A\u305D\u308F\u308B",
        "\u304A\u305F\u304B\u3099\u3044",
        "\u304A\u305F\u304F",
        "\u304A\u305F\u3099\u3084\u304B",
        "\u304A\u3061\u3064\u304F",
        "\u304A\u3063\u3068",
        "\u304A\u3064\u308A",
        "\u304A\u3066\u3099\u304B\u3051",
        "\u304A\u3068\u3057\u3082\u306E",
        "\u304A\u3068\u306A\u3057\u3044",
        "\u304A\u3068\u3099\u308A",
        "\u304A\u3068\u3099\u308D\u304B\u3059",
        "\u304A\u306F\u3099\u3055\u3093",
        "\u304A\u307E\u3044\u308A",
        "\u304A\u3081\u3066\u3099\u3068\u3046",
        "\u304A\u3082\u3044\u3066\u3099",
        "\u304A\u3082\u3046",
        "\u304A\u3082\u305F\u3044",
        "\u304A\u3082\u3061\u3083",
        "\u304A\u3084\u3064",
        "\u304A\u3084\u3086\u3072\u3099",
        "\u304A\u3088\u307B\u3099\u3059",
        "\u304A\u3089\u3093\u305F\u3099",
        "\u304A\u308D\u3059",
        "\u304A\u3093\u304B\u3099\u304F",
        "\u304A\u3093\u3051\u3044",
        "\u304A\u3093\u3057\u3083",
        "\u304A\u3093\u305B\u3093",
        "\u304A\u3093\u305F\u3099\u3093",
        "\u304A\u3093\u3061\u3085\u3046",
        "\u304A\u3093\u3068\u3099\u3051\u3044",
        "\u304B\u3042\u3064",
        "\u304B\u3044\u304B\u3099",
        "\u304B\u3099\u3044\u304D",
        "\u304B\u3099\u3044\u3051\u3093",
        "\u304B\u3099\u3044\u3053\u3046",
        "\u304B\u3044\u3055\u3064",
        "\u304B\u3044\u3057\u3083",
        "\u304B\u3044\u3059\u3044\u3088\u304F",
        "\u304B\u3044\u305B\u3099\u3093",
        "\u304B\u3044\u305D\u3099\u3046\u3068\u3099",
        "\u304B\u3044\u3064\u3046",
        "\u304B\u3044\u3066\u3093",
        "\u304B\u3044\u3068\u3046",
        "\u304B\u3044\u3075\u304F",
        "\u304B\u3099\u3044\u3078\u304D",
        "\u304B\u3044\u307B\u3046",
        "\u304B\u3044\u3088\u3046",
        "\u304B\u3099\u3044\u3089\u3044",
        "\u304B\u3044\u308F",
        "\u304B\u3048\u308B",
        "\u304B\u304A\u308A",
        "\u304B\u304B\u3048\u308B",
        "\u304B\u304B\u3099\u304F",
        "\u304B\u304B\u3099\u3057",
        "\u304B\u304B\u3099\u307F",
        "\u304B\u304F\u3053\u3099",
        "\u304B\u304F\u3068\u304F",
        "\u304B\u3055\u3099\u308B",
        "\u304B\u3099\u305D\u3099\u3046",
        "\u304B\u305F\u3044",
        "\u304B\u305F\u3061",
        "\u304B\u3099\u3061\u3087\u3046",
        "\u304B\u3099\u3063\u304D\u3085\u3046",
        "\u304B\u3099\u3063\u3053\u3046",
        "\u304B\u3099\u3063\u3055\u3093",
        "\u304B\u3099\u3063\u3057\u3087\u3046",
        "\u304B\u306A\u3055\u3099\u308F\u3057",
        "\u304B\u306E\u3046",
        "\u304B\u3099\u306F\u304F",
        "\u304B\u3075\u3099\u304B",
        "\u304B\u307B\u3046",
        "\u304B\u307B\u3053\u3099",
        "\u304B\u307E\u3046",
        "\u304B\u307E\u307B\u3099\u3053",
        "\u304B\u3081\u308C\u304A\u3093",
        "\u304B\u3086\u3044",
        "\u304B\u3088\u3046\u3072\u3099",
        "\u304B\u3089\u3044",
        "\u304B\u308B\u3044",
        "\u304B\u308D\u3046",
        "\u304B\u308F\u304F",
        "\u304B\u308F\u3089",
        "\u304B\u3099\u3093\u304B",
        "\u304B\u3093\u3051\u3044",
        "\u304B\u3093\u3053\u3046",
        "\u304B\u3093\u3057\u3083",
        "\u304B\u3093\u305D\u3046",
        "\u304B\u3093\u305F\u3093",
        "\u304B\u3093\u3061",
        "\u304B\u3099\u3093\u306F\u3099\u308B",
        "\u304D\u3042\u3044",
        "\u304D\u3042\u3064",
        "\u304D\u3044\u308D",
        "\u304D\u3099\u3044\u3093",
        "\u304D\u3046\u3044",
        "\u304D\u3046\u3093",
        "\u304D\u3048\u308B",
        "\u304D\u304A\u3046",
        "\u304D\u304A\u304F",
        "\u304D\u304A\u3061",
        "\u304D\u304A\u3093",
        "\u304D\u304B\u3044",
        "\u304D\u304B\u304F",
        "\u304D\u304B\u3093\u3057\u3083",
        "\u304D\u304D\u3066",
        "\u304D\u304F\u306F\u3099\u308A",
        "\u304D\u304F\u3089\u3051\u3099",
        "\u304D\u3051\u3093\u305B\u3044",
        "\u304D\u3053\u3046",
        "\u304D\u3053\u3048\u308B",
        "\u304D\u3053\u304F",
        "\u304D\u3055\u3044",
        "\u304D\u3055\u304F",
        "\u304D\u3055\u307E",
        "\u304D\u3055\u3089\u304D\u3099",
        "\u304D\u3099\u3057\u3099\u304B\u304B\u3099\u304F",
        "\u304D\u3099\u3057\u304D",
        "\u304D\u3099\u3057\u3099\u305F\u3044\u3051\u3093",
        "\u304D\u3099\u3057\u3099\u306B\u3063\u3066\u3044",
        "\u304D\u3099\u3057\u3099\u3085\u3064\u3057\u3083",
        "\u304D\u3059\u3046",
        "\u304D\u305B\u3044",
        "\u304D\u305B\u304D",
        "\u304D\u305B\u3064",
        "\u304D\u305D\u3046",
        "\u304D\u305D\u3099\u304F",
        "\u304D\u305D\u3099\u3093",
        "\u304D\u305F\u3048\u308B",
        "\u304D\u3061\u3087\u3046",
        "\u304D\u3064\u3048\u3093",
        "\u304D\u3099\u3063\u3061\u308A",
        "\u304D\u3064\u3064\u304D",
        "\u304D\u3064\u306D",
        "\u304D\u3066\u3044",
        "\u304D\u3068\u3099\u3046",
        "\u304D\u3068\u3099\u304F",
        "\u304D\u306A\u3044",
        "\u304D\u306A\u304B\u3099",
        "\u304D\u306A\u3053",
        "\u304D\u306C\u3053\u3099\u3057",
        "\u304D\u306D\u3093",
        "\u304D\u306E\u3046",
        "\u304D\u306E\u3057\u305F",
        "\u304D\u306F\u304F",
        "\u304D\u3072\u3099\u3057\u3044",
        "\u304D\u3072\u3093",
        "\u304D\u3075\u304F",
        "\u304D\u3075\u3099\u3093",
        "\u304D\u307B\u3099\u3046",
        "\u304D\u307B\u3093",
        "\u304D\u307E\u308B",
        "\u304D\u307F\u3064",
        "\u304D\u3080\u3059\u3099\u304B\u3057\u3044",
        "\u304D\u3081\u308B",
        "\u304D\u3082\u305F\u3099\u3081\u3057",
        "\u304D\u3082\u3061",
        "\u304D\u3082\u306E",
        "\u304D\u3083\u304F",
        "\u304D\u3084\u304F",
        "\u304D\u3099\u3085\u3046\u306B\u304F",
        "\u304D\u3088\u3046",
        "\u304D\u3087\u3046\u308A\u3085\u3046",
        "\u304D\u3089\u3044",
        "\u304D\u3089\u304F",
        "\u304D\u308A\u3093",
        "\u304D\u308C\u3044",
        "\u304D\u308C\u3064",
        "\u304D\u308D\u304F",
        "\u304D\u3099\u308D\u3093",
        "\u304D\u308F\u3081\u308B",
        "\u304D\u3099\u3093\u3044\u308D",
        "\u304D\u3093\u304B\u304F\u3057\u3099",
        "\u304D\u3093\u3057\u3099\u3087",
        "\u304D\u3093\u3088\u3046\u3072\u3099",
        "\u304F\u3099\u3042\u3044",
        "\u304F\u3044\u3059\u3099",
        "\u304F\u3046\u304B\u3093",
        "\u304F\u3046\u304D",
        "\u304F\u3046\u304F\u3099\u3093",
        "\u304F\u3046\u3053\u3046",
        "\u304F\u3099\u3046\u305B\u3044",
        "\u304F\u3046\u305D\u3046",
        "\u304F\u3099\u3046\u305F\u3089",
        "\u304F\u3046\u3075\u304F",
        "\u304F\u3046\u307B\u3099",
        "\u304F\u304B\u3093",
        "\u304F\u304D\u3087\u3046",
        "\u304F\u3051\u3099\u3093",
        "\u304F\u3099\u3053\u3046",
        "\u304F\u3055\u3044",
        "\u304F\u3055\u304D",
        "\u304F\u3055\u306F\u3099\u306A",
        "\u304F\u3055\u308B",
        "\u304F\u3057\u3083\u307F",
        "\u304F\u3057\u3087\u3046",
        "\u304F\u3059\u306E\u304D",
        "\u304F\u3059\u308A\u3086\u3072\u3099",
        "\u304F\u305B\u3051\u3099",
        "\u304F\u305B\u3093",
        "\u304F\u3099\u305F\u3044\u3066\u304D",
        "\u304F\u305F\u3099\u3055\u308B",
        "\u304F\u305F\u3072\u3099\u308C\u308B",
        "\u304F\u3061\u3053\u307F",
        "\u304F\u3061\u3055\u304D",
        "\u304F\u3064\u3057\u305F",
        "\u304F\u3099\u3063\u3059\u308A",
        "\u304F\u3064\u308D\u304F\u3099",
        "\u304F\u3068\u3046\u3066\u3093",
        "\u304F\u3068\u3099\u304F",
        "\u304F\u306A\u3093",
        "\u304F\u306D\u304F\u306D",
        "\u304F\u306E\u3046",
        "\u304F\u3075\u3046",
        "\u304F\u307F\u3042\u308F\u305B",
        "\u304F\u307F\u305F\u3066\u308B",
        "\u304F\u3081\u308B",
        "\u304F\u3084\u304F\u3057\u3087",
        "\u304F\u3089\u3059",
        "\u304F\u3089\u3078\u3099\u308B",
        "\u304F\u308B\u307E",
        "\u304F\u308C\u308B",
        "\u304F\u308D\u3046",
        "\u304F\u308F\u3057\u3044",
        "\u304F\u3099\u3093\u304B\u3093",
        "\u304F\u3099\u3093\u3057\u3087\u304F",
        "\u304F\u3099\u3093\u305F\u3044",
        "\u304F\u3099\u3093\u3066",
        "\u3051\u3042\u306A",
        "\u3051\u3044\u304B\u304F",
        "\u3051\u3044\u3051\u3093",
        "\u3051\u3044\u3053",
        "\u3051\u3044\u3055\u3064",
        "\u3051\u3099\u3044\u3057\u3099\u3085\u3064",
        "\u3051\u3044\u305F\u3044",
        "\u3051\u3099\u3044\u306E\u3046\u3057\u3099\u3093",
        "\u3051\u3044\u308C\u304D",
        "\u3051\u3044\u308D",
        "\u3051\u304A\u3068\u3059",
        "\u3051\u304A\u308A\u3082\u306E",
        "\u3051\u3099\u304D\u304B",
        "\u3051\u3099\u304D\u3051\u3099\u3093",
        "\u3051\u3099\u304D\u305F\u3099\u3093",
        "\u3051\u3099\u304D\u3061\u3093",
        "\u3051\u3099\u304D\u3068\u3064",
        "\u3051\u3099\u304D\u306F",
        "\u3051\u3099\u304D\u3084\u304F",
        "\u3051\u3099\u3053\u3046",
        "\u3051\u3099\u3053\u304F\u3057\u3099\u3087\u3046",
        "\u3051\u3099\u3055\u3099\u3044",
        "\u3051\u3055\u304D",
        "\u3051\u3099\u3055\u3099\u3093",
        "\u3051\u3057\u304D",
        "\u3051\u3057\u3053\u3099\u3080",
        "\u3051\u3057\u3087\u3046",
        "\u3051\u3099\u3059\u3068",
        "\u3051\u305F\u306F\u3099",
        "\u3051\u3061\u3083\u3063\u3075\u309A",
        "\u3051\u3061\u3089\u3059",
        "\u3051\u3064\u3042\u3064",
        "\u3051\u3064\u3044",
        "\u3051\u3064\u3048\u304D",
        "\u3051\u3063\u3053\u3093",
        "\u3051\u3064\u3057\u3099\u3087",
        "\u3051\u3063\u305B\u304D",
        "\u3051\u3063\u3066\u3044",
        "\u3051\u3064\u307E\u3064",
        "\u3051\u3099\u3064\u3088\u3046\u3072\u3099",
        "\u3051\u3099\u3064\u308C\u3044",
        "\u3051\u3064\u308D\u3093",
        "\u3051\u3099\u3068\u3099\u304F",
        "\u3051\u3068\u306F\u3099\u3059",
        "\u3051\u3068\u308B",
        "\u3051\u306A\u3051\u3099",
        "\u3051\u306A\u3059",
        "\u3051\u306A\u307F",
        "\u3051\u306C\u304D",
        "\u3051\u3099\u306D\u3064",
        "\u3051\u306D\u3093",
        "\u3051\u306F\u3044",
        "\u3051\u3099\u3072\u3093",
        "\u3051\u3075\u3099\u304B\u3044",
        "\u3051\u3099\u307B\u3099\u304F",
        "\u3051\u307E\u308A",
        "\u3051\u307F\u304B\u308B",
        "\u3051\u3080\u3057",
        "\u3051\u3080\u308A",
        "\u3051\u3082\u306E",
        "\u3051\u3089\u3044",
        "\u3051\u308D\u3051\u308D",
        "\u3051\u308F\u3057\u3044",
        "\u3051\u3093\u3044",
        "\u3051\u3093\u3048\u3064",
        "\u3051\u3093\u304A",
        "\u3051\u3093\u304B",
        "\u3051\u3099\u3093\u304D",
        "\u3051\u3093\u3051\u3099\u3093",
        "\u3051\u3093\u3053\u3046",
        "\u3051\u3093\u3055\u304F",
        "\u3051\u3093\u3057\u3085\u3046",
        "\u3051\u3093\u3059\u3046",
        "\u3051\u3099\u3093\u305D\u3046",
        "\u3051\u3093\u3061\u304F",
        "\u3051\u3093\u3066\u3044",
        "\u3051\u3093\u3068\u3046",
        "\u3051\u3093\u306A\u3044",
        "\u3051\u3093\u306B\u3093",
        "\u3051\u3099\u3093\u3075\u3099\u3064",
        "\u3051\u3093\u307E",
        "\u3051\u3093\u307F\u3093",
        "\u3051\u3093\u3081\u3044",
        "\u3051\u3093\u3089\u3093",
        "\u3051\u3093\u308A",
        "\u3053\u3042\u304F\u307E",
        "\u3053\u3044\u306C",
        "\u3053\u3044\u3072\u3099\u3068",
        "\u3053\u3099\u3046\u3044",
        "\u3053\u3046\u3048\u3093",
        "\u3053\u3046\u304A\u3093",
        "\u3053\u3046\u304B\u3093",
        "\u3053\u3099\u3046\u304D\u3085\u3046",
        "\u3053\u3099\u3046\u3051\u3044",
        "\u3053\u3046\u3053\u3046",
        "\u3053\u3046\u3055\u3044",
        "\u3053\u3046\u3057\u3099",
        "\u3053\u3046\u3059\u3044",
        "\u3053\u3099\u3046\u305B\u3044",
        "\u3053\u3046\u305D\u304F",
        "\u3053\u3046\u305F\u3044",
        "\u3053\u3046\u3061\u3083",
        "\u3053\u3046\u3064\u3046",
        "\u3053\u3046\u3066\u3044",
        "\u3053\u3046\u3068\u3099\u3046",
        "\u3053\u3046\u306A\u3044",
        "\u3053\u3046\u306F\u3044",
        "\u3053\u3099\u3046\u307B\u3046",
        "\u3053\u3099\u3046\u307E\u3093",
        "\u3053\u3046\u3082\u304F",
        "\u3053\u3046\u308A\u3064",
        "\u3053\u3048\u308B",
        "\u3053\u304A\u308A",
        "\u3053\u3099\u304B\u3044",
        "\u3053\u3099\u304B\u3099\u3064",
        "\u3053\u3099\u304B\u3093",
        "\u3053\u304F\u3053\u3099",
        "\u3053\u304F\u3055\u3044",
        "\u3053\u304F\u3068\u3046",
        "\u3053\u304F\u306A\u3044",
        "\u3053\u304F\u306F\u304F",
        "\u3053\u304F\u3099\u307E",
        "\u3053\u3051\u3044",
        "\u3053\u3051\u308B",
        "\u3053\u3053\u306E\u304B",
        "\u3053\u3053\u308D",
        "\u3053\u3055\u3081",
        "\u3053\u3057\u3064",
        "\u3053\u3059\u3046",
        "\u3053\u305B\u3044",
        "\u3053\u305B\u304D",
        "\u3053\u305B\u3099\u3093",
        "\u3053\u305D\u305F\u3099\u3066",
        "\u3053\u305F\u3044",
        "\u3053\u305F\u3048\u308B",
        "\u3053\u305F\u3064",
        "\u3053\u3061\u3087\u3046",
        "\u3053\u3063\u304B",
        "\u3053\u3064\u3053\u3064",
        "\u3053\u3064\u306F\u3099\u3093",
        "\u3053\u3064\u3075\u3099",
        "\u3053\u3066\u3044",
        "\u3053\u3066\u3093",
        "\u3053\u3068\u304B\u3099\u3089",
        "\u3053\u3068\u3057",
        "\u3053\u3068\u306F\u3099",
        "\u3053\u3068\u308A",
        "\u3053\u306A\u3053\u3099\u306A",
        "\u3053\u306D\u3053\u306D",
        "\u3053\u306E\u307E\u307E",
        "\u3053\u306E\u307F",
        "\u3053\u306E\u3088",
        "\u3053\u3099\u306F\u3093",
        "\u3053\u3072\u3064\u3057\u3099",
        "\u3053\u3075\u3046",
        "\u3053\u3075\u3093",
        "\u3053\u307B\u3099\u308C\u308B",
        "\u3053\u3099\u307E\u3042\u3075\u3099\u3089",
        "\u3053\u307E\u304B\u3044",
        "\u3053\u3099\u307E\u3059\u308A",
        "\u3053\u307E\u3064\u306A",
        "\u3053\u307E\u308B",
        "\u3053\u3080\u304D\u3099\u3053",
        "\u3053\u3082\u3057\u3099",
        "\u3053\u3082\u3061",
        "\u3053\u3082\u306E",
        "\u3053\u3082\u3093",
        "\u3053\u3084\u304F",
        "\u3053\u3084\u307E",
        "\u3053\u3086\u3046",
        "\u3053\u3086\u3072\u3099",
        "\u3053\u3088\u3044",
        "\u3053\u3088\u3046",
        "\u3053\u308A\u308B",
        "\u3053\u308C\u304F\u3057\u3087\u3093",
        "\u3053\u308D\u3063\u3051",
        "\u3053\u308F\u3082\u3066",
        "\u3053\u308F\u308C\u308B",
        "\u3053\u3093\u3044\u3093",
        "\u3053\u3093\u304B\u3044",
        "\u3053\u3093\u304D",
        "\u3053\u3093\u3057\u3085\u3046",
        "\u3053\u3093\u3059\u3044",
        "\u3053\u3093\u305F\u3099\u3066",
        "\u3053\u3093\u3068\u3093",
        "\u3053\u3093\u306A\u3093",
        "\u3053\u3093\u3072\u3099\u306B",
        "\u3053\u3093\u307B\u309A\u3093",
        "\u3053\u3093\u307E\u3051",
        "\u3053\u3093\u3084",
        "\u3053\u3093\u308C\u3044",
        "\u3053\u3093\u308F\u304F",
        "\u3055\u3099\u3044\u3048\u304D",
        "\u3055\u3044\u304B\u3044",
        "\u3055\u3044\u304D\u3093",
        "\u3055\u3099\u3044\u3051\u3099\u3093",
        "\u3055\u3099\u3044\u3053",
        "\u3055\u3044\u3057\u3087",
        "\u3055\u3044\u305B\u3044",
        "\u3055\u3099\u3044\u305F\u304F",
        "\u3055\u3099\u3044\u3061\u3085\u3046",
        "\u3055\u3044\u3066\u304D",
        "\u3055\u3099\u3044\u308A\u3087\u3046",
        "\u3055\u3046\u306A",
        "\u3055\u304B\u3044\u3057",
        "\u3055\u304B\u3099\u3059",
        "\u3055\u304B\u306A",
        "\u3055\u304B\u307F\u3061",
        "\u3055\u304B\u3099\u308B",
        "\u3055\u304D\u3099\u3087\u3046",
        "\u3055\u304F\u3057",
        "\u3055\u304F\u3072\u3093",
        "\u3055\u304F\u3089",
        "\u3055\u3053\u304F",
        "\u3055\u3053\u3064",
        "\u3055\u3059\u3099\u304B\u308B",
        "\u3055\u3099\u305B\u304D",
        "\u3055\u305F\u3093",
        "\u3055\u3064\u3048\u3044",
        "\u3055\u3099\u3064\u304A\u3093",
        "\u3055\u3099\u3063\u304B",
        "\u3055\u3099\u3064\u304B\u3099\u304F",
        "\u3055\u3063\u304D\u3087\u304F",
        "\u3055\u3099\u3063\u3057",
        "\u3055\u3064\u3057\u3099\u3093",
        "\u3055\u3099\u3063\u305D\u3046",
        "\u3055\u3064\u305F\u306F\u3099",
        "\u3055\u3064\u307E\u3044\u3082",
        "\u3055\u3066\u3044",
        "\u3055\u3068\u3044\u3082",
        "\u3055\u3068\u3046",
        "\u3055\u3068\u304A\u3084",
        "\u3055\u3068\u3057",
        "\u3055\u3068\u308B",
        "\u3055\u306E\u3046",
        "\u3055\u306F\u3099\u304F",
        "\u3055\u3072\u3099\u3057\u3044",
        "\u3055\u3078\u3099\u3064",
        "\u3055\u307B\u3046",
        "\u3055\u307B\u3068\u3099",
        "\u3055\u307E\u3059",
        "\u3055\u307F\u3057\u3044",
        "\u3055\u307F\u305F\u3099\u308C",
        "\u3055\u3080\u3051",
        "\u3055\u3081\u308B",
        "\u3055\u3084\u3048\u3093\u3068\u3099\u3046",
        "\u3055\u3086\u3046",
        "\u3055\u3088\u3046",
        "\u3055\u3088\u304F",
        "\u3055\u3089\u305F\u3099",
        "\u3055\u3099\u308B\u305D\u306F\u3099",
        "\u3055\u308F\u3084\u304B",
        "\u3055\u308F\u308B",
        "\u3055\u3093\u3044\u3093",
        "\u3055\u3093\u304B",
        "\u3055\u3093\u304D\u3083\u304F",
        "\u3055\u3093\u3053\u3046",
        "\u3055\u3093\u3055\u3044",
        "\u3055\u3099\u3093\u3057\u3087",
        "\u3055\u3093\u3059\u3046",
        "\u3055\u3093\u305B\u3044",
        "\u3055\u3093\u305D",
        "\u3055\u3093\u3061",
        "\u3055\u3093\u307E",
        "\u3055\u3093\u307F",
        "\u3055\u3093\u3089\u3093",
        "\u3057\u3042\u3044",
        "\u3057\u3042\u3051\u3099",
        "\u3057\u3042\u3055\u3063\u3066",
        "\u3057\u3042\u308F\u305B",
        "\u3057\u3044\u304F",
        "\u3057\u3044\u3093",
        "\u3057\u3046\u3061",
        "\u3057\u3048\u3044",
        "\u3057\u304A\u3051",
        "\u3057\u304B\u3044",
        "\u3057\u304B\u304F",
        "\u3057\u3099\u304B\u3093",
        "\u3057\u3053\u3099\u3068",
        "\u3057\u3059\u3046",
        "\u3057\u3099\u305F\u3099\u3044",
        "\u3057\u305F\u3046\u3051",
        "\u3057\u305F\u304D\u3099",
        "\u3057\u305F\u3066",
        "\u3057\u305F\u307F",
        "\u3057\u3061\u3087\u3046",
        "\u3057\u3061\u308A\u3093",
        "\u3057\u3063\u304B\u308A",
        "\u3057\u3064\u3057\u3099",
        "\u3057\u3064\u3082\u3093",
        "\u3057\u3066\u3044",
        "\u3057\u3066\u304D",
        "\u3057\u3066\u3064",
        "\u3057\u3099\u3066\u3093",
        "\u3057\u3099\u3068\u3099\u3046",
        "\u3057\u306A\u304D\u3099\u308C",
        "\u3057\u306A\u3082\u306E",
        "\u3057\u306A\u3093",
        "\u3057\u306D\u307E",
        "\u3057\u306D\u3093",
        "\u3057\u306E\u304F\u3099",
        "\u3057\u306E\u3075\u3099",
        "\u3057\u306F\u3044",
        "\u3057\u306F\u3099\u304B\u308A",
        "\u3057\u306F\u3064",
        "\u3057\u306F\u3089\u3044",
        "\u3057\u306F\u3093",
        "\u3057\u3072\u3087\u3046",
        "\u3057\u3075\u304F",
        "\u3057\u3099\u3075\u3099\u3093",
        "\u3057\u3078\u3044",
        "\u3057\u307B\u3046",
        "\u3057\u307B\u3093",
        "\u3057\u307E\u3046",
        "\u3057\u307E\u308B",
        "\u3057\u307F\u3093",
        "\u3057\u3080\u3051\u308B",
        "\u3057\u3099\u3080\u3057\u3087",
        "\u3057\u3081\u3044",
        "\u3057\u3081\u308B",
        "\u3057\u3082\u3093",
        "\u3057\u3083\u3044\u3093",
        "\u3057\u3083\u3046\u3093",
        "\u3057\u3083\u304A\u3093",
        "\u3057\u3099\u3083\u304B\u3099\u3044\u3082",
        "\u3057\u3084\u304F\u3057\u3087",
        "\u3057\u3083\u304F\u307B\u3046",
        "\u3057\u3083\u3051\u3093",
        "\u3057\u3083\u3053",
        "\u3057\u3083\u3055\u3099\u3044",
        "\u3057\u3083\u3057\u3093",
        "\u3057\u3083\u305B\u3093",
        "\u3057\u3083\u305D\u3046",
        "\u3057\u3083\u305F\u3044",
        "\u3057\u3083\u3061\u3087\u3046",
        "\u3057\u3083\u3063\u304D\u3093",
        "\u3057\u3099\u3083\u307E",
        "\u3057\u3083\u308A\u3093",
        "\u3057\u3083\u308C\u3044",
        "\u3057\u3099\u3086\u3046",
        "\u3057\u3099\u3085\u3046\u3057\u3087",
        "\u3057\u3085\u304F\u306F\u304F",
        "\u3057\u3099\u3085\u3057\u3093",
        "\u3057\u3085\u3063\u305B\u304D",
        "\u3057\u3085\u307F",
        "\u3057\u3085\u3089\u306F\u3099",
        "\u3057\u3099\u3085\u3093\u306F\u3099\u3093",
        "\u3057\u3087\u3046\u304B\u3044",
        "\u3057\u3087\u304F\u305F\u304F",
        "\u3057\u3087\u3063\u3051\u3093",
        "\u3057\u3087\u3068\u3099\u3046",
        "\u3057\u3087\u3082\u3064",
        "\u3057\u3089\u305B\u308B",
        "\u3057\u3089\u3078\u3099\u308B",
        "\u3057\u3093\u304B",
        "\u3057\u3093\u3053\u3046",
        "\u3057\u3099\u3093\u3057\u3099\u3083",
        "\u3057\u3093\u305B\u3044\u3057\u3099",
        "\u3057\u3093\u3061\u304F",
        "\u3057\u3093\u308A\u3093",
        "\u3059\u3042\u3051\u3099",
        "\u3059\u3042\u3057",
        "\u3059\u3042\u306A",
        "\u3059\u3099\u3042\u3093",
        "\u3059\u3044\u3048\u3044",
        "\u3059\u3044\u304B",
        "\u3059\u3044\u3068\u3046",
        "\u3059\u3099\u3044\u3075\u3099\u3093",
        "\u3059\u3044\u3088\u3046\u3072\u3099",
        "\u3059\u3046\u304B\u3099\u304F",
        "\u3059\u3046\u3057\u3099\u3064",
        "\u3059\u3046\u305B\u3093",
        "\u3059\u304A\u3068\u3099\u308A",
        "\u3059\u304D\u307E",
        "\u3059\u304F\u3046",
        "\u3059\u304F\u306A\u3044",
        "\u3059\u3051\u308B",
        "\u3059\u3053\u3099\u3044",
        "\u3059\u3053\u3057",
        "\u3059\u3099\u3055\u3093",
        "\u3059\u3059\u3099\u3057\u3044",
        "\u3059\u3059\u3080",
        "\u3059\u3059\u3081\u308B",
        "\u3059\u3063\u304B\u308A",
        "\u3059\u3099\u3063\u3057\u308A",
        "\u3059\u3099\u3063\u3068",
        "\u3059\u3066\u304D",
        "\u3059\u3066\u308B",
        "\u3059\u306D\u308B",
        "\u3059\u306E\u3053",
        "\u3059\u306F\u305F\u3099",
        "\u3059\u306F\u3099\u3089\u3057\u3044",
        "\u3059\u3099\u3072\u3087\u3046",
        "\u3059\u3099\u3075\u3099\u306C\u308C",
        "\u3059\u3075\u3099\u308A",
        "\u3059\u3075\u308C",
        "\u3059\u3078\u3099\u3066",
        "\u3059\u3078\u3099\u308B",
        "\u3059\u3099\u307B\u3046",
        "\u3059\u307B\u3099\u3093",
        "\u3059\u307E\u3044",
        "\u3059\u3081\u3057",
        "\u3059\u3082\u3046",
        "\u3059\u3084\u304D",
        "\u3059\u3089\u3059\u3089",
        "\u3059\u308B\u3081",
        "\u3059\u308C\u3061\u304B\u3099\u3046",
        "\u3059\u308D\u3063\u3068",
        "\u3059\u308F\u308B",
        "\u3059\u3093\u305B\u3099\u3093",
        "\u3059\u3093\u307B\u309A\u3046",
        "\u305B\u3042\u3075\u3099\u3089",
        "\u305B\u3044\u304B\u3064",
        "\u305B\u3044\u3051\u3099\u3093",
        "\u305B\u3044\u3057\u3099",
        "\u305B\u3044\u3088\u3046",
        "\u305B\u304A\u3046",
        "\u305B\u304B\u3044\u304B\u3093",
        "\u305B\u304D\u306B\u3093",
        "\u305B\u304D\u3080",
        "\u305B\u304D\u3086",
        "\u305B\u304D\u3089\u3093\u3046\u3093",
        "\u305B\u3051\u3093",
        "\u305B\u3053\u3046",
        "\u305B\u3059\u3057\u3099",
        "\u305B\u305F\u3044",
        "\u305B\u305F\u3051",
        "\u305B\u3063\u304B\u304F",
        "\u305B\u3063\u304D\u3083\u304F",
        "\u305B\u3099\u3063\u304F",
        "\u305B\u3063\u3051\u3093",
        "\u305B\u3063\u3053\u3064",
        "\u305B\u3063\u3055\u305F\u304F\u307E",
        "\u305B\u3064\u305D\u3099\u304F",
        "\u305B\u3064\u305F\u3099\u3093",
        "\u305B\u3064\u3066\u3099\u3093",
        "\u305B\u3063\u306F\u309A\u3093",
        "\u305B\u3064\u3072\u3099",
        "\u305B\u3064\u3075\u3099\u3093",
        "\u305B\u3064\u3081\u3044",
        "\u305B\u3064\u308A\u3064",
        "\u305B\u306A\u304B",
        "\u305B\u306E\u3072\u3099",
        "\u305B\u306F\u306F\u3099",
        "\u305B\u3072\u3099\u308D",
        "\u305B\u307B\u3099\u306D",
        "\u305B\u307E\u3044",
        "\u305B\u307E\u308B",
        "\u305B\u3081\u308B",
        "\u305B\u3082\u305F\u308C",
        "\u305B\u308A\u3075",
        "\u305B\u3099\u3093\u3042\u304F",
        "\u305B\u3093\u3044",
        "\u305B\u3093\u3048\u3044",
        "\u305B\u3093\u304B",
        "\u305B\u3093\u304D\u3087",
        "\u305B\u3093\u304F",
        "\u305B\u3093\u3051\u3099\u3093",
        "\u305B\u3099\u3093\u3053\u3099",
        "\u305B\u3093\u3055\u3044",
        "\u305B\u3093\u3057\u3085",
        "\u305B\u3093\u3059\u3044",
        "\u305B\u3093\u305B\u3044",
        "\u305B\u3093\u305D\u3099",
        "\u305B\u3093\u305F\u304F",
        "\u305B\u3093\u3061\u3087\u3046",
        "\u305B\u3093\u3066\u3044",
        "\u305B\u3093\u3068\u3046",
        "\u305B\u3093\u306C\u304D",
        "\u305B\u3093\u306D\u3093",
        "\u305B\u3093\u306F\u309A\u3044",
        "\u305B\u3099\u3093\u3075\u3099",
        "\u305B\u3099\u3093\u307B\u309A\u3046",
        "\u305B\u3093\u3080",
        "\u305B\u3093\u3081\u3093\u3057\u3099\u3087",
        "\u305B\u3093\u3082\u3093",
        "\u305B\u3093\u3084\u304F",
        "\u305B\u3093\u3086\u3046",
        "\u305B\u3093\u3088\u3046",
        "\u305B\u3099\u3093\u3089",
        "\u305B\u3099\u3093\u308A\u3083\u304F",
        "\u305B\u3093\u308C\u3044",
        "\u305B\u3093\u308D",
        "\u305D\u3042\u304F",
        "\u305D\u3044\u3068\u3051\u3099\u308B",
        "\u305D\u3044\u306D",
        "\u305D\u3046\u304B\u3099\u3093\u304D\u3087\u3046",
        "\u305D\u3046\u304D",
        "\u305D\u3046\u3053\u3099",
        "\u305D\u3046\u3057\u3093",
        "\u305D\u3046\u305F\u3099\u3093",
        "\u305D\u3046\u306A\u3093",
        "\u305D\u3046\u3072\u3099",
        "\u305D\u3046\u3081\u3093",
        "\u305D\u3046\u308A",
        "\u305D\u3048\u3082\u306E",
        "\u305D\u3048\u3093",
        "\u305D\u304B\u3099\u3044",
        "\u305D\u3051\u3099\u304D",
        "\u305D\u3053\u3046",
        "\u305D\u3053\u305D\u3053",
        "\u305D\u3055\u3099\u3044",
        "\u305D\u3057\u306A",
        "\u305D\u305B\u3044",
        "\u305D\u305B\u3093",
        "\u305D\u305D\u304F\u3099",
        "\u305D\u305F\u3099\u3066\u308B",
        "\u305D\u3064\u3046",
        "\u305D\u3064\u3048\u3093",
        "\u305D\u3063\u304B\u3093",
        "\u305D\u3064\u304D\u3099\u3087\u3046",
        "\u305D\u3063\u3051\u3064",
        "\u305D\u3063\u3053\u3046",
        "\u305D\u3063\u305B\u3093",
        "\u305D\u3063\u3068",
        "\u305D\u3068\u304B\u3099\u308F",
        "\u305D\u3068\u3064\u3099\u3089",
        "\u305D\u306A\u3048\u308B",
        "\u305D\u306A\u305F",
        "\u305D\u3075\u307B\u3099",
        "\u305D\u307B\u3099\u304F",
        "\u305D\u307B\u3099\u308D",
        "\u305D\u307E\u3064",
        "\u305D\u307E\u308B",
        "\u305D\u3080\u304F",
        "\u305D\u3080\u308A\u3048",
        "\u305D\u3081\u308B",
        "\u305D\u3082\u305D\u3082",
        "\u305D\u3088\u304B\u305B\u3099",
        "\u305D\u3089\u307E\u3081",
        "\u305D\u308D\u3046",
        "\u305D\u3093\u304B\u3044",
        "\u305D\u3093\u3051\u3044",
        "\u305D\u3093\u3055\u3099\u3044",
        "\u305D\u3093\u3057\u3064",
        "\u305D\u3093\u305D\u3099\u304F",
        "\u305D\u3093\u3061\u3087\u3046",
        "\u305D\u3099\u3093\u3072\u3099",
        "\u305D\u3099\u3093\u3075\u3099\u3093",
        "\u305D\u3093\u307F\u3093",
        "\u305F\u3042\u3044",
        "\u305F\u3044\u3044\u3093",
        "\u305F\u3044\u3046\u3093",
        "\u305F\u3044\u3048\u304D",
        "\u305F\u3044\u304A\u3046",
        "\u305F\u3099\u3044\u304B\u3099\u304F",
        "\u305F\u3044\u304D",
        "\u305F\u3044\u304F\u3099\u3046",
        "\u305F\u3044\u3051\u3093",
        "\u305F\u3044\u3053",
        "\u305F\u3044\u3055\u3099\u3044",
        "\u305F\u3099\u3044\u3057\u3099\u3087\u3046\u3075\u3099",
        "\u305F\u3099\u3044\u3059\u304D",
        "\u305F\u3044\u305B\u3064",
        "\u305F\u3044\u305D\u3046",
        "\u305F\u3099\u3044\u305F\u3044",
        "\u305F\u3044\u3061\u3087\u3046",
        "\u305F\u3044\u3066\u3044",
        "\u305F\u3099\u3044\u3068\u3099\u3053\u308D",
        "\u305F\u3044\u306A\u3044",
        "\u305F\u3044\u306D\u3064",
        "\u305F\u3044\u306E\u3046",
        "\u305F\u3044\u306F\u3093",
        "\u305F\u3099\u3044\u3072\u3087\u3046",
        "\u305F\u3044\u3075\u3046",
        "\u305F\u3044\u3078\u3093",
        "\u305F\u3044\u307B",
        "\u305F\u3044\u307E\u3064\u306F\u3099\u306A",
        "\u305F\u3044\u307F\u3093\u304F\u3099",
        "\u305F\u3044\u3080",
        "\u305F\u3044\u3081\u3093",
        "\u305F\u3044\u3084\u304D",
        "\u305F\u3044\u3088\u3046",
        "\u305F\u3044\u3089",
        "\u305F\u3044\u308A\u3087\u304F",
        "\u305F\u3044\u308B",
        "\u305F\u3044\u308F\u3093",
        "\u305F\u3046\u3048",
        "\u305F\u3048\u308B",
        "\u305F\u304A\u3059",
        "\u305F\u304A\u308B",
        "\u305F\u304A\u308C\u308B",
        "\u305F\u304B\u3044",
        "\u305F\u304B\u306D",
        "\u305F\u304D\u3072\u3099",
        "\u305F\u304F\u3055\u3093",
        "\u305F\u3053\u304F",
        "\u305F\u3053\u3084\u304D",
        "\u305F\u3055\u3044",
        "\u305F\u3057\u3055\u3099\u3093",
        "\u305F\u3099\u3057\u3099\u3083\u308C",
        "\u305F\u3059\u3051\u308B",
        "\u305F\u3059\u3099\u3055\u308F\u308B",
        "\u305F\u305D\u304B\u3099\u308C",
        "\u305F\u305F\u304B\u3046",
        "\u305F\u305F\u304F",
        "\u305F\u305F\u3099\u3057\u3044",
        "\u305F\u305F\u307F",
        "\u305F\u3061\u306F\u3099\u306A",
        "\u305F\u3099\u3063\u304B\u3044",
        "\u305F\u3099\u3063\u304D\u3083\u304F",
        "\u305F\u3099\u3063\u3053",
        "\u305F\u3099\u3063\u3057\u3085\u3064",
        "\u305F\u3099\u3063\u305F\u3044",
        "\u305F\u3066\u308B",
        "\u305F\u3068\u3048\u308B",
        "\u305F\u306A\u306F\u3099\u305F",
        "\u305F\u306B\u3093",
        "\u305F\u306C\u304D",
        "\u305F\u306E\u3057\u307F",
        "\u305F\u306F\u3064",
        "\u305F\u3075\u3099\u3093",
        "\u305F\u3078\u3099\u308B",
        "\u305F\u307B\u3099\u3046",
        "\u305F\u307E\u3053\u3099",
        "\u305F\u307E\u308B",
        "\u305F\u3099\u3080\u308B",
        "\u305F\u3081\u3044\u304D",
        "\u305F\u3081\u3059",
        "\u305F\u3081\u308B",
        "\u305F\u3082\u3064",
        "\u305F\u3084\u3059\u3044",
        "\u305F\u3088\u308B",
        "\u305F\u3089\u3059",
        "\u305F\u308A\u304D\u307B\u3093\u304B\u3099\u3093",
        "\u305F\u308A\u3087\u3046",
        "\u305F\u308A\u308B",
        "\u305F\u308B\u3068",
        "\u305F\u308C\u308B",
        "\u305F\u308C\u3093\u3068",
        "\u305F\u308D\u3063\u3068",
        "\u305F\u308F\u3080\u308C\u308B",
        "\u305F\u3099\u3093\u3042\u3064",
        "\u305F\u3093\u3044",
        "\u305F\u3093\u304A\u3093",
        "\u305F\u3093\u304B",
        "\u305F\u3093\u304D",
        "\u305F\u3093\u3051\u3093",
        "\u305F\u3093\u3053\u3099",
        "\u305F\u3093\u3055\u3093",
        "\u305F\u3093\u3057\u3099\u3087\u3046\u3072\u3099",
        "\u305F\u3099\u3093\u305B\u3044",
        "\u305F\u3093\u305D\u304F",
        "\u305F\u3093\u305F\u3044",
        "\u305F\u3099\u3093\u3061",
        "\u305F\u3093\u3066\u3044",
        "\u305F\u3093\u3068\u3046",
        "\u305F\u3099\u3093\u306A",
        "\u305F\u3093\u306B\u3093",
        "\u305F\u3099\u3093\u306D\u3064",
        "\u305F\u3093\u306E\u3046",
        "\u305F\u3093\u3072\u309A\u3093",
        "\u305F\u3099\u3093\u307B\u3099\u3046",
        "\u305F\u3093\u307E\u3064",
        "\u305F\u3093\u3081\u3044",
        "\u305F\u3099\u3093\u308C\u3064",
        "\u305F\u3099\u3093\u308D",
        "\u305F\u3099\u3093\u308F",
        "\u3061\u3042\u3044",
        "\u3061\u3042\u3093",
        "\u3061\u3044\u304D",
        "\u3061\u3044\u3055\u3044",
        "\u3061\u3048\u3093",
        "\u3061\u304B\u3044",
        "\u3061\u304B\u3089",
        "\u3061\u304D\u3085\u3046",
        "\u3061\u304D\u3093",
        "\u3061\u3051\u3044\u3059\u3099",
        "\u3061\u3051\u3093",
        "\u3061\u3053\u304F",
        "\u3061\u3055\u3044",
        "\u3061\u3057\u304D",
        "\u3061\u3057\u308A\u3087\u3046",
        "\u3061\u305B\u3044",
        "\u3061\u305D\u3046",
        "\u3061\u305F\u3044",
        "\u3061\u305F\u3093",
        "\u3061\u3061\u304A\u3084",
        "\u3061\u3064\u3057\u3099\u3087",
        "\u3061\u3066\u304D",
        "\u3061\u3066\u3093",
        "\u3061\u306C\u304D",
        "\u3061\u306C\u308A",
        "\u3061\u306E\u3046",
        "\u3061\u3072\u3087\u3046",
        "\u3061\u3078\u3044\u305B\u3093",
        "\u3061\u307B\u3046",
        "\u3061\u307E\u305F",
        "\u3061\u307F\u3064",
        "\u3061\u307F\u3068\u3099\u308D",
        "\u3061\u3081\u3044\u3068\u3099",
        "\u3061\u3083\u3093\u3053\u306A\u3078\u3099",
        "\u3061\u3085\u3046\u3044",
        "\u3061\u3086\u308A\u3087\u304F",
        "\u3061\u3087\u3046\u3057",
        "\u3061\u3087\u3055\u304F\u3051\u3093",
        "\u3061\u3089\u3057",
        "\u3061\u3089\u307F",
        "\u3061\u308A\u304B\u3099\u307F",
        "\u3061\u308A\u3087\u3046",
        "\u3061\u308B\u3068\u3099",
        "\u3061\u308F\u308F",
        "\u3061\u3093\u305F\u3044",
        "\u3061\u3093\u3082\u304F",
        "\u3064\u3044\u304B",
        "\u3064\u3044\u305F\u3061",
        "\u3064\u3046\u304B",
        "\u3064\u3046\u3057\u3099\u3087\u3046",
        "\u3064\u3046\u306F\u3093",
        "\u3064\u3046\u308F",
        "\u3064\u304B\u3046",
        "\u3064\u304B\u308C\u308B",
        "\u3064\u304F\u306D",
        "\u3064\u304F\u308B",
        "\u3064\u3051\u306D",
        "\u3064\u3051\u308B",
        "\u3064\u3053\u3099\u3046",
        "\u3064\u305F\u3048\u308B",
        "\u3064\u3064\u3099\u304F",
        "\u3064\u3064\u3057\u3099",
        "\u3064\u3064\u3080",
        "\u3064\u3068\u3081\u308B",
        "\u3064\u306A\u304B\u3099\u308B",
        "\u3064\u306A\u307F",
        "\u3064\u306D\u3064\u3099\u306D",
        "\u3064\u306E\u308B",
        "\u3064\u3075\u3099\u3059",
        "\u3064\u307E\u3089\u306A\u3044",
        "\u3064\u307E\u308B",
        "\u3064\u307F\u304D",
        "\u3064\u3081\u305F\u3044",
        "\u3064\u3082\u308A",
        "\u3064\u3082\u308B",
        "\u3064\u3088\u3044",
        "\u3064\u308B\u307B\u3099",
        "\u3064\u308B\u307F\u304F",
        "\u3064\u308F\u3082\u306E",
        "\u3064\u308F\u308A",
        "\u3066\u3042\u3057",
        "\u3066\u3042\u3066",
        "\u3066\u3042\u307F",
        "\u3066\u3044\u304A\u3093",
        "\u3066\u3044\u304B",
        "\u3066\u3044\u304D",
        "\u3066\u3044\u3051\u3044",
        "\u3066\u3044\u3053\u304F",
        "\u3066\u3044\u3055\u3064",
        "\u3066\u3044\u3057",
        "\u3066\u3044\u305B\u3044",
        "\u3066\u3044\u305F\u3044",
        "\u3066\u3044\u3068\u3099",
        "\u3066\u3044\u306D\u3044",
        "\u3066\u3044\u3072\u3087\u3046",
        "\u3066\u3044\u3078\u3093",
        "\u3066\u3044\u307B\u3099\u3046",
        "\u3066\u3046\u3061",
        "\u3066\u304A\u304F\u308C",
        "\u3066\u304D\u3068\u3046",
        "\u3066\u304F\u3072\u3099",
        "\u3066\u3099\u3053\u307B\u3099\u3053",
        "\u3066\u3055\u304D\u3099\u3087\u3046",
        "\u3066\u3055\u3051\u3099",
        "\u3066\u3059\u308A",
        "\u3066\u305D\u3046",
        "\u3066\u3061\u304B\u3099\u3044",
        "\u3066\u3061\u3087\u3046",
        "\u3066\u3064\u304B\u3099\u304F",
        "\u3066\u3064\u3064\u3099\u304D",
        "\u3066\u3099\u3063\u306F\u309A",
        "\u3066\u3064\u307B\u3099\u3046",
        "\u3066\u3064\u3084",
        "\u3066\u3099\u306C\u304B\u3048",
        "\u3066\u306C\u304D",
        "\u3066\u306C\u304F\u3099\u3044",
        "\u3066\u306E\u3072\u3089",
        "\u3066\u306F\u3044",
        "\u3066\u3075\u3099\u304F\u308D",
        "\u3066\u3075\u305F\u3099",
        "\u3066\u307B\u3068\u3099\u304D",
        "\u3066\u307B\u3093",
        "\u3066\u307E\u3048",
        "\u3066\u307E\u304D\u3059\u3099\u3057",
        "\u3066\u307F\u3057\u3099\u304B",
        "\u3066\u307F\u3084\u3051\u3099",
        "\u3066\u3089\u3059",
        "\u3066\u308C\u3072\u3099",
        "\u3066\u308F\u3051",
        "\u3066\u308F\u305F\u3057",
        "\u3066\u3099\u3093\u3042\u3064",
        "\u3066\u3093\u3044\u3093",
        "\u3066\u3093\u304B\u3044",
        "\u3066\u3093\u304D",
        "\u3066\u3093\u304F\u3099",
        "\u3066\u3093\u3051\u3093",
        "\u3066\u3093\u3053\u3099\u304F",
        "\u3066\u3093\u3055\u3044",
        "\u3066\u3093\u3057",
        "\u3066\u3093\u3059\u3046",
        "\u3066\u3099\u3093\u3061",
        "\u3066\u3093\u3066\u304D",
        "\u3066\u3093\u3068\u3046",
        "\u3066\u3093\u306A\u3044",
        "\u3066\u3093\u3075\u309A\u3089",
        "\u3066\u3093\u307B\u3099\u3046\u305F\u3099\u3044",
        "\u3066\u3093\u3081\u3064",
        "\u3066\u3093\u3089\u3093\u304B\u3044",
        "\u3066\u3099\u3093\u308A\u3087\u304F",
        "\u3066\u3099\u3093\u308F",
        "\u3068\u3099\u3042\u3044",
        "\u3068\u3044\u308C",
        "\u3068\u3099\u3046\u304B\u3093",
        "\u3068\u3046\u304D\u3085\u3046",
        "\u3068\u3099\u3046\u304F\u3099",
        "\u3068\u3046\u3057",
        "\u3068\u3046\u3080\u304D\u3099",
        "\u3068\u304A\u3044",
        "\u3068\u304A\u304B",
        "\u3068\u304A\u304F",
        "\u3068\u304A\u3059",
        "\u3068\u304A\u308B",
        "\u3068\u304B\u3044",
        "\u3068\u304B\u3059",
        "\u3068\u304D\u304A\u308A",
        "\u3068\u304D\u3068\u3099\u304D",
        "\u3068\u304F\u3044",
        "\u3068\u304F\u3057\u3085\u3046",
        "\u3068\u304F\u3066\u3093",
        "\u3068\u304F\u306B",
        "\u3068\u304F\u3078\u3099\u3064",
        "\u3068\u3051\u3044",
        "\u3068\u3051\u308B",
        "\u3068\u3053\u3084",
        "\u3068\u3055\u304B",
        "\u3068\u3057\u3087\u304B\u3093",
        "\u3068\u305D\u3046",
        "\u3068\u305F\u3093",
        "\u3068\u3061\u3085\u3046",
        "\u3068\u3063\u304D\u3085\u3046",
        "\u3068\u3063\u304F\u3093",
        "\u3068\u3064\u305B\u3099\u3093",
        "\u3068\u3064\u306B\u3085\u3046",
        "\u3068\u3068\u3099\u3051\u308B",
        "\u3068\u3068\u306E\u3048\u308B",
        "\u3068\u306A\u3044",
        "\u3068\u306A\u3048\u308B",
        "\u3068\u306A\u308A",
        "\u3068\u306E\u3055\u307E",
        "\u3068\u306F\u3099\u3059",
        "\u3068\u3099\u3075\u3099\u304B\u3099\u308F",
        "\u3068\u307B\u3046",
        "\u3068\u307E\u308B",
        "\u3068\u3081\u308B",
        "\u3068\u3082\u305F\u3099\u3061",
        "\u3068\u3082\u308B",
        "\u3068\u3099\u3088\u3046\u3072\u3099",
        "\u3068\u3089\u3048\u308B",
        "\u3068\u3093\u304B\u3064",
        "\u3068\u3099\u3093\u3075\u3099\u308A",
        "\u306A\u3044\u304B\u304F",
        "\u306A\u3044\u3053\u3046",
        "\u306A\u3044\u3057\u3087",
        "\u306A\u3044\u3059",
        "\u306A\u3044\u305B\u3093",
        "\u306A\u3044\u305D\u3046",
        "\u306A\u304A\u3059",
        "\u306A\u304B\u3099\u3044",
        "\u306A\u304F\u3059",
        "\u306A\u3051\u3099\u308B",
        "\u306A\u3053\u3046\u3068\u3099",
        "\u306A\u3055\u3051",
        "\u306A\u305F\u3066\u3099\u3053\u3053",
        "\u306A\u3063\u3068\u3046",
        "\u306A\u3064\u3084\u3059\u307F",
        "\u306A\u306A\u304A\u3057",
        "\u306A\u306B\u3053\u3099\u3068",
        "\u306A\u306B\u3082\u306E",
        "\u306A\u306B\u308F",
        "\u306A\u306E\u304B",
        "\u306A\u3075\u305F\u3099",
        "\u306A\u307E\u3044\u304D",
        "\u306A\u307E\u3048",
        "\u306A\u307E\u307F",
        "\u306A\u307F\u305F\u3099",
        "\u306A\u3081\u3089\u304B",
        "\u306A\u3081\u308B",
        "\u306A\u3084\u3080",
        "\u306A\u3089\u3046",
        "\u306A\u3089\u3072\u3099",
        "\u306A\u3089\u3075\u3099",
        "\u306A\u308C\u308B",
        "\u306A\u308F\u3068\u3072\u3099",
        "\u306A\u308F\u306F\u3099\u308A",
        "\u306B\u3042\u3046",
        "\u306B\u3044\u304B\u3099\u305F",
        "\u306B\u3046\u3051",
        "\u306B\u304A\u3044",
        "\u306B\u304B\u3044",
        "\u306B\u304B\u3099\u3066",
        "\u306B\u304D\u3072\u3099",
        "\u306B\u304F\u3057\u307F",
        "\u306B\u304F\u307E\u3093",
        "\u306B\u3051\u3099\u308B",
        "\u306B\u3055\u3093\u304B\u305F\u3093\u305D",
        "\u306B\u3057\u304D",
        "\u306B\u305B\u3082\u306E",
        "\u306B\u3061\u3057\u3099\u3087\u3046",
        "\u306B\u3061\u3088\u3046\u3072\u3099",
        "\u306B\u3063\u304B",
        "\u306B\u3063\u304D",
        "\u306B\u3063\u3051\u3044",
        "\u306B\u3063\u3053\u3046",
        "\u306B\u3063\u3055\u3093",
        "\u306B\u3063\u3057\u3087\u304F",
        "\u306B\u3063\u3059\u3046",
        "\u306B\u3063\u305B\u304D",
        "\u306B\u3063\u3066\u3044",
        "\u306B\u306A\u3046",
        "\u306B\u307B\u3093",
        "\u306B\u307E\u3081",
        "\u306B\u3082\u3064",
        "\u306B\u3084\u308A",
        "\u306B\u3085\u3046\u3044\u3093",
        "\u306B\u308A\u3093\u3057\u3083",
        "\u306B\u308F\u3068\u308A",
        "\u306B\u3093\u3044",
        "\u306B\u3093\u304B",
        "\u306B\u3093\u304D",
        "\u306B\u3093\u3051\u3099\u3093",
        "\u306B\u3093\u3057\u304D",
        "\u306B\u3093\u3059\u3099\u3046",
        "\u306B\u3093\u305D\u3046",
        "\u306B\u3093\u305F\u3044",
        "\u306B\u3093\u3061",
        "\u306B\u3093\u3066\u3044",
        "\u306B\u3093\u306B\u304F",
        "\u306B\u3093\u3075\u309A",
        "\u306B\u3093\u307E\u308A",
        "\u306B\u3093\u3080",
        "\u306B\u3093\u3081\u3044",
        "\u306B\u3093\u3088\u3046",
        "\u306C\u3044\u304F\u304D\u3099",
        "\u306C\u304B\u3059",
        "\u306C\u304F\u3099\u3044\u3068\u308B",
        "\u306C\u304F\u3099\u3046",
        "\u306C\u304F\u3082\u308A",
        "\u306C\u3059\u3080",
        "\u306C\u307E\u3048\u3072\u3099",
        "\u306C\u3081\u308A",
        "\u306C\u3089\u3059",
        "\u306C\u3093\u3061\u3083\u304F",
        "\u306D\u3042\u3051\u3099",
        "\u306D\u3044\u304D",
        "\u306D\u3044\u308B",
        "\u306D\u3044\u308D",
        "\u306D\u304F\u3099\u305B",
        "\u306D\u304F\u305F\u3044",
        "\u306D\u304F\u3089",
        "\u306D\u3053\u305B\u3099",
        "\u306D\u3053\u3080",
        "\u306D\u3055\u3051\u3099",
        "\u306D\u3059\u3053\u3099\u3059",
        "\u306D\u305D\u3078\u3099\u308B",
        "\u306D\u305F\u3099\u3093",
        "\u306D\u3064\u3044",
        "\u306D\u3063\u3057\u3093",
        "\u306D\u3064\u305D\u3099\u3046",
        "\u306D\u3063\u305F\u3044\u304D\u3099\u3087",
        "\u306D\u3075\u3099\u305D\u304F",
        "\u306D\u3075\u305F\u3099",
        "\u306D\u307B\u3099\u3046",
        "\u306D\u307B\u308A\u306F\u307B\u308A",
        "\u306D\u307E\u304D",
        "\u306D\u307E\u308F\u3057",
        "\u306D\u307F\u307F",
        "\u306D\u3080\u3044",
        "\u306D\u3080\u305F\u3044",
        "\u306D\u3082\u3068",
        "\u306D\u3089\u3046",
        "\u306D\u308F\u3055\u3099",
        "\u306D\u3093\u3044\u308A",
        "\u306D\u3093\u304A\u3057",
        "\u306D\u3093\u304B\u3093",
        "\u306D\u3093\u304D\u3093",
        "\u306D\u3093\u304F\u3099",
        "\u306D\u3093\u3055\u3099",
        "\u306D\u3093\u3057",
        "\u306D\u3093\u3061\u3083\u304F",
        "\u306D\u3093\u3068\u3099",
        "\u306D\u3093\u3072\u309A",
        "\u306D\u3093\u3075\u3099\u3064",
        "\u306D\u3093\u307E\u3064",
        "\u306D\u3093\u308A\u3087\u3046",
        "\u306D\u3093\u308C\u3044",
        "\u306E\u3044\u3059\u3099",
        "\u306E\u304A\u3064\u3099\u307E",
        "\u306E\u304B\u3099\u3059",
        "\u306E\u304D\u306A\u307F",
        "\u306E\u3053\u304D\u3099\u308A",
        "\u306E\u3053\u3059",
        "\u306E\u3053\u308B",
        "\u306E\u305B\u308B",
        "\u306E\u305D\u3099\u304F",
        "\u306E\u305D\u3099\u3080",
        "\u306E\u305F\u307E\u3046",
        "\u306E\u3061\u307B\u3068\u3099",
        "\u306E\u3063\u304F",
        "\u306E\u306F\u3099\u3059",
        "\u306E\u306F\u3089",
        "\u306E\u3078\u3099\u308B",
        "\u306E\u307B\u3099\u308B",
        "\u306E\u307F\u3082\u306E",
        "\u306E\u3084\u307E",
        "\u306E\u3089\u3044\u306C",
        "\u306E\u3089\u306D\u3053",
        "\u306E\u308A\u3082\u306E",
        "\u306E\u308A\u3086\u304D",
        "\u306E\u308C\u3093",
        "\u306E\u3093\u304D",
        "\u306F\u3099\u3042\u3044",
        "\u306F\u3042\u304F",
        "\u306F\u3099\u3042\u3055\u3093",
        "\u306F\u3099\u3044\u304B",
        "\u306F\u3099\u3044\u304F",
        "\u306F\u3044\u3051\u3093",
        "\u306F\u3044\u3053\u3099",
        "\u306F\u3044\u3057\u3093",
        "\u306F\u3044\u3059\u3044",
        "\u306F\u3044\u305B\u3093",
        "\u306F\u3044\u305D\u3046",
        "\u306F\u3044\u3061",
        "\u306F\u3099\u3044\u306F\u3099\u3044",
        "\u306F\u3044\u308C\u3064",
        "\u306F\u3048\u308B",
        "\u306F\u304A\u308B",
        "\u306F\u304B\u3044",
        "\u306F\u3099\u304B\u308A",
        "\u306F\u304B\u308B",
        "\u306F\u304F\u3057\u3085",
        "\u306F\u3051\u3093",
        "\u306F\u3053\u3075\u3099",
        "\u306F\u3055\u307F",
        "\u306F\u3055\u3093",
        "\u306F\u3057\u3053\u3099",
        "\u306F\u3099\u3057\u3087",
        "\u306F\u3057\u308B",
        "\u306F\u305B\u308B",
        "\u306F\u309A\u305D\u3053\u3093",
        "\u306F\u305D\u3093",
        "\u306F\u305F\u3093",
        "\u306F\u3061\u307F\u3064",
        "\u306F\u3064\u304A\u3093",
        "\u306F\u3063\u304B\u304F",
        "\u306F\u3064\u3099\u304D",
        "\u306F\u3063\u304D\u308A",
        "\u306F\u3063\u304F\u3064",
        "\u306F\u3063\u3051\u3093",
        "\u306F\u3063\u3053\u3046",
        "\u306F\u3063\u3055\u3093",
        "\u306F\u3063\u3057\u3093",
        "\u306F\u3063\u305F\u3064",
        "\u306F\u3063\u3061\u3085\u3046",
        "\u306F\u3063\u3066\u3093",
        "\u306F\u3063\u3072\u309A\u3087\u3046",
        "\u306F\u3063\u307B\u309A\u3046",
        "\u306F\u306A\u3059",
        "\u306F\u306A\u3072\u3099",
        "\u306F\u306B\u304B\u3080",
        "\u306F\u3075\u3099\u3089\u3057",
        "\u306F\u307F\u304B\u3099\u304D",
        "\u306F\u3080\u304B\u3046",
        "\u306F\u3081\u3064",
        "\u306F\u3084\u3044",
        "\u306F\u3084\u3057",
        "\u306F\u3089\u3046",
        "\u306F\u308D\u3046\u3043\u3093",
        "\u306F\u308F\u3044",
        "\u306F\u3093\u3044",
        "\u306F\u3093\u3048\u3044",
        "\u306F\u3093\u304A\u3093",
        "\u306F\u3093\u304B\u304F",
        "\u306F\u3093\u304D\u3087\u3046",
        "\u306F\u3099\u3093\u304F\u3099\u307F",
        "\u306F\u3093\u3053",
        "\u306F\u3093\u3057\u3083",
        "\u306F\u3093\u3059\u3046",
        "\u306F\u3093\u305F\u3099\u3093",
        "\u306F\u309A\u3093\u3061",
        "\u306F\u309A\u3093\u3064",
        "\u306F\u3093\u3066\u3044",
        "\u306F\u3093\u3068\u3057",
        "\u306F\u3093\u306E\u3046",
        "\u306F\u3093\u306F\u309A",
        "\u306F\u3093\u3075\u3099\u3093",
        "\u306F\u3093\u3078\u309A\u3093",
        "\u306F\u3093\u307B\u3099\u3046\u304D",
        "\u306F\u3093\u3081\u3044",
        "\u306F\u3093\u3089\u3093",
        "\u306F\u3093\u308D\u3093",
        "\u3072\u3044\u304D",
        "\u3072\u3046\u3093",
        "\u3072\u3048\u308B",
        "\u3072\u304B\u304F",
        "\u3072\u304B\u308A",
        "\u3072\u304B\u308B",
        "\u3072\u304B\u3093",
        "\u3072\u304F\u3044",
        "\u3072\u3051\u3064",
        "\u3072\u3053\u3046\u304D",
        "\u3072\u3053\u304F",
        "\u3072\u3055\u3044",
        "\u3072\u3055\u3057\u3075\u3099\u308A",
        "\u3072\u3055\u3093",
        "\u3072\u3099\u3057\u3099\u3085\u3064\u304B\u3093",
        "\u3072\u3057\u3087",
        "\u3072\u305D\u304B",
        "\u3072\u305D\u3080",
        "\u3072\u305F\u3080\u304D",
        "\u3072\u305F\u3099\u308A",
        "\u3072\u305F\u308B",
        "\u3072\u3064\u304D\u3099",
        "\u3072\u3063\u3053\u3057",
        "\u3072\u3063\u3057",
        "\u3072\u3064\u3057\u3099\u3085\u3072\u3093",
        "\u3072\u3063\u3059",
        "\u3072\u3064\u305B\u3099\u3093",
        "\u3072\u309A\u3063\u305F\u308A",
        "\u3072\u309A\u3063\u3061\u308A",
        "\u3072\u3064\u3088\u3046",
        "\u3072\u3066\u3044",
        "\u3072\u3068\u3053\u3099\u307F",
        "\u3072\u306A\u307E\u3064\u308A",
        "\u3072\u306A\u3093",
        "\u3072\u306D\u308B",
        "\u3072\u306F\u3093",
        "\u3072\u3072\u3099\u304F",
        "\u3072\u3072\u3087\u3046",
        "\u3072\u307B\u3046",
        "\u3072\u307E\u308F\u308A",
        "\u3072\u307E\u3093",
        "\u3072\u307F\u3064",
        "\u3072\u3081\u3044",
        "\u3072\u3081\u3057\u3099\u3057",
        "\u3072\u3084\u3051",
        "\u3072\u3084\u3059",
        "\u3072\u3088\u3046",
        "\u3072\u3099\u3087\u3046\u304D",
        "\u3072\u3089\u304B\u3099\u306A",
        "\u3072\u3089\u304F",
        "\u3072\u308A\u3064",
        "\u3072\u308A\u3087\u3046",
        "\u3072\u308B\u307E",
        "\u3072\u308B\u3084\u3059\u307F",
        "\u3072\u308C\u3044",
        "\u3072\u308D\u3044",
        "\u3072\u308D\u3046",
        "\u3072\u308D\u304D",
        "\u3072\u308D\u3086\u304D",
        "\u3072\u3093\u304B\u304F",
        "\u3072\u3093\u3051\u3064",
        "\u3072\u3093\u3053\u3093",
        "\u3072\u3093\u3057\u3085",
        "\u3072\u3093\u305D\u3046",
        "\u3072\u309A\u3093\u3061",
        "\u3072\u3093\u306F\u309A\u3093",
        "\u3072\u3099\u3093\u307B\u3099\u3046",
        "\u3075\u3042\u3093",
        "\u3075\u3044\u3046\u3061",
        "\u3075\u3046\u3051\u3044",
        "\u3075\u3046\u305B\u3093",
        "\u3075\u309A\u3046\u305F\u308D\u3046",
        "\u3075\u3046\u3068\u3046",
        "\u3075\u3046\u3075",
        "\u3075\u3048\u308B",
        "\u3075\u304A\u3093",
        "\u3075\u304B\u3044",
        "\u3075\u304D\u3093",
        "\u3075\u304F\u3055\u3099\u3064",
        "\u3075\u304F\u3075\u3099\u304F\u308D",
        "\u3075\u3053\u3046",
        "\u3075\u3055\u3044",
        "\u3075\u3057\u304D\u3099",
        "\u3075\u3057\u3099\u307F",
        "\u3075\u3059\u307E",
        "\u3075\u305B\u3044",
        "\u3075\u305B\u304F\u3099",
        "\u3075\u305D\u304F",
        "\u3075\u3099\u305F\u306B\u304F",
        "\u3075\u305F\u3093",
        "\u3075\u3061\u3087\u3046",
        "\u3075\u3064\u3046",
        "\u3075\u3064\u304B",
        "\u3075\u3063\u304B\u3064",
        "\u3075\u3063\u304D",
        "\u3075\u3063\u3053\u304F",
        "\u3075\u3099\u3068\u3099\u3046",
        "\u3075\u3068\u308B",
        "\u3075\u3068\u3093",
        "\u3075\u306E\u3046",
        "\u3075\u306F\u3044",
        "\u3075\u3072\u3087\u3046",
        "\u3075\u3078\u3093",
        "\u3075\u307E\u3093",
        "\u3075\u307F\u3093",
        "\u3075\u3081\u3064",
        "\u3075\u3081\u3093",
        "\u3075\u3088\u3046",
        "\u3075\u308A\u3053",
        "\u3075\u308A\u308B",
        "\u3075\u308B\u3044",
        "\u3075\u3093\u3044\u304D",
        "\u3075\u3099\u3093\u304B\u3099\u304F",
        "\u3075\u3099\u3093\u304F\u3099",
        "\u3075\u3093\u3057\u3064",
        "\u3075\u3099\u3093\u305B\u304D",
        "\u3075\u3093\u305D\u3046",
        "\u3075\u3099\u3093\u307B\u309A\u3046",
        "\u3078\u3044\u3042\u3093",
        "\u3078\u3044\u304A\u3093",
        "\u3078\u3044\u304B\u3099\u3044",
        "\u3078\u3044\u304D",
        "\u3078\u3044\u3051\u3099\u3093",
        "\u3078\u3044\u3053\u3046",
        "\u3078\u3044\u3055",
        "\u3078\u3044\u3057\u3083",
        "\u3078\u3044\u305B\u3064",
        "\u3078\u3044\u305D",
        "\u3078\u3044\u305F\u304F",
        "\u3078\u3044\u3066\u3093",
        "\u3078\u3044\u306D\u3064",
        "\u3078\u3044\u308F",
        "\u3078\u304D\u304B\u3099",
        "\u3078\u3053\u3080",
        "\u3078\u3099\u306B\u3044\u308D",
        "\u3078\u3099\u306B\u3057\u3087\u3046\u304B\u3099",
        "\u3078\u3089\u3059",
        "\u3078\u3093\u304B\u3093",
        "\u3078\u3099\u3093\u304D\u3087\u3046",
        "\u3078\u3099\u3093\u3053\u3099\u3057",
        "\u3078\u3093\u3055\u3044",
        "\u3078\u3093\u305F\u3044",
        "\u3078\u3099\u3093\u308A",
        "\u307B\u3042\u3093",
        "\u307B\u3044\u304F",
        "\u307B\u3099\u3046\u304D\u3099\u3087",
        "\u307B\u3046\u3053\u304F",
        "\u307B\u3046\u305D\u3046",
        "\u307B\u3046\u307B\u3046",
        "\u307B\u3046\u3082\u3093",
        "\u307B\u3046\u308A\u3064",
        "\u307B\u3048\u308B",
        "\u307B\u304A\u3093",
        "\u307B\u304B\u3093",
        "\u307B\u304D\u3087\u3046",
        "\u307B\u3099\u304D\u3093",
        "\u307B\u304F\u308D",
        "\u307B\u3051\u3064",
        "\u307B\u3051\u3093",
        "\u307B\u3053\u3046",
        "\u307B\u3053\u308B",
        "\u307B\u3057\u3044",
        "\u307B\u3057\u3064",
        "\u307B\u3057\u3085",
        "\u307B\u3057\u3087\u3046",
        "\u307B\u305B\u3044",
        "\u307B\u305D\u3044",
        "\u307B\u305D\u304F",
        "\u307B\u305F\u3066",
        "\u307B\u305F\u308B",
        "\u307B\u309A\u3061\u3075\u3099\u304F\u308D",
        "\u307B\u3063\u304D\u3087\u304F",
        "\u307B\u3063\u3055",
        "\u307B\u3063\u305F\u3093",
        "\u307B\u3068\u3093\u3068\u3099",
        "\u307B\u3081\u308B",
        "\u307B\u3093\u3044",
        "\u307B\u3093\u304D",
        "\u307B\u3093\u3051",
        "\u307B\u3093\u3057\u3064",
        "\u307B\u3093\u3084\u304F",
        "\u307E\u3044\u306B\u3061",
        "\u307E\u304B\u3044",
        "\u307E\u304B\u305B\u308B",
        "\u307E\u304B\u3099\u308B",
        "\u307E\u3051\u308B",
        "\u307E\u3053\u3068",
        "\u307E\u3055\u3064",
        "\u307E\u3057\u3099\u3081",
        "\u307E\u3059\u304F",
        "\u307E\u305B\u3099\u308B",
        "\u307E\u3064\u308A",
        "\u307E\u3068\u3081",
        "\u307E\u306A\u3075\u3099",
        "\u307E\u306C\u3051",
        "\u307E\u306D\u304F",
        "\u307E\u307B\u3046",
        "\u307E\u3082\u308B",
        "\u307E\u3086\u3051\u3099",
        "\u307E\u3088\u3046",
        "\u307E\u308D\u3084\u304B",
        "\u307E\u308F\u3059",
        "\u307E\u308F\u308A",
        "\u307E\u308F\u308B",
        "\u307E\u3093\u304B\u3099",
        "\u307E\u3093\u304D\u3064",
        "\u307E\u3093\u305D\u3099\u304F",
        "\u307E\u3093\u306A\u304B",
        "\u307F\u3044\u3089",
        "\u307F\u3046\u3061",
        "\u307F\u3048\u308B",
        "\u307F\u304B\u3099\u304F",
        "\u307F\u304B\u305F",
        "\u307F\u304B\u3093",
        "\u307F\u3051\u3093",
        "\u307F\u3053\u3093",
        "\u307F\u3057\u3099\u304B\u3044",
        "\u307F\u3059\u3044",
        "\u307F\u3059\u3048\u308B",
        "\u307F\u305B\u308B",
        "\u307F\u3063\u304B",
        "\u307F\u3064\u304B\u308B",
        "\u307F\u3064\u3051\u308B",
        "\u307F\u3066\u3044",
        "\u307F\u3068\u3081\u308B",
        "\u307F\u306A\u3068",
        "\u307F\u306A\u307F\u304B\u3055\u3044",
        "\u307F\u306D\u3089\u308B",
        "\u307F\u306E\u3046",
        "\u307F\u306E\u304B\u3099\u3059",
        "\u307F\u307B\u3093",
        "\u307F\u3082\u3068",
        "\u307F\u3084\u3051\u3099",
        "\u307F\u3089\u3044",
        "\u307F\u308A\u3087\u304F",
        "\u307F\u308F\u304F",
        "\u307F\u3093\u304B",
        "\u307F\u3093\u305D\u3099\u304F",
        "\u3080\u3044\u304B",
        "\u3080\u3048\u304D",
        "\u3080\u3048\u3093",
        "\u3080\u304B\u3044",
        "\u3080\u304B\u3046",
        "\u3080\u304B\u3048",
        "\u3080\u304B\u3057",
        "\u3080\u304D\u3099\u3061\u3083",
        "\u3080\u3051\u308B",
        "\u3080\u3051\u3099\u3093",
        "\u3080\u3055\u307B\u3099\u308B",
        "\u3080\u3057\u3042\u3064\u3044",
        "\u3080\u3057\u306F\u3099",
        "\u3080\u3057\u3099\u3085\u3093",
        "\u3080\u3057\u308D",
        "\u3080\u3059\u3046",
        "\u3080\u3059\u3053",
        "\u3080\u3059\u3075\u3099",
        "\u3080\u3059\u3081",
        "\u3080\u305B\u308B",
        "\u3080\u305B\u3093",
        "\u3080\u3061\u3085\u3046",
        "\u3080\u306A\u3057\u3044",
        "\u3080\u306E\u3046",
        "\u3080\u3084\u307F",
        "\u3080\u3088\u3046",
        "\u3080\u3089\u3055\u304D",
        "\u3080\u308A\u3087\u3046",
        "\u3080\u308D\u3093",
        "\u3081\u3044\u3042\u3093",
        "\u3081\u3044\u3046\u3093",
        "\u3081\u3044\u3048\u3093",
        "\u3081\u3044\u304B\u304F",
        "\u3081\u3044\u304D\u3087\u304F",
        "\u3081\u3044\u3055\u3044",
        "\u3081\u3044\u3057",
        "\u3081\u3044\u305D\u3046",
        "\u3081\u3044\u3075\u3099\u3064",
        "\u3081\u3044\u308C\u3044",
        "\u3081\u3044\u308F\u304F",
        "\u3081\u304F\u3099\u307E\u308C\u308B",
        "\u3081\u3055\u3099\u3059",
        "\u3081\u3057\u305F",
        "\u3081\u3059\u3099\u3089\u3057\u3044",
        "\u3081\u305F\u3099\u3064",
        "\u3081\u307E\u3044",
        "\u3081\u3084\u3059",
        "\u3081\u3093\u304D\u3087",
        "\u3081\u3093\u305B\u304D",
        "\u3081\u3093\u3068\u3099\u3046",
        "\u3082\u3046\u3057\u3042\u3051\u3099\u308B",
        "\u3082\u3046\u3068\u3099\u3046\u3051\u3093",
        "\u3082\u3048\u308B",
        "\u3082\u304F\u3057",
        "\u3082\u304F\u3066\u304D",
        "\u3082\u304F\u3088\u3046\u3072\u3099",
        "\u3082\u3061\u308D\u3093",
        "\u3082\u3068\u3099\u308B",
        "\u3082\u3089\u3046",
        "\u3082\u3093\u304F",
        "\u3082\u3093\u305F\u3099\u3044",
        "\u3084\u304A\u3084",
        "\u3084\u3051\u308B",
        "\u3084\u3055\u3044",
        "\u3084\u3055\u3057\u3044",
        "\u3084\u3059\u3044",
        "\u3084\u3059\u305F\u308D\u3046",
        "\u3084\u3059\u307F",
        "\u3084\u305B\u308B",
        "\u3084\u305D\u3046",
        "\u3084\u305F\u3044",
        "\u3084\u3061\u3093",
        "\u3084\u3063\u3068",
        "\u3084\u3063\u306F\u309A\u308A",
        "\u3084\u3075\u3099\u308B",
        "\u3084\u3081\u308B",
        "\u3084\u3084\u3053\u3057\u3044",
        "\u3084\u3088\u3044",
        "\u3084\u308F\u3089\u304B\u3044",
        "\u3086\u3046\u304D",
        "\u3086\u3046\u3072\u3099\u3093\u304D\u3087\u304F",
        "\u3086\u3046\u3078\u3099",
        "\u3086\u3046\u3081\u3044",
        "\u3086\u3051\u3064",
        "\u3086\u3057\u3085\u3064",
        "\u3086\u305B\u3093",
        "\u3086\u305D\u3046",
        "\u3086\u305F\u304B",
        "\u3086\u3061\u3083\u304F",
        "\u3086\u3066\u3099\u308B",
        "\u3086\u306B\u3085\u3046",
        "\u3086\u3072\u3099\u308F",
        "\u3086\u3089\u3044",
        "\u3086\u308C\u308B",
        "\u3088\u3046\u3044",
        "\u3088\u3046\u304B",
        "\u3088\u3046\u304D\u3085\u3046",
        "\u3088\u3046\u3057\u3099",
        "\u3088\u3046\u3059",
        "\u3088\u3046\u3061\u3048\u3093",
        "\u3088\u304B\u305B\u3099",
        "\u3088\u304B\u3093",
        "\u3088\u304D\u3093",
        "\u3088\u304F\u305B\u3044",
        "\u3088\u304F\u307B\u3099\u3046",
        "\u3088\u3051\u3044",
        "\u3088\u3053\u3099\u308C\u308B",
        "\u3088\u3055\u3093",
        "\u3088\u3057\u3085\u3046",
        "\u3088\u305D\u3046",
        "\u3088\u305D\u304F",
        "\u3088\u3063\u304B",
        "\u3088\u3066\u3044",
        "\u3088\u3068\u3099\u304B\u3099\u308F\u304F",
        "\u3088\u306D\u3064",
        "\u3088\u3084\u304F",
        "\u3088\u3086\u3046",
        "\u3088\u308D\u3053\u3075\u3099",
        "\u3088\u308D\u3057\u3044",
        "\u3089\u3044\u3046",
        "\u3089\u304F\u304B\u3099\u304D",
        "\u3089\u304F\u3053\u3099",
        "\u3089\u304F\u3055\u3064",
        "\u3089\u304F\u305F\u3099",
        "\u3089\u3057\u3093\u306F\u3099\u3093",
        "\u3089\u305B\u3093",
        "\u3089\u305D\u3099\u304F",
        "\u3089\u305F\u3044",
        "\u3089\u3063\u304B",
        "\u3089\u308C\u3064",
        "\u308A\u3048\u304D",
        "\u308A\u304B\u3044",
        "\u308A\u304D\u3055\u304F",
        "\u308A\u304D\u305B\u3064",
        "\u308A\u304F\u304F\u3099\u3093",
        "\u308A\u304F\u3064",
        "\u308A\u3051\u3093",
        "\u308A\u3053\u3046",
        "\u308A\u305B\u3044",
        "\u308A\u305D\u3046",
        "\u308A\u305D\u304F",
        "\u308A\u3066\u3093",
        "\u308A\u306D\u3093",
        "\u308A\u3086\u3046",
        "\u308A\u3085\u3046\u304B\u3099\u304F",
        "\u308A\u3088\u3046",
        "\u308A\u3087\u3046\u308A",
        "\u308A\u3087\u304B\u3093",
        "\u308A\u3087\u304F\u3061\u3083",
        "\u308A\u3087\u3053\u3046",
        "\u308A\u308A\u304F",
        "\u308A\u308C\u304D",
        "\u308A\u308D\u3093",
        "\u308A\u3093\u3053\u3099",
        "\u308B\u3044\u3051\u3044",
        "\u308B\u3044\u3055\u3044",
        "\u308B\u3044\u3057\u3099",
        "\u308B\u3044\u305B\u304D",
        "\u308B\u3059\u306F\u3099\u3093",
        "\u308B\u308A\u304B\u3099\u308F\u3089",
        "\u308C\u3044\u304B\u3093",
        "\u308C\u3044\u304D\u3099",
        "\u308C\u3044\u305B\u3044",
        "\u308C\u3044\u305D\u3099\u3046\u3053",
        "\u308C\u3044\u3068\u3046",
        "\u308C\u3044\u307B\u3099\u3046",
        "\u308C\u304D\u3057",
        "\u308C\u304D\u305F\u3099\u3044",
        "\u308C\u3093\u3042\u3044",
        "\u308C\u3093\u3051\u3044",
        "\u308C\u3093\u3053\u3093",
        "\u308C\u3093\u3055\u3044",
        "\u308C\u3093\u3057\u3085\u3046",
        "\u308C\u3093\u305D\u3099\u304F",
        "\u308C\u3093\u3089\u304F",
        "\u308D\u3046\u304B",
        "\u308D\u3046\u3053\u3099",
        "\u308D\u3046\u3057\u3099\u3093",
        "\u308D\u3046\u305D\u304F",
        "\u308D\u304F\u304B\u3099",
        "\u308D\u3053\u3064",
        "\u308D\u3057\u3099\u3046\u3089",
        "\u308D\u3057\u3085\u3064",
        "\u308D\u305B\u3093",
        "\u308D\u3066\u3093",
        "\u308D\u3081\u3093",
        "\u308D\u308C\u3064",
        "\u308D\u3093\u304D\u3099",
        "\u308D\u3093\u306F\u309A",
        "\u308D\u3093\u3075\u3099\u3093",
        "\u308D\u3093\u308A",
        "\u308F\u304B\u3059",
        "\u308F\u304B\u3081",
        "\u308F\u304B\u3084\u307E",
        "\u308F\u304B\u308C\u308B",
        "\u308F\u3057\u3064",
        "\u308F\u3057\u3099\u307E\u3057",
        "\u308F\u3059\u308C\u3082\u306E",
        "\u308F\u3089\u3046",
        "\u308F\u308C\u308B"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/spanish.js
  var require_spanish = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/spanish.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.default = [
        "a\u0301baco",
        "abdomen",
        "abeja",
        "abierto",
        "abogado",
        "abono",
        "aborto",
        "abrazo",
        "abrir",
        "abuelo",
        "abuso",
        "acabar",
        "academia",
        "acceso",
        "accio\u0301n",
        "aceite",
        "acelga",
        "acento",
        "aceptar",
        "a\u0301cido",
        "aclarar",
        "acne\u0301",
        "acoger",
        "acoso",
        "activo",
        "acto",
        "actriz",
        "actuar",
        "acudir",
        "acuerdo",
        "acusar",
        "adicto",
        "admitir",
        "adoptar",
        "adorno",
        "aduana",
        "adulto",
        "ae\u0301reo",
        "afectar",
        "aficio\u0301n",
        "afinar",
        "afirmar",
        "a\u0301gil",
        "agitar",
        "agoni\u0301a",
        "agosto",
        "agotar",
        "agregar",
        "agrio",
        "agua",
        "agudo",
        "a\u0301guila",
        "aguja",
        "ahogo",
        "ahorro",
        "aire",
        "aislar",
        "ajedrez",
        "ajeno",
        "ajuste",
        "alacra\u0301n",
        "alambre",
        "alarma",
        "alba",
        "a\u0301lbum",
        "alcalde",
        "aldea",
        "alegre",
        "alejar",
        "alerta",
        "aleta",
        "alfiler",
        "alga",
        "algodo\u0301n",
        "aliado",
        "aliento",
        "alivio",
        "alma",
        "almeja",
        "almi\u0301bar",
        "altar",
        "alteza",
        "altivo",
        "alto",
        "altura",
        "alumno",
        "alzar",
        "amable",
        "amante",
        "amapola",
        "amargo",
        "amasar",
        "a\u0301mbar",
        "a\u0301mbito",
        "ameno",
        "amigo",
        "amistad",
        "amor",
        "amparo",
        "amplio",
        "ancho",
        "anciano",
        "ancla",
        "andar",
        "ande\u0301n",
        "anemia",
        "a\u0301ngulo",
        "anillo",
        "a\u0301nimo",
        "ani\u0301s",
        "anotar",
        "antena",
        "antiguo",
        "antojo",
        "anual",
        "anular",
        "anuncio",
        "an\u0303adir",
        "an\u0303ejo",
        "an\u0303o",
        "apagar",
        "aparato",
        "apetito",
        "apio",
        "aplicar",
        "apodo",
        "aporte",
        "apoyo",
        "aprender",
        "aprobar",
        "apuesta",
        "apuro",
        "arado",
        "aran\u0303a",
        "arar",
        "a\u0301rbitro",
        "a\u0301rbol",
        "arbusto",
        "archivo",
        "arco",
        "arder",
        "ardilla",
        "arduo",
        "a\u0301rea",
        "a\u0301rido",
        "aries",
        "armoni\u0301a",
        "arne\u0301s",
        "aroma",
        "arpa",
        "arpo\u0301n",
        "arreglo",
        "arroz",
        "arruga",
        "arte",
        "artista",
        "asa",
        "asado",
        "asalto",
        "ascenso",
        "asegurar",
        "aseo",
        "asesor",
        "asiento",
        "asilo",
        "asistir",
        "asno",
        "asombro",
        "a\u0301spero",
        "astilla",
        "astro",
        "astuto",
        "asumir",
        "asunto",
        "atajo",
        "ataque",
        "atar",
        "atento",
        "ateo",
        "a\u0301tico",
        "atleta",
        "a\u0301tomo",
        "atraer",
        "atroz",
        "atu\u0301n",
        "audaz",
        "audio",
        "auge",
        "aula",
        "aumento",
        "ausente",
        "autor",
        "aval",
        "avance",
        "avaro",
        "ave",
        "avellana",
        "avena",
        "avestruz",
        "avio\u0301n",
        "aviso",
        "ayer",
        "ayuda",
        "ayuno",
        "azafra\u0301n",
        "azar",
        "azote",
        "azu\u0301car",
        "azufre",
        "azul",
        "baba",
        "babor",
        "bache",
        "bahi\u0301a",
        "baile",
        "bajar",
        "balanza",
        "balco\u0301n",
        "balde",
        "bambu\u0301",
        "banco",
        "banda",
        "ban\u0303o",
        "barba",
        "barco",
        "barniz",
        "barro",
        "ba\u0301scula",
        "basto\u0301n",
        "basura",
        "batalla",
        "bateri\u0301a",
        "batir",
        "batuta",
        "bau\u0301l",
        "bazar",
        "bebe\u0301",
        "bebida",
        "bello",
        "besar",
        "beso",
        "bestia",
        "bicho",
        "bien",
        "bingo",
        "blanco",
        "bloque",
        "blusa",
        "boa",
        "bobina",
        "bobo",
        "boca",
        "bocina",
        "boda",
        "bodega",
        "boina",
        "bola",
        "bolero",
        "bolsa",
        "bomba",
        "bondad",
        "bonito",
        "bono",
        "bonsa\u0301i",
        "borde",
        "borrar",
        "bosque",
        "bote",
        "boti\u0301n",
        "bo\u0301veda",
        "bozal",
        "bravo",
        "brazo",
        "brecha",
        "breve",
        "brillo",
        "brinco",
        "brisa",
        "broca",
        "broma",
        "bronce",
        "brote",
        "bruja",
        "brusco",
        "bruto",
        "buceo",
        "bucle",
        "bueno",
        "buey",
        "bufanda",
        "bufo\u0301n",
        "bu\u0301ho",
        "buitre",
        "bulto",
        "burbuja",
        "burla",
        "burro",
        "buscar",
        "butaca",
        "buzo\u0301n",
        "caballo",
        "cabeza",
        "cabina",
        "cabra",
        "cacao",
        "cada\u0301ver",
        "cadena",
        "caer",
        "cafe\u0301",
        "cai\u0301da",
        "caima\u0301n",
        "caja",
        "cajo\u0301n",
        "cal",
        "calamar",
        "calcio",
        "caldo",
        "calidad",
        "calle",
        "calma",
        "calor",
        "calvo",
        "cama",
        "cambio",
        "camello",
        "camino",
        "campo",
        "ca\u0301ncer",
        "candil",
        "canela",
        "canguro",
        "canica",
        "canto",
        "can\u0303a",
        "can\u0303o\u0301n",
        "caoba",
        "caos",
        "capaz",
        "capita\u0301n",
        "capote",
        "captar",
        "capucha",
        "cara",
        "carbo\u0301n",
        "ca\u0301rcel",
        "careta",
        "carga",
        "carin\u0303o",
        "carne",
        "carpeta",
        "carro",
        "carta",
        "casa",
        "casco",
        "casero",
        "caspa",
        "castor",
        "catorce",
        "catre",
        "caudal",
        "causa",
        "cazo",
        "cebolla",
        "ceder",
        "cedro",
        "celda",
        "ce\u0301lebre",
        "celoso",
        "ce\u0301lula",
        "cemento",
        "ceniza",
        "centro",
        "cerca",
        "cerdo",
        "cereza",
        "cero",
        "cerrar",
        "certeza",
        "ce\u0301sped",
        "cetro",
        "chacal",
        "chaleco",
        "champu\u0301",
        "chancla",
        "chapa",
        "charla",
        "chico",
        "chiste",
        "chivo",
        "choque",
        "choza",
        "chuleta",
        "chupar",
        "ciclo\u0301n",
        "ciego",
        "cielo",
        "cien",
        "cierto",
        "cifra",
        "cigarro",
        "cima",
        "cinco",
        "cine",
        "cinta",
        "cipre\u0301s",
        "circo",
        "ciruela",
        "cisne",
        "cita",
        "ciudad",
        "clamor",
        "clan",
        "claro",
        "clase",
        "clave",
        "cliente",
        "clima",
        "cli\u0301nica",
        "cobre",
        "coccio\u0301n",
        "cochino",
        "cocina",
        "coco",
        "co\u0301digo",
        "codo",
        "cofre",
        "coger",
        "cohete",
        "coji\u0301n",
        "cojo",
        "cola",
        "colcha",
        "colegio",
        "colgar",
        "colina",
        "collar",
        "colmo",
        "columna",
        "combate",
        "comer",
        "comida",
        "co\u0301modo",
        "compra",
        "conde",
        "conejo",
        "conga",
        "conocer",
        "consejo",
        "contar",
        "copa",
        "copia",
        "corazo\u0301n",
        "corbata",
        "corcho",
        "cordo\u0301n",
        "corona",
        "correr",
        "coser",
        "cosmos",
        "costa",
        "cra\u0301neo",
        "cra\u0301ter",
        "crear",
        "crecer",
        "crei\u0301do",
        "crema",
        "cri\u0301a",
        "crimen",
        "cripta",
        "crisis",
        "cromo",
        "cro\u0301nica",
        "croqueta",
        "crudo",
        "cruz",
        "cuadro",
        "cuarto",
        "cuatro",
        "cubo",
        "cubrir",
        "cuchara",
        "cuello",
        "cuento",
        "cuerda",
        "cuesta",
        "cueva",
        "cuidar",
        "culebra",
        "culpa",
        "culto",
        "cumbre",
        "cumplir",
        "cuna",
        "cuneta",
        "cuota",
        "cupo\u0301n",
        "cu\u0301pula",
        "curar",
        "curioso",
        "curso",
        "curva",
        "cutis",
        "dama",
        "danza",
        "dar",
        "dardo",
        "da\u0301til",
        "deber",
        "de\u0301bil",
        "de\u0301cada",
        "decir",
        "dedo",
        "defensa",
        "definir",
        "dejar",
        "delfi\u0301n",
        "delgado",
        "delito",
        "demora",
        "denso",
        "dental",
        "deporte",
        "derecho",
        "derrota",
        "desayuno",
        "deseo",
        "desfile",
        "desnudo",
        "destino",
        "desvi\u0301o",
        "detalle",
        "detener",
        "deuda",
        "di\u0301a",
        "diablo",
        "diadema",
        "diamante",
        "diana",
        "diario",
        "dibujo",
        "dictar",
        "diente",
        "dieta",
        "diez",
        "difi\u0301cil",
        "digno",
        "dilema",
        "diluir",
        "dinero",
        "directo",
        "dirigir",
        "disco",
        "disen\u0303o",
        "disfraz",
        "diva",
        "divino",
        "doble",
        "doce",
        "dolor",
        "domingo",
        "don",
        "donar",
        "dorado",
        "dormir",
        "dorso",
        "dos",
        "dosis",
        "drago\u0301n",
        "droga",
        "ducha",
        "duda",
        "duelo",
        "duen\u0303o",
        "dulce",
        "du\u0301o",
        "duque",
        "durar",
        "dureza",
        "duro",
        "e\u0301bano",
        "ebrio",
        "echar",
        "eco",
        "ecuador",
        "edad",
        "edicio\u0301n",
        "edificio",
        "editor",
        "educar",
        "efecto",
        "eficaz",
        "eje",
        "ejemplo",
        "elefante",
        "elegir",
        "elemento",
        "elevar",
        "elipse",
        "e\u0301lite",
        "elixir",
        "elogio",
        "eludir",
        "embudo",
        "emitir",
        "emocio\u0301n",
        "empate",
        "empen\u0303o",
        "empleo",
        "empresa",
        "enano",
        "encargo",
        "enchufe",
        "enci\u0301a",
        "enemigo",
        "enero",
        "enfado",
        "enfermo",
        "engan\u0303o",
        "enigma",
        "enlace",
        "enorme",
        "enredo",
        "ensayo",
        "ensen\u0303ar",
        "entero",
        "entrar",
        "envase",
        "envi\u0301o",
        "e\u0301poca",
        "equipo",
        "erizo",
        "escala",
        "escena",
        "escolar",
        "escribir",
        "escudo",
        "esencia",
        "esfera",
        "esfuerzo",
        "espada",
        "espejo",
        "espi\u0301a",
        "esposa",
        "espuma",
        "esqui\u0301",
        "estar",
        "este",
        "estilo",
        "estufa",
        "etapa",
        "eterno",
        "e\u0301tica",
        "etnia",
        "evadir",
        "evaluar",
        "evento",
        "evitar",
        "exacto",
        "examen",
        "exceso",
        "excusa",
        "exento",
        "exigir",
        "exilio",
        "existir",
        "e\u0301xito",
        "experto",
        "explicar",
        "exponer",
        "extremo",
        "fa\u0301brica",
        "fa\u0301bula",
        "fachada",
        "fa\u0301cil",
        "factor",
        "faena",
        "faja",
        "falda",
        "fallo",
        "falso",
        "faltar",
        "fama",
        "familia",
        "famoso",
        "farao\u0301n",
        "farmacia",
        "farol",
        "farsa",
        "fase",
        "fatiga",
        "fauna",
        "favor",
        "fax",
        "febrero",
        "fecha",
        "feliz",
        "feo",
        "feria",
        "feroz",
        "fe\u0301rtil",
        "fervor",
        "festi\u0301n",
        "fiable",
        "fianza",
        "fiar",
        "fibra",
        "ficcio\u0301n",
        "ficha",
        "fideo",
        "fiebre",
        "fiel",
        "fiera",
        "fiesta",
        "figura",
        "fijar",
        "fijo",
        "fila",
        "filete",
        "filial",
        "filtro",
        "fin",
        "finca",
        "fingir",
        "finito",
        "firma",
        "flaco",
        "flauta",
        "flecha",
        "flor",
        "flota",
        "fluir",
        "flujo",
        "flu\u0301or",
        "fobia",
        "foca",
        "fogata",
        "fogo\u0301n",
        "folio",
        "folleto",
        "fondo",
        "forma",
        "forro",
        "fortuna",
        "forzar",
        "fosa",
        "foto",
        "fracaso",
        "fra\u0301gil",
        "franja",
        "frase",
        "fraude",
        "frei\u0301r",
        "freno",
        "fresa",
        "fri\u0301o",
        "frito",
        "fruta",
        "fuego",
        "fuente",
        "fuerza",
        "fuga",
        "fumar",
        "funcio\u0301n",
        "funda",
        "furgo\u0301n",
        "furia",
        "fusil",
        "fu\u0301tbol",
        "futuro",
        "gacela",
        "gafas",
        "gaita",
        "gajo",
        "gala",
        "galeri\u0301a",
        "gallo",
        "gamba",
        "ganar",
        "gancho",
        "ganga",
        "ganso",
        "garaje",
        "garza",
        "gasolina",
        "gastar",
        "gato",
        "gavila\u0301n",
        "gemelo",
        "gemir",
        "gen",
        "ge\u0301nero",
        "genio",
        "gente",
        "geranio",
        "gerente",
        "germen",
        "gesto",
        "gigante",
        "gimnasio",
        "girar",
        "giro",
        "glaciar",
        "globo",
        "gloria",
        "gol",
        "golfo",
        "goloso",
        "golpe",
        "goma",
        "gordo",
        "gorila",
        "gorra",
        "gota",
        "goteo",
        "gozar",
        "grada",
        "gra\u0301fico",
        "grano",
        "grasa",
        "gratis",
        "grave",
        "grieta",
        "grillo",
        "gripe",
        "gris",
        "grito",
        "grosor",
        "gru\u0301a",
        "grueso",
        "grumo",
        "grupo",
        "guante",
        "guapo",
        "guardia",
        "guerra",
        "gui\u0301a",
        "guin\u0303o",
        "guion",
        "guiso",
        "guitarra",
        "gusano",
        "gustar",
        "haber",
        "ha\u0301bil",
        "hablar",
        "hacer",
        "hacha",
        "hada",
        "hallar",
        "hamaca",
        "harina",
        "haz",
        "hazan\u0303a",
        "hebilla",
        "hebra",
        "hecho",
        "helado",
        "helio",
        "hembra",
        "herir",
        "hermano",
        "he\u0301roe",
        "hervir",
        "hielo",
        "hierro",
        "hi\u0301gado",
        "higiene",
        "hijo",
        "himno",
        "historia",
        "hocico",
        "hogar",
        "hoguera",
        "hoja",
        "hombre",
        "hongo",
        "honor",
        "honra",
        "hora",
        "hormiga",
        "horno",
        "hostil",
        "hoyo",
        "hueco",
        "huelga",
        "huerta",
        "hueso",
        "huevo",
        "huida",
        "huir",
        "humano",
        "hu\u0301medo",
        "humilde",
        "humo",
        "hundir",
        "huraca\u0301n",
        "hurto",
        "icono",
        "ideal",
        "idioma",
        "i\u0301dolo",
        "iglesia",
        "iglu\u0301",
        "igual",
        "ilegal",
        "ilusio\u0301n",
        "imagen",
        "ima\u0301n",
        "imitar",
        "impar",
        "imperio",
        "imponer",
        "impulso",
        "incapaz",
        "i\u0301ndice",
        "inerte",
        "infiel",
        "informe",
        "ingenio",
        "inicio",
        "inmenso",
        "inmune",
        "innato",
        "insecto",
        "instante",
        "intere\u0301s",
        "i\u0301ntimo",
        "intuir",
        "inu\u0301til",
        "invierno",
        "ira",
        "iris",
        "ironi\u0301a",
        "isla",
        "islote",
        "jabali\u0301",
        "jabo\u0301n",
        "jamo\u0301n",
        "jarabe",
        "jardi\u0301n",
        "jarra",
        "jaula",
        "jazmi\u0301n",
        "jefe",
        "jeringa",
        "jinete",
        "jornada",
        "joroba",
        "joven",
        "joya",
        "juerga",
        "jueves",
        "juez",
        "jugador",
        "jugo",
        "juguete",
        "juicio",
        "junco",
        "jungla",
        "junio",
        "juntar",
        "ju\u0301piter",
        "jurar",
        "justo",
        "juvenil",
        "juzgar",
        "kilo",
        "koala",
        "labio",
        "lacio",
        "lacra",
        "lado",
        "ladro\u0301n",
        "lagarto",
        "la\u0301grima",
        "laguna",
        "laico",
        "lamer",
        "la\u0301mina",
        "la\u0301mpara",
        "lana",
        "lancha",
        "langosta",
        "lanza",
        "la\u0301piz",
        "largo",
        "larva",
        "la\u0301stima",
        "lata",
        "la\u0301tex",
        "latir",
        "laurel",
        "lavar",
        "lazo",
        "leal",
        "leccio\u0301n",
        "leche",
        "lector",
        "leer",
        "legio\u0301n",
        "legumbre",
        "lejano",
        "lengua",
        "lento",
        "len\u0303a",
        "leo\u0301n",
        "leopardo",
        "lesio\u0301n",
        "letal",
        "letra",
        "leve",
        "leyenda",
        "libertad",
        "libro",
        "licor",
        "li\u0301der",
        "lidiar",
        "lienzo",
        "liga",
        "ligero",
        "lima",
        "li\u0301mite",
        "limo\u0301n",
        "limpio",
        "lince",
        "lindo",
        "li\u0301nea",
        "lingote",
        "lino",
        "linterna",
        "li\u0301quido",
        "liso",
        "lista",
        "litera",
        "litio",
        "litro",
        "llaga",
        "llama",
        "llanto",
        "llave",
        "llegar",
        "llenar",
        "llevar",
        "llorar",
        "llover",
        "lluvia",
        "lobo",
        "locio\u0301n",
        "loco",
        "locura",
        "lo\u0301gica",
        "logro",
        "lombriz",
        "lomo",
        "lonja",
        "lote",
        "lucha",
        "lucir",
        "lugar",
        "lujo",
        "luna",
        "lunes",
        "lupa",
        "lustro",
        "luto",
        "luz",
        "maceta",
        "macho",
        "madera",
        "madre",
        "maduro",
        "maestro",
        "mafia",
        "magia",
        "mago",
        "mai\u0301z",
        "maldad",
        "maleta",
        "malla",
        "malo",
        "mama\u0301",
        "mambo",
        "mamut",
        "manco",
        "mando",
        "manejar",
        "manga",
        "maniqui\u0301",
        "manjar",
        "mano",
        "manso",
        "manta",
        "man\u0303ana",
        "mapa",
        "ma\u0301quina",
        "mar",
        "marco",
        "marea",
        "marfil",
        "margen",
        "marido",
        "ma\u0301rmol",
        "marro\u0301n",
        "martes",
        "marzo",
        "masa",
        "ma\u0301scara",
        "masivo",
        "matar",
        "materia",
        "matiz",
        "matriz",
        "ma\u0301ximo",
        "mayor",
        "mazorca",
        "mecha",
        "medalla",
        "medio",
        "me\u0301dula",
        "mejilla",
        "mejor",
        "melena",
        "melo\u0301n",
        "memoria",
        "menor",
        "mensaje",
        "mente",
        "menu\u0301",
        "mercado",
        "merengue",
        "me\u0301rito",
        "mes",
        "meso\u0301n",
        "meta",
        "meter",
        "me\u0301todo",
        "metro",
        "mezcla",
        "miedo",
        "miel",
        "miembro",
        "miga",
        "mil",
        "milagro",
        "militar",
        "millo\u0301n",
        "mimo",
        "mina",
        "minero",
        "mi\u0301nimo",
        "minuto",
        "miope",
        "mirar",
        "misa",
        "miseria",
        "misil",
        "mismo",
        "mitad",
        "mito",
        "mochila",
        "mocio\u0301n",
        "moda",
        "modelo",
        "moho",
        "mojar",
        "molde",
        "moler",
        "molino",
        "momento",
        "momia",
        "monarca",
        "moneda",
        "monja",
        "monto",
        "mon\u0303o",
        "morada",
        "morder",
        "moreno",
        "morir",
        "morro",
        "morsa",
        "mortal",
        "mosca",
        "mostrar",
        "motivo",
        "mover",
        "mo\u0301vil",
        "mozo",
        "mucho",
        "mudar",
        "mueble",
        "muela",
        "muerte",
        "muestra",
        "mugre",
        "mujer",
        "mula",
        "muleta",
        "multa",
        "mundo",
        "mun\u0303eca",
        "mural",
        "muro",
        "mu\u0301sculo",
        "museo",
        "musgo",
        "mu\u0301sica",
        "muslo",
        "na\u0301car",
        "nacio\u0301n",
        "nadar",
        "naipe",
        "naranja",
        "nariz",
        "narrar",
        "nasal",
        "natal",
        "nativo",
        "natural",
        "na\u0301usea",
        "naval",
        "nave",
        "navidad",
        "necio",
        "ne\u0301ctar",
        "negar",
        "negocio",
        "negro",
        "neo\u0301n",
        "nervio",
        "neto",
        "neutro",
        "nevar",
        "nevera",
        "nicho",
        "nido",
        "niebla",
        "nieto",
        "nin\u0303ez",
        "nin\u0303o",
        "ni\u0301tido",
        "nivel",
        "nobleza",
        "noche",
        "no\u0301mina",
        "noria",
        "norma",
        "norte",
        "nota",
        "noticia",
        "novato",
        "novela",
        "novio",
        "nube",
        "nuca",
        "nu\u0301cleo",
        "nudillo",
        "nudo",
        "nuera",
        "nueve",
        "nuez",
        "nulo",
        "nu\u0301mero",
        "nutria",
        "oasis",
        "obeso",
        "obispo",
        "objeto",
        "obra",
        "obrero",
        "observar",
        "obtener",
        "obvio",
        "oca",
        "ocaso",
        "oce\u0301ano",
        "ochenta",
        "ocho",
        "ocio",
        "ocre",
        "octavo",
        "octubre",
        "oculto",
        "ocupar",
        "ocurrir",
        "odiar",
        "odio",
        "odisea",
        "oeste",
        "ofensa",
        "oferta",
        "oficio",
        "ofrecer",
        "ogro",
        "oi\u0301do",
        "oi\u0301r",
        "ojo",
        "ola",
        "oleada",
        "olfato",
        "olivo",
        "olla",
        "olmo",
        "olor",
        "olvido",
        "ombligo",
        "onda",
        "onza",
        "opaco",
        "opcio\u0301n",
        "o\u0301pera",
        "opinar",
        "oponer",
        "optar",
        "o\u0301ptica",
        "opuesto",
        "oracio\u0301n",
        "orador",
        "oral",
        "o\u0301rbita",
        "orca",
        "orden",
        "oreja",
        "o\u0301rgano",
        "orgi\u0301a",
        "orgullo",
        "oriente",
        "origen",
        "orilla",
        "oro",
        "orquesta",
        "oruga",
        "osadi\u0301a",
        "oscuro",
        "osezno",
        "oso",
        "ostra",
        "oton\u0303o",
        "otro",
        "oveja",
        "o\u0301vulo",
        "o\u0301xido",
        "oxi\u0301geno",
        "oyente",
        "ozono",
        "pacto",
        "padre",
        "paella",
        "pa\u0301gina",
        "pago",
        "pai\u0301s",
        "pa\u0301jaro",
        "palabra",
        "palco",
        "paleta",
        "pa\u0301lido",
        "palma",
        "paloma",
        "palpar",
        "pan",
        "panal",
        "pa\u0301nico",
        "pantera",
        "pan\u0303uelo",
        "papa\u0301",
        "papel",
        "papilla",
        "paquete",
        "parar",
        "parcela",
        "pared",
        "parir",
        "paro",
        "pa\u0301rpado",
        "parque",
        "pa\u0301rrafo",
        "parte",
        "pasar",
        "paseo",
        "pasio\u0301n",
        "paso",
        "pasta",
        "pata",
        "patio",
        "patria",
        "pausa",
        "pauta",
        "pavo",
        "payaso",
        "peato\u0301n",
        "pecado",
        "pecera",
        "pecho",
        "pedal",
        "pedir",
        "pegar",
        "peine",
        "pelar",
        "peldan\u0303o",
        "pelea",
        "peligro",
        "pellejo",
        "pelo",
        "peluca",
        "pena",
        "pensar",
        "pen\u0303o\u0301n",
        "peo\u0301n",
        "peor",
        "pepino",
        "pequen\u0303o",
        "pera",
        "percha",
        "perder",
        "pereza",
        "perfil",
        "perico",
        "perla",
        "permiso",
        "perro",
        "persona",
        "pesa",
        "pesca",
        "pe\u0301simo",
        "pestan\u0303a",
        "pe\u0301talo",
        "petro\u0301leo",
        "pez",
        "pezun\u0303a",
        "picar",
        "picho\u0301n",
        "pie",
        "piedra",
        "pierna",
        "pieza",
        "pijama",
        "pilar",
        "piloto",
        "pimienta",
        "pino",
        "pintor",
        "pinza",
        "pin\u0303a",
        "piojo",
        "pipa",
        "pirata",
        "pisar",
        "piscina",
        "piso",
        "pista",
        "pito\u0301n",
        "pizca",
        "placa",
        "plan",
        "plata",
        "playa",
        "plaza",
        "pleito",
        "pleno",
        "plomo",
        "pluma",
        "plural",
        "pobre",
        "poco",
        "poder",
        "podio",
        "poema",
        "poesi\u0301a",
        "poeta",
        "polen",
        "polici\u0301a",
        "pollo",
        "polvo",
        "pomada",
        "pomelo",
        "pomo",
        "pompa",
        "poner",
        "porcio\u0301n",
        "portal",
        "posada",
        "poseer",
        "posible",
        "poste",
        "potencia",
        "potro",
        "pozo",
        "prado",
        "precoz",
        "pregunta",
        "premio",
        "prensa",
        "preso",
        "previo",
        "primo",
        "pri\u0301ncipe",
        "prisio\u0301n",
        "privar",
        "proa",
        "probar",
        "proceso",
        "producto",
        "proeza",
        "profesor",
        "programa",
        "prole",
        "promesa",
        "pronto",
        "propio",
        "pro\u0301ximo",
        "prueba",
        "pu\u0301blico",
        "puchero",
        "pudor",
        "pueblo",
        "puerta",
        "puesto",
        "pulga",
        "pulir",
        "pulmo\u0301n",
        "pulpo",
        "pulso",
        "puma",
        "punto",
        "pun\u0303al",
        "pun\u0303o",
        "pupa",
        "pupila",
        "pure\u0301",
        "quedar",
        "queja",
        "quemar",
        "querer",
        "queso",
        "quieto",
        "qui\u0301mica",
        "quince",
        "quitar",
        "ra\u0301bano",
        "rabia",
        "rabo",
        "racio\u0301n",
        "radical",
        "rai\u0301z",
        "rama",
        "rampa",
        "rancho",
        "rango",
        "rapaz",
        "ra\u0301pido",
        "rapto",
        "rasgo",
        "raspa",
        "rato",
        "rayo",
        "raza",
        "razo\u0301n",
        "reaccio\u0301n",
        "realidad",
        "reban\u0303o",
        "rebote",
        "recaer",
        "receta",
        "rechazo",
        "recoger",
        "recreo",
        "recto",
        "recurso",
        "red",
        "redondo",
        "reducir",
        "reflejo",
        "reforma",
        "refra\u0301n",
        "refugio",
        "regalo",
        "regir",
        "regla",
        "regreso",
        "rehe\u0301n",
        "reino",
        "rei\u0301r",
        "reja",
        "relato",
        "relevo",
        "relieve",
        "relleno",
        "reloj",
        "remar",
        "remedio",
        "remo",
        "rencor",
        "rendir",
        "renta",
        "reparto",
        "repetir",
        "reposo",
        "reptil",
        "res",
        "rescate",
        "resina",
        "respeto",
        "resto",
        "resumen",
        "retiro",
        "retorno",
        "retrato",
        "reunir",
        "reve\u0301s",
        "revista",
        "rey",
        "rezar",
        "rico",
        "riego",
        "rienda",
        "riesgo",
        "rifa",
        "ri\u0301gido",
        "rigor",
        "rinco\u0301n",
        "rin\u0303o\u0301n",
        "ri\u0301o",
        "riqueza",
        "risa",
        "ritmo",
        "rito",
        "rizo",
        "roble",
        "roce",
        "rociar",
        "rodar",
        "rodeo",
        "rodilla",
        "roer",
        "rojizo",
        "rojo",
        "romero",
        "romper",
        "ron",
        "ronco",
        "ronda",
        "ropa",
        "ropero",
        "rosa",
        "rosca",
        "rostro",
        "rotar",
        "rubi\u0301",
        "rubor",
        "rudo",
        "rueda",
        "rugir",
        "ruido",
        "ruina",
        "ruleta",
        "rulo",
        "rumbo",
        "rumor",
        "ruptura",
        "ruta",
        "rutina",
        "sa\u0301bado",
        "saber",
        "sabio",
        "sable",
        "sacar",
        "sagaz",
        "sagrado",
        "sala",
        "saldo",
        "salero",
        "salir",
        "salmo\u0301n",
        "salo\u0301n",
        "salsa",
        "salto",
        "salud",
        "salvar",
        "samba",
        "sancio\u0301n",
        "sandi\u0301a",
        "sanear",
        "sangre",
        "sanidad",
        "sano",
        "santo",
        "sapo",
        "saque",
        "sardina",
        "sarte\u0301n",
        "sastre",
        "sata\u0301n",
        "sauna",
        "saxofo\u0301n",
        "seccio\u0301n",
        "seco",
        "secreto",
        "secta",
        "sed",
        "seguir",
        "seis",
        "sello",
        "selva",
        "semana",
        "semilla",
        "senda",
        "sensor",
        "sen\u0303al",
        "sen\u0303or",
        "separar",
        "sepia",
        "sequi\u0301a",
        "ser",
        "serie",
        "sermo\u0301n",
        "servir",
        "sesenta",
        "sesio\u0301n",
        "seta",
        "setenta",
        "severo",
        "sexo",
        "sexto",
        "sidra",
        "siesta",
        "siete",
        "siglo",
        "signo",
        "si\u0301laba",
        "silbar",
        "silencio",
        "silla",
        "si\u0301mbolo",
        "simio",
        "sirena",
        "sistema",
        "sitio",
        "situar",
        "sobre",
        "socio",
        "sodio",
        "sol",
        "solapa",
        "soldado",
        "soledad",
        "so\u0301lido",
        "soltar",
        "solucio\u0301n",
        "sombra",
        "sondeo",
        "sonido",
        "sonoro",
        "sonrisa",
        "sopa",
        "soplar",
        "soporte",
        "sordo",
        "sorpresa",
        "sorteo",
        "soste\u0301n",
        "so\u0301tano",
        "suave",
        "subir",
        "suceso",
        "sudor",
        "suegra",
        "suelo",
        "suen\u0303o",
        "suerte",
        "sufrir",
        "sujeto",
        "sulta\u0301n",
        "sumar",
        "superar",
        "suplir",
        "suponer",
        "supremo",
        "sur",
        "surco",
        "suren\u0303o",
        "surgir",
        "susto",
        "sutil",
        "tabaco",
        "tabique",
        "tabla",
        "tabu\u0301",
        "taco",
        "tacto",
        "tajo",
        "talar",
        "talco",
        "talento",
        "talla",
        "talo\u0301n",
        "taman\u0303o",
        "tambor",
        "tango",
        "tanque",
        "tapa",
        "tapete",
        "tapia",
        "tapo\u0301n",
        "taquilla",
        "tarde",
        "tarea",
        "tarifa",
        "tarjeta",
        "tarot",
        "tarro",
        "tarta",
        "tatuaje",
        "tauro",
        "taza",
        "tazo\u0301n",
        "teatro",
        "techo",
        "tecla",
        "te\u0301cnica",
        "tejado",
        "tejer",
        "tejido",
        "tela",
        "tele\u0301fono",
        "tema",
        "temor",
        "templo",
        "tenaz",
        "tender",
        "tener",
        "tenis",
        "tenso",
        "teori\u0301a",
        "terapia",
        "terco",
        "te\u0301rmino",
        "ternura",
        "terror",
        "tesis",
        "tesoro",
        "testigo",
        "tetera",
        "texto",
        "tez",
        "tibio",
        "tiburo\u0301n",
        "tiempo",
        "tienda",
        "tierra",
        "tieso",
        "tigre",
        "tijera",
        "tilde",
        "timbre",
        "ti\u0301mido",
        "timo",
        "tinta",
        "ti\u0301o",
        "ti\u0301pico",
        "tipo",
        "tira",
        "tiro\u0301n",
        "tita\u0301n",
        "ti\u0301tere",
        "ti\u0301tulo",
        "tiza",
        "toalla",
        "tobillo",
        "tocar",
        "tocino",
        "todo",
        "toga",
        "toldo",
        "tomar",
        "tono",
        "tonto",
        "topar",
        "tope",
        "toque",
        "to\u0301rax",
        "torero",
        "tormenta",
        "torneo",
        "toro",
        "torpedo",
        "torre",
        "torso",
        "tortuga",
        "tos",
        "tosco",
        "toser",
        "to\u0301xico",
        "trabajo",
        "tractor",
        "traer",
        "tra\u0301fico",
        "trago",
        "traje",
        "tramo",
        "trance",
        "trato",
        "trauma",
        "trazar",
        "tre\u0301bol",
        "tregua",
        "treinta",
        "tren",
        "trepar",
        "tres",
        "tribu",
        "trigo",
        "tripa",
        "triste",
        "triunfo",
        "trofeo",
        "trompa",
        "tronco",
        "tropa",
        "trote",
        "trozo",
        "truco",
        "trueno",
        "trufa",
        "tuberi\u0301a",
        "tubo",
        "tuerto",
        "tumba",
        "tumor",
        "tu\u0301nel",
        "tu\u0301nica",
        "turbina",
        "turismo",
        "turno",
        "tutor",
        "ubicar",
        "u\u0301lcera",
        "umbral",
        "unidad",
        "unir",
        "universo",
        "uno",
        "untar",
        "un\u0303a",
        "urbano",
        "urbe",
        "urgente",
        "urna",
        "usar",
        "usuario",
        "u\u0301til",
        "utopi\u0301a",
        "uva",
        "vaca",
        "vaci\u0301o",
        "vacuna",
        "vagar",
        "vago",
        "vaina",
        "vajilla",
        "vale",
        "va\u0301lido",
        "valle",
        "valor",
        "va\u0301lvula",
        "vampiro",
        "vara",
        "variar",
        "varo\u0301n",
        "vaso",
        "vecino",
        "vector",
        "vehi\u0301culo",
        "veinte",
        "vejez",
        "vela",
        "velero",
        "veloz",
        "vena",
        "vencer",
        "venda",
        "veneno",
        "vengar",
        "venir",
        "venta",
        "venus",
        "ver",
        "verano",
        "verbo",
        "verde",
        "vereda",
        "verja",
        "verso",
        "verter",
        "vi\u0301a",
        "viaje",
        "vibrar",
        "vicio",
        "vi\u0301ctima",
        "vida",
        "vi\u0301deo",
        "vidrio",
        "viejo",
        "viernes",
        "vigor",
        "vil",
        "villa",
        "vinagre",
        "vino",
        "vin\u0303edo",
        "violi\u0301n",
        "viral",
        "virgo",
        "virtud",
        "visor",
        "vi\u0301spera",
        "vista",
        "vitamina",
        "viudo",
        "vivaz",
        "vivero",
        "vivir",
        "vivo",
        "volca\u0301n",
        "volumen",
        "volver",
        "voraz",
        "votar",
        "voto",
        "voz",
        "vuelo",
        "vulgar",
        "yacer",
        "yate",
        "yegua",
        "yema",
        "yerno",
        "yeso",
        "yodo",
        "yoga",
        "yogur",
        "zafiro",
        "zanja",
        "zapato",
        "zarza",
        "zona",
        "zorro",
        "zumo",
        "zurdo"
      ];
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/words/index.js
  var require_words = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/words/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var chinese_simplified_1 = __importDefault(require_chinese_simplified());
      var chinese_traditional_1 = __importDefault(require_chinese_traditional());
      var french_1 = __importDefault(require_french());
      var english_1 = __importDefault(require_english());
      var italian_1 = __importDefault(require_italian());
      var japanese_1 = __importDefault(require_japanese());
      var spanish_1 = __importDefault(require_spanish());
      function default_1(name) {
        switch (name) {
          case "simplified chinese":
            return chinese_simplified_1.default;
          case "traditional chinese":
            return chinese_traditional_1.default;
          case "english":
            return english_1.default;
          case "french":
            return french_1.default;
          case "italian":
            return italian_1.default;
          case "japanese":
            return japanese_1.default;
          case "spanish":
            return spanish_1.default;
          default:
            throw new Error(`Unknown language: ${name}.`);
        }
      }
      exports.default = default_1;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/mnemonic.js
  var require_mnemonic = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/mnemonic.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var sha256_1 = require_sha256();
      var sha512_1 = require_sha512();
      var pbkdf2_1 = require_pbkdf2();
      var utils_1 = require_utils2();
      var words_1 = __importDefault(require_words());
      var common_1 = require_common();
      var wordlistCache = /* @__PURE__ */ Object.create(null);
      var LANGUAGES = [
        "simplified chinese",
        "traditional chinese",
        "english",
        "french",
        "italian",
        "japanese",
        "spanish"
      ];
      var Mnemonic2 = class _Mnemonic {
        constructor(options) {
          this.bits = common_1.MIN_ENTROPY;
          this.language = "english";
          this.languages = LANGUAGES;
          if (options)
            this.fromOptions(options);
        }
        fromOptions(options) {
          if (options.bits !== void 0) {
            this.bits = options.bits;
          }
          if (options.language) {
            this.language = options.language;
          }
          if (options.phrase) {
            this.fromPhrase(options.phrase);
            return this;
          }
          if (options.entropy) {
            this.fromEntropy(options.entropy, this.language);
            return this;
          }
          return this;
        }
        static fromOptions(options) {
          return new this().fromOptions(options);
        }
        /**
         * Destroy the mnemonic (zeroes entropy).
         */
        destroy() {
          this.bits = common_1.MIN_ENTROPY;
          this.language = "english";
          if (this.entropy) {
            this.entropy = void 0;
          }
          this.phrase = void 0;
        }
        toSeed(passphrase) {
          if (!passphrase)
            passphrase = "";
          const phrase = this.getPhrase().normalize("NFKD");
          const passwd = `mnemonic${passphrase}`.normalize("NFKD");
          return (0, pbkdf2_1.pbkdf2)(
            sha512_1.sha512,
            (0, utils_1.utf8ToBytes)(phrase),
            (0, utils_1.utf8ToBytes)(passwd),
            {
              dkLen: 64,
              c: 10
            }
          );
        }
        getEntropy(entropy) {
          if (!this.entropy && !entropy)
            throw new Error("getEntropy: entropy is required to the first call");
          if (!this.entropy) {
            if (entropy?.length !== this.bits / 8)
              throw new Error(
                `getEntropy: entropy argument should had length ${this.bits / 8}`
              );
            this.entropy = entropy;
          }
          return this.entropy;
        }
        getPhrase(entropySeed) {
          if (this.phrase)
            return this.phrase;
          const wbits = this.bits + this.bits / 32;
          const entropy = this.getEntropy(entropySeed);
          const chk = (0, sha256_1.sha256)(entropy);
          const data = (0, utils_1.concatBytes)(entropy, chk);
          const list = _Mnemonic.getWordlist(this.language);
          let phrase = [];
          for (let i = 0; i < wbits / 11; i++) {
            let index = 0;
            for (let j = 0; j < 11; j++) {
              const pos = i * 11 + j;
              const bit = pos % 8;
              const oct = (pos - bit) / 8;
              index <<= 1;
              index |= data[oct] >>> 7 - bit & 1;
            }
            phrase.push(list.words[index]);
          }
          if (this.language === "japanese")
            phrase = phrase.join("\u3000");
          else
            phrase = phrase.join(" ");
          this.phrase = phrase;
          return phrase;
        }
        fromPhrase(phrase) {
          (0, common_1.assert)(phrase.length <= 1e3);
          const words = phrase.trim().split(/[\s\u3000]+/);
          const wbits = words.length * 11;
          const cbits = wbits % 32;
          (0, common_1.assert)(cbits !== 0, "Invalid checksum.");
          const bits = wbits - cbits;
          (0, common_1.assert)(bits >= common_1.MIN_ENTROPY);
          (0, common_1.assert)(bits <= common_1.MAX_ENTROPY);
          (0, common_1.assert)(bits % 32 === 0);
          const size = Math.ceil(wbits / 8);
          const data = new Uint8Array(size);
          const lang = _Mnemonic.getLanguage(words[0]);
          const list = _Mnemonic.getWordlist(lang);
          for (let i = 0; i < words.length; i++) {
            const word = words[i];
            const index = list.map[word];
            if (index == null)
              throw new Error("Could not find word.");
            for (let j = 0; j < 11; j++) {
              const pos = i * 11 + j;
              const bit = pos % 8;
              const oct = (pos - bit) / 8;
              const val = index >>> 10 - j & 1;
              data[oct] |= val << 7 - bit;
            }
          }
          const cbytes = Math.ceil(cbits / 8);
          const entropy = data.subarray(0, data.length - cbytes);
          const chk1 = data.subarray(data.length - cbytes);
          const chk2 = (0, sha256_1.sha256)(entropy);
          for (let i = 0; i < cbits; i++) {
            const bit = i % 8;
            const oct = (i - bit) / 8;
            const b1 = chk1[oct] >>> 7 - bit & 1;
            const b2 = chk2[oct] >>> 7 - bit & 1;
            if (b1 !== b2)
              throw new Error("Invalid checksum.");
          }
          (0, common_1.assert)(bits / 8 === entropy.length);
          this.bits = bits;
          this.language = lang;
          this.entropy = entropy;
          this.phrase = phrase;
          return this;
        }
        static fromPhrase(phrase) {
          return new this().fromPhrase(phrase);
        }
        fromEntropy(entropy, lang) {
          (0, common_1.assert)(entropy.length * 8 >= common_1.MIN_ENTROPY);
          (0, common_1.assert)(entropy.length * 8 <= common_1.MAX_ENTROPY);
          (0, common_1.assert)(entropy.length * 8 % 32 === 0);
          (0, common_1.assert)(!lang || this.languages.indexOf(lang) !== -1);
          this.entropy = entropy;
          this.bits = entropy.length * 8;
          if (lang)
            this.language = lang;
          return this;
        }
        static fromEntropy(entropy, lang) {
          return new this().fromEntropy(entropy, lang);
        }
        static getLanguage(word) {
          for (const lang of LANGUAGES) {
            const list = _Mnemonic.getWordlist(lang);
            if (list.map[word] != null)
              return lang;
          }
          throw new Error("Could not determine language.");
        }
        static getWordlist(lang) {
          const cache = wordlistCache[lang];
          if (cache)
            return cache;
          const words = (0, words_1.default)(lang);
          const list = new WordList(words);
          wordlistCache[lang] = list;
          return list;
        }
        toJSON() {
          return {
            bits: this.bits,
            language: this.language,
            entropy: (0, utils_1.bytesToHex)(this.getEntropy()),
            phrase: this.getPhrase()
          };
        }
        fromJSON(json) {
          (0, common_1.assert)(json.bits >= common_1.MIN_ENTROPY);
          (0, common_1.assert)(json.bits <= common_1.MAX_ENTROPY);
          (0, common_1.assert)(json.bits % 32 === 0);
          (0, common_1.assert)(json.bits / 8 === json.entropy.length / 2);
          this.bits = json.bits;
          this.language = json.language;
          this.entropy = (0, utils_1.hexToBytes)(json.entropy);
          this.phrase = json.phrase;
          return this;
        }
        static fromJSON(json) {
          return new this().fromJSON(json);
        }
        getSize() {
          let size = 0;
          size += 3;
          size += this.getEntropy().length;
          return size;
        }
        toString() {
          return this.getPhrase();
        }
        inspect() {
          return `<Mnemonic: ${this.getPhrase()}>`;
        }
        static isMnemonic(obj) {
          return obj instanceof _Mnemonic;
        }
      };
      var WordList = class {
        constructor(words) {
          this.words = words;
          this.map = /* @__PURE__ */ Object.create(null);
          for (let i = 0; i < words.length; i++) {
            const word = words[i];
            this.map[word] = i;
          }
        }
      };
      exports.default = Mnemonic2;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/utils/util.js
  var require_util = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/utils/util.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.parsePath = exports.fromRev = exports.revHex = exports.time = exports.date = exports.ms = exports.now = exports.bench = void 0;
      var utils_1 = require_utils2();
      function bench(time2) {
        if (!process.hrtime) {
          const now2 = Date.now();
          if (time2) {
            const [hi2, lo2] = time2;
            const start = hi2 * 1e3 + lo2 / 1e6;
            return now2 - start;
          }
          const ms2 = now2 % 1e3;
          const hi = (now2 - ms2) / 1e3;
          const lo = ms2 * 1e6;
          return [hi, lo];
        }
        if (time2) {
          const [hi, lo] = process.hrtime(time2);
          return hi * 1e3 + lo / 1e6;
        }
        return process.hrtime();
      }
      exports.bench = bench;
      function now() {
        return Math.floor(Date.now() / 1e3);
      }
      exports.now = now;
      function ms() {
        return Number(Date.now());
      }
      exports.ms = ms;
      function date(time2) {
        if (time2 === void 0)
          time2 = now();
        return new Date(time2 * 1e3).toISOString().slice(0, -5) + "Z";
      }
      exports.date = date;
      function time(date2) {
        if (date2 == null)
          return now();
        return Number(new Date(date2)) / 1e3 | 0;
      }
      exports.time = time;
      function revHex(buf) {
        return (0, utils_1.bytesToHex)(buf.reverse());
      }
      exports.revHex = revHex;
      function fromRev(str) {
        if ((str.length & 1) !== 0)
          throw new Error("Invalid rev");
        return (0, utils_1.hexToBytes)(str).reverse();
      }
      exports.fromRev = fromRev;
      function parsePath(path) {
        const parts = path.split("/");
        const root = parts[0];
        if (root !== "m" && root !== "M" && root !== "m'" && root !== "M'") {
          throw new Error("Invalid path root.");
        }
        const result = [];
        for (let i = 1; i < parts.length; i++) {
          let part = parts[i];
          if (part.length > 10)
            throw new Error("Path index too large.");
          if (!/^\d+$/.test(part))
            throw new Error("Path index is non-numeric.");
          let index = parseInt(part, 10);
          if (index >>> 0 !== index)
            throw new Error("Path index out of range.");
          result.push(index);
        }
        return result;
      }
      exports.parsePath = parsePath;
    }
  });

  // node_modules/tidecoinjs-lib/src/networks.js
  var require_networks = __commonJS({
    "node_modules/tidecoinjs-lib/src/networks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.TIDECOIN = void 0;
      exports.TIDECOIN = {
        messagePrefix: "Tidecoin Signed Message:\n",
        bech32: "tbc",
        bip32: {
          public: 124300510,
          private: 124321457
        },
        pubKeyHash: 33,
        scriptHash: 65,
        wif: 176
      };
    }
  });

  // node_modules/tidecoinjs-lib/src/bip66.js
  var require_bip66 = __commonJS({
    "node_modules/tidecoinjs-lib/src/bip66.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = exports.check = void 0;
      function check(buffer) {
        if (buffer.length < 8)
          return false;
        if (buffer.length > 72)
          return false;
        if (buffer[0] !== 48)
          return false;
        if (buffer[1] !== buffer.length - 2)
          return false;
        if (buffer[2] !== 2)
          return false;
        const lenR = buffer[3];
        if (lenR === 0)
          return false;
        if (5 + lenR >= buffer.length)
          return false;
        if (buffer[4 + lenR] !== 2)
          return false;
        const lenS = buffer[5 + lenR];
        if (lenS === 0)
          return false;
        if (6 + lenR + lenS !== buffer.length)
          return false;
        if (buffer[4] & 128)
          return false;
        if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
          return false;
        if (buffer[lenR + 6] & 128)
          return false;
        if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
          return false;
        return true;
      }
      exports.check = check;
      function decode(buffer) {
        if (buffer.length < 8)
          throw new Error("DER sequence length is too short");
        if (buffer.length > 72)
          throw new Error("DER sequence length is too long");
        if (buffer[0] !== 48)
          throw new Error("Expected DER sequence");
        if (buffer[1] !== buffer.length - 2)
          throw new Error("DER sequence length is invalid");
        if (buffer[2] !== 2)
          throw new Error("Expected DER integer");
        const lenR = buffer[3];
        if (lenR === 0)
          throw new Error("R length is zero");
        if (5 + lenR >= buffer.length)
          throw new Error("R length is too long");
        if (buffer[4 + lenR] !== 2)
          throw new Error("Expected DER integer (2)");
        const lenS = buffer[5 + lenR];
        if (lenS === 0)
          throw new Error("S length is zero");
        if (6 + lenR + lenS !== buffer.length)
          throw new Error("S length is invalid");
        if (buffer[4] & 128)
          throw new Error("R value is negative");
        if (lenR > 1 && buffer[4] === 0 && !(buffer[5] & 128))
          throw new Error("R value excessively padded");
        if (buffer[lenR + 6] & 128)
          throw new Error("S value is negative");
        if (lenS > 1 && buffer[lenR + 6] === 0 && !(buffer[lenR + 7] & 128))
          throw new Error("S value excessively padded");
        return {
          r: buffer.slice(4, 4 + lenR),
          s: buffer.slice(6 + lenR)
        };
      }
      exports.decode = decode;
      function encode(r, s) {
        const lenR = r.length;
        const lenS = s.length;
        if (lenR > 1 && r[0] === 0 && !(r[1] & 128))
          throw new Error("R value excessively padded");
        if (lenS > 1 && s[0] === 0 && !(s[1] & 128))
          throw new Error("S value excessively padded");
        const signature = Buffer.allocUnsafe(6 + lenR + lenS);
        signature[0] = 48;
        signature[1] = signature.length - 2;
        signature[2] = 2;
        signature[3] = r.length;
        r.copy(signature, 4);
        signature[4 + lenR] = 2;
        signature[5 + lenR] = s.length;
        s.copy(signature, 6 + lenR);
        return signature;
      }
      exports.encode = encode;
    }
  });

  // node_modules/tidecoinjs-lib/src/ops.js
  var require_ops = __commonJS({
    "node_modules/tidecoinjs-lib/src/ops.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.REVERSE_OPS = exports.OPS = void 0;
      var OPS = {
        OP_FALSE: 0,
        OP_0: 0,
        OP_PUSHDATA1: 76,
        OP_PUSHDATA2: 77,
        OP_PUSHDATA4: 78,
        OP_1NEGATE: 79,
        OP_RESERVED: 80,
        OP_TRUE: 81,
        OP_1: 81,
        OP_2: 82,
        OP_3: 83,
        OP_4: 84,
        OP_5: 85,
        OP_6: 86,
        OP_7: 87,
        OP_8: 88,
        OP_9: 89,
        OP_10: 90,
        OP_11: 91,
        OP_12: 92,
        OP_13: 93,
        OP_14: 94,
        OP_15: 95,
        OP_16: 96,
        OP_NOP: 97,
        OP_VER: 98,
        OP_IF: 99,
        OP_NOTIF: 100,
        OP_VERIF: 101,
        OP_VERNOTIF: 102,
        OP_ELSE: 103,
        OP_ENDIF: 104,
        OP_VERIFY: 105,
        OP_RETURN: 106,
        OP_TOALTSTACK: 107,
        OP_FROMALTSTACK: 108,
        OP_2DROP: 109,
        OP_2DUP: 110,
        OP_3DUP: 111,
        OP_2OVER: 112,
        OP_2ROT: 113,
        OP_2SWAP: 114,
        OP_IFDUP: 115,
        OP_DEPTH: 116,
        OP_DROP: 117,
        OP_DUP: 118,
        OP_NIP: 119,
        OP_OVER: 120,
        OP_PICK: 121,
        OP_ROLL: 122,
        OP_ROT: 123,
        OP_SWAP: 124,
        OP_TUCK: 125,
        OP_CAT: 126,
        OP_SUBSTR: 127,
        OP_LEFT: 128,
        OP_RIGHT: 129,
        OP_SIZE: 130,
        OP_INVERT: 131,
        OP_AND: 132,
        OP_OR: 133,
        OP_XOR: 134,
        OP_EQUAL: 135,
        OP_EQUALVERIFY: 136,
        OP_RESERVED1: 137,
        OP_RESERVED2: 138,
        OP_1ADD: 139,
        OP_1SUB: 140,
        OP_2MUL: 141,
        OP_2DIV: 142,
        OP_NEGATE: 143,
        OP_ABS: 144,
        OP_NOT: 145,
        OP_0NOTEQUAL: 146,
        OP_ADD: 147,
        OP_SUB: 148,
        OP_MUL: 149,
        OP_DIV: 150,
        OP_MOD: 151,
        OP_LSHIFT: 152,
        OP_RSHIFT: 153,
        OP_BOOLAND: 154,
        OP_BOOLOR: 155,
        OP_NUMEQUAL: 156,
        OP_NUMEQUALVERIFY: 157,
        OP_NUMNOTEQUAL: 158,
        OP_LESSTHAN: 159,
        OP_GREATERTHAN: 160,
        OP_LESSTHANOREQUAL: 161,
        OP_GREATERTHANOREQUAL: 162,
        OP_MIN: 163,
        OP_MAX: 164,
        OP_WITHIN: 165,
        OP_RIPEMD160: 166,
        OP_SHA1: 167,
        OP_SHA256: 168,
        OP_HASH160: 169,
        OP_HASH256: 170,
        OP_CODESEPARATOR: 171,
        OP_CHECKSIG: 172,
        OP_CHECKSIGVERIFY: 173,
        OP_CHECKMULTISIG: 174,
        OP_CHECKMULTISIGVERIFY: 175,
        OP_NOP1: 176,
        OP_NOP2: 177,
        OP_CHECKLOCKTIMEVERIFY: 177,
        OP_NOP3: 178,
        OP_CHECKSEQUENCEVERIFY: 178,
        OP_NOP4: 179,
        OP_NOP5: 180,
        OP_NOP6: 181,
        OP_NOP7: 182,
        OP_NOP8: 183,
        OP_NOP9: 184,
        OP_NOP10: 185,
        OP_CHECKSIGADD: 186,
        OP_PUBKEYHASH: 253,
        OP_PUBKEY: 254,
        OP_INVALIDOPCODE: 255
      };
      exports.OPS = OPS;
      var REVERSE_OPS = {};
      exports.REVERSE_OPS = REVERSE_OPS;
      for (const op of Object.keys(OPS)) {
        const code = OPS[op];
        REVERSE_OPS[code] = op;
      }
    }
  });

  // node_modules/tidecoinjs-lib/src/push_data.js
  var require_push_data = __commonJS({
    "node_modules/tidecoinjs-lib/src/push_data.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.decode = exports.encode = exports.encodingLength = void 0;
      var ops_1 = require_ops();
      function encodingLength(i) {
        return i < ops_1.OPS.OP_PUSHDATA1 ? 1 : i <= 255 ? 2 : i <= 65535 ? 3 : 5;
      }
      exports.encodingLength = encodingLength;
      function encode(buffer, num, offset) {
        const size = encodingLength(num);
        if (size === 1) {
          buffer.writeUInt8(num, offset);
        } else if (size === 2) {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA1, offset);
          buffer.writeUInt8(num, offset + 1);
        } else if (size === 3) {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA2, offset);
          buffer.writeUInt16LE(num, offset + 1);
        } else {
          buffer.writeUInt8(ops_1.OPS.OP_PUSHDATA4, offset);
          buffer.writeUInt32LE(num, offset + 1);
        }
        return size;
      }
      exports.encode = encode;
      function decode(buffer, offset) {
        const opcode = buffer.readUInt8(offset);
        let num;
        let size;
        if (opcode < ops_1.OPS.OP_PUSHDATA1) {
          num = opcode;
          size = 1;
        } else if (opcode === ops_1.OPS.OP_PUSHDATA1) {
          if (offset + 2 > buffer.length)
            return null;
          num = buffer.readUInt8(offset + 1);
          size = 2;
        } else if (opcode === ops_1.OPS.OP_PUSHDATA2) {
          if (offset + 3 > buffer.length)
            return null;
          num = buffer.readUInt16LE(offset + 1);
          size = 3;
        } else {
          if (offset + 5 > buffer.length)
            return null;
          if (opcode !== ops_1.OPS.OP_PUSHDATA4)
            throw new Error("Unexpected opcode");
          num = buffer.readUInt32LE(offset + 1);
          size = 5;
        }
        return {
          opcode,
          number: num,
          size
        };
      }
      exports.decode = decode;
    }
  });

  // node_modules/tidecoinjs-lib/src/script_number.js
  var require_script_number = __commonJS({
    "node_modules/tidecoinjs-lib/src/script_number.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = void 0;
      function decode(buffer, maxLength, minimal) {
        maxLength = maxLength || 4;
        minimal = minimal === void 0 ? true : minimal;
        const length = buffer.length;
        if (length === 0)
          return 0;
        if (length > maxLength)
          throw new TypeError("Script number overflow");
        if (minimal) {
          if ((buffer[length - 1] & 127) === 0) {
            if (length <= 1 || (buffer[length - 2] & 128) === 0)
              throw new Error("Non-minimally encoded script number");
          }
        }
        if (length === 5) {
          const a = buffer.readUInt32LE(0);
          const b = buffer.readUInt8(4);
          if (b & 128)
            return -((b & ~128) * 4294967296 + a);
          return b * 4294967296 + a;
        }
        let result = 0;
        for (let i = 0; i < length; ++i) {
          result |= buffer[i] << 8 * i;
        }
        if (buffer[length - 1] & 128)
          return -(result & ~(128 << 8 * (length - 1)));
        return result;
      }
      exports.decode = decode;
      function scriptNumSize(i) {
        return i > 2147483647 ? 5 : i > 8388607 ? 4 : i > 32767 ? 3 : i > 127 ? 2 : i > 0 ? 1 : 0;
      }
      function encode(_number) {
        let value = Math.abs(_number);
        const size = scriptNumSize(value);
        const buffer = Buffer.allocUnsafe(size);
        const negative = _number < 0;
        for (let i = 0; i < size; ++i) {
          buffer.writeUInt8(value & 255, i);
          value >>= 8;
        }
        if (buffer[size - 1] & 128) {
          buffer.writeUInt8(negative ? 128 : 0, size - 1);
        } else if (negative) {
          buffer[size - 1] |= 128;
        }
        return buffer;
      }
      exports.encode = encode;
    }
  });

  // node_modules/typeforce/native.js
  var require_native = __commonJS({
    "node_modules/typeforce/native.js"(exports, module) {
      var types = {
        Array: function(value) {
          return value !== null && value !== void 0 && value.constructor === Array;
        },
        Boolean: function(value) {
          return typeof value === "boolean";
        },
        Function: function(value) {
          return typeof value === "function";
        },
        Nil: function(value) {
          return value === void 0 || value === null;
        },
        Number: function(value) {
          return typeof value === "number";
        },
        Object: function(value) {
          return typeof value === "object";
        },
        String: function(value) {
          return typeof value === "string";
        },
        "": function() {
          return true;
        }
      };
      types.Null = types.Nil;
      for (typeName in types) {
        types[typeName].toJSON = function(t) {
          return t;
        }.bind(null, typeName);
      }
      var typeName;
      module.exports = types;
    }
  });

  // node_modules/typeforce/errors.js
  var require_errors2 = __commonJS({
    "node_modules/typeforce/errors.js"(exports, module) {
      var native = require_native();
      function getTypeName(fn) {
        return fn.name || fn.toString().match(/function (.*?)\s*\(/)[1];
      }
      function getValueTypeName(value) {
        return native.Nil(value) ? "" : getTypeName(value.constructor);
      }
      function getValue(value) {
        if (native.Function(value))
          return "";
        if (native.String(value))
          return JSON.stringify(value);
        if (value && native.Object(value))
          return "";
        return value;
      }
      function captureStackTrace(e, t) {
        if (Error.captureStackTrace) {
          Error.captureStackTrace(e, t);
        }
      }
      function tfJSON(type) {
        if (native.Function(type))
          return type.toJSON ? type.toJSON() : getTypeName(type);
        if (native.Array(type))
          return "Array";
        if (type && native.Object(type))
          return "Object";
        return type !== void 0 ? type : "";
      }
      function tfErrorString(type, value, valueTypeName) {
        var valueJson = getValue(value);
        return "Expected " + tfJSON(type) + ", got" + (valueTypeName !== "" ? " " + valueTypeName : "") + (valueJson !== "" ? " " + valueJson : "");
      }
      function TfTypeError(type, value, valueTypeName) {
        valueTypeName = valueTypeName || getValueTypeName(value);
        this.message = tfErrorString(type, value, valueTypeName);
        captureStackTrace(this, TfTypeError);
        this.__type = type;
        this.__value = value;
        this.__valueTypeName = valueTypeName;
      }
      TfTypeError.prototype = Object.create(Error.prototype);
      TfTypeError.prototype.constructor = TfTypeError;
      function tfPropertyErrorString(type, label, name, value, valueTypeName) {
        var description = '" of type ';
        if (label === "key")
          description = '" with key type ';
        return tfErrorString('property "' + tfJSON(name) + description + tfJSON(type), value, valueTypeName);
      }
      function TfPropertyTypeError(type, property, label, value, valueTypeName) {
        if (type) {
          valueTypeName = valueTypeName || getValueTypeName(value);
          this.message = tfPropertyErrorString(type, label, property, value, valueTypeName);
        } else {
          this.message = 'Unexpected property "' + property + '"';
        }
        captureStackTrace(this, TfTypeError);
        this.__label = label;
        this.__property = property;
        this.__type = type;
        this.__value = value;
        this.__valueTypeName = valueTypeName;
      }
      TfPropertyTypeError.prototype = Object.create(Error.prototype);
      TfPropertyTypeError.prototype.constructor = TfTypeError;
      function tfCustomError(expected, actual) {
        return new TfTypeError(expected, {}, actual);
      }
      function tfSubError(e, property, label) {
        if (e instanceof TfPropertyTypeError) {
          property = property + "." + e.__property;
          e = new TfPropertyTypeError(
            e.__type,
            property,
            e.__label,
            e.__value,
            e.__valueTypeName
          );
        } else if (e instanceof TfTypeError) {
          e = new TfPropertyTypeError(
            e.__type,
            property,
            label,
            e.__value,
            e.__valueTypeName
          );
        }
        captureStackTrace(e);
        return e;
      }
      module.exports = {
        TfTypeError,
        TfPropertyTypeError,
        tfCustomError,
        tfSubError,
        tfJSON,
        getValueTypeName
      };
    }
  });

  // node_modules/typeforce/extra.js
  var require_extra = __commonJS({
    "node_modules/typeforce/extra.js"(exports, module) {
      var NATIVE = require_native();
      var ERRORS = require_errors2();
      function _Buffer(value) {
        return Buffer.isBuffer(value);
      }
      function Hex(value) {
        return typeof value === "string" && /^([0-9a-f]{2})+$/i.test(value);
      }
      function _LengthN(type, length) {
        var name = type.toJSON();
        function Length(value) {
          if (!type(value))
            return false;
          if (value.length === length)
            return true;
          throw ERRORS.tfCustomError(name + "(Length: " + length + ")", name + "(Length: " + value.length + ")");
        }
        Length.toJSON = function() {
          return name;
        };
        return Length;
      }
      var _ArrayN = _LengthN.bind(null, NATIVE.Array);
      var _BufferN = _LengthN.bind(null, _Buffer);
      var _HexN = _LengthN.bind(null, Hex);
      var _StringN = _LengthN.bind(null, NATIVE.String);
      function Range(a, b, f) {
        f = f || NATIVE.Number;
        function _range(value, strict) {
          return f(value, strict) && value > a && value < b;
        }
        _range.toJSON = function() {
          return `${f.toJSON()} between [${a}, ${b}]`;
        };
        return _range;
      }
      var INT53_MAX = Math.pow(2, 53) - 1;
      function Finite(value) {
        return typeof value === "number" && isFinite(value);
      }
      function Int8(value) {
        return value << 24 >> 24 === value;
      }
      function Int16(value) {
        return value << 16 >> 16 === value;
      }
      function Int32(value) {
        return (value | 0) === value;
      }
      function Int53(value) {
        return typeof value === "number" && value >= -INT53_MAX && value <= INT53_MAX && Math.floor(value) === value;
      }
      function UInt8(value) {
        return (value & 255) === value;
      }
      function UInt16(value) {
        return (value & 65535) === value;
      }
      function UInt32(value) {
        return value >>> 0 === value;
      }
      function UInt53(value) {
        return typeof value === "number" && value >= 0 && value <= INT53_MAX && Math.floor(value) === value;
      }
      var types = {
        ArrayN: _ArrayN,
        Buffer: _Buffer,
        BufferN: _BufferN,
        Finite,
        Hex,
        HexN: _HexN,
        Int8,
        Int16,
        Int32,
        Int53,
        Range,
        StringN: _StringN,
        UInt8,
        UInt16,
        UInt32,
        UInt53
      };
      for (typeName in types) {
        types[typeName].toJSON = function(t) {
          return t;
        }.bind(null, typeName);
      }
      var typeName;
      module.exports = types;
    }
  });

  // node_modules/typeforce/index.js
  var require_typeforce = __commonJS({
    "node_modules/typeforce/index.js"(exports, module) {
      var ERRORS = require_errors2();
      var NATIVE = require_native();
      var tfJSON = ERRORS.tfJSON;
      var TfTypeError = ERRORS.TfTypeError;
      var TfPropertyTypeError = ERRORS.TfPropertyTypeError;
      var tfSubError = ERRORS.tfSubError;
      var getValueTypeName = ERRORS.getValueTypeName;
      var TYPES = {
        arrayOf: function arrayOf(type, options) {
          type = compile(type);
          options = options || {};
          function _arrayOf(array, strict) {
            if (!NATIVE.Array(array))
              return false;
            if (NATIVE.Nil(array))
              return false;
            if (options.minLength !== void 0 && array.length < options.minLength)
              return false;
            if (options.maxLength !== void 0 && array.length > options.maxLength)
              return false;
            if (options.length !== void 0 && array.length !== options.length)
              return false;
            return array.every(function(value, i) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                throw tfSubError(e, i);
              }
            });
          }
          _arrayOf.toJSON = function() {
            var str = "[" + tfJSON(type) + "]";
            if (options.length !== void 0) {
              str += "{" + options.length + "}";
            } else if (options.minLength !== void 0 || options.maxLength !== void 0) {
              str += "{" + (options.minLength === void 0 ? 0 : options.minLength) + "," + (options.maxLength === void 0 ? Infinity : options.maxLength) + "}";
            }
            return str;
          };
          return _arrayOf;
        },
        maybe: function maybe(type) {
          type = compile(type);
          function _maybe(value, strict) {
            return NATIVE.Nil(value) || type(value, strict, maybe);
          }
          _maybe.toJSON = function() {
            return "?" + tfJSON(type);
          };
          return _maybe;
        },
        map: function map(propertyType, propertyKeyType) {
          propertyType = compile(propertyType);
          if (propertyKeyType)
            propertyKeyType = compile(propertyKeyType);
          function _map(value, strict) {
            if (!NATIVE.Object(value))
              return false;
            if (NATIVE.Nil(value))
              return false;
            for (var propertyName in value) {
              try {
                if (propertyKeyType) {
                  typeforce(propertyKeyType, propertyName, strict);
                }
              } catch (e) {
                throw tfSubError(e, propertyName, "key");
              }
              try {
                var propertyValue = value[propertyName];
                typeforce(propertyType, propertyValue, strict);
              } catch (e) {
                throw tfSubError(e, propertyName);
              }
            }
            return true;
          }
          if (propertyKeyType) {
            _map.toJSON = function() {
              return "{" + tfJSON(propertyKeyType) + ": " + tfJSON(propertyType) + "}";
            };
          } else {
            _map.toJSON = function() {
              return "{" + tfJSON(propertyType) + "}";
            };
          }
          return _map;
        },
        object: function object(uncompiled) {
          var type = {};
          for (var typePropertyName in uncompiled) {
            type[typePropertyName] = compile(uncompiled[typePropertyName]);
          }
          function _object(value, strict) {
            if (!NATIVE.Object(value))
              return false;
            if (NATIVE.Nil(value))
              return false;
            var propertyName;
            try {
              for (propertyName in type) {
                var propertyType = type[propertyName];
                var propertyValue = value[propertyName];
                typeforce(propertyType, propertyValue, strict);
              }
            } catch (e) {
              throw tfSubError(e, propertyName);
            }
            if (strict) {
              for (propertyName in value) {
                if (type[propertyName])
                  continue;
                throw new TfPropertyTypeError(void 0, propertyName);
              }
            }
            return true;
          }
          _object.toJSON = function() {
            return tfJSON(type);
          };
          return _object;
        },
        anyOf: function anyOf() {
          var types = [].slice.call(arguments).map(compile);
          function _anyOf(value, strict) {
            return types.some(function(type) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                return false;
              }
            });
          }
          _anyOf.toJSON = function() {
            return types.map(tfJSON).join("|");
          };
          return _anyOf;
        },
        allOf: function allOf() {
          var types = [].slice.call(arguments).map(compile);
          function _allOf(value, strict) {
            return types.every(function(type) {
              try {
                return typeforce(type, value, strict);
              } catch (e) {
                return false;
              }
            });
          }
          _allOf.toJSON = function() {
            return types.map(tfJSON).join(" & ");
          };
          return _allOf;
        },
        quacksLike: function quacksLike(type) {
          function _quacksLike(value) {
            return type === getValueTypeName(value);
          }
          _quacksLike.toJSON = function() {
            return type;
          };
          return _quacksLike;
        },
        tuple: function tuple() {
          var types = [].slice.call(arguments).map(compile);
          function _tuple(values, strict) {
            if (NATIVE.Nil(values))
              return false;
            if (NATIVE.Nil(values.length))
              return false;
            if (strict && values.length !== types.length)
              return false;
            return types.every(function(type, i) {
              try {
                return typeforce(type, values[i], strict);
              } catch (e) {
                throw tfSubError(e, i);
              }
            });
          }
          _tuple.toJSON = function() {
            return "(" + types.map(tfJSON).join(", ") + ")";
          };
          return _tuple;
        },
        value: function value(expected) {
          function _value(actual) {
            return actual === expected;
          }
          _value.toJSON = function() {
            return expected;
          };
          return _value;
        }
      };
      TYPES.oneOf = TYPES.anyOf;
      function compile(type) {
        if (NATIVE.String(type)) {
          if (type[0] === "?")
            return TYPES.maybe(type.slice(1));
          return NATIVE[type] || TYPES.quacksLike(type);
        } else if (type && NATIVE.Object(type)) {
          if (NATIVE.Array(type)) {
            if (type.length !== 1)
              throw new TypeError("Expected compile() parameter of type Array of length 1");
            return TYPES.arrayOf(type[0]);
          }
          return TYPES.object(type);
        } else if (NATIVE.Function(type)) {
          return type;
        }
        return TYPES.value(type);
      }
      function typeforce(type, value, strict, surrogate) {
        if (NATIVE.Function(type)) {
          if (type(value, strict))
            return true;
          throw new TfTypeError(surrogate || type, value);
        }
        return typeforce(compile(type), value, strict);
      }
      for (typeName in NATIVE) {
        typeforce[typeName] = NATIVE[typeName];
      }
      var typeName;
      for (typeName in TYPES) {
        typeforce[typeName] = TYPES[typeName];
      }
      var EXTRA = require_extra();
      for (typeName in EXTRA) {
        typeforce[typeName] = EXTRA[typeName];
      }
      typeforce.compile = compile;
      typeforce.TfTypeError = TfTypeError;
      typeforce.TfPropertyTypeError = TfPropertyTypeError;
      module.exports = typeforce;
    }
  });

  // node_modules/tidecoinjs-lib/src/types.js
  var require_types2 = __commonJS({
    "node_modules/tidecoinjs-lib/src/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.oneOf = exports.Null = exports.BufferN = exports.Function = exports.UInt32 = exports.UInt8 = exports.tuple = exports.maybe = exports.Hex = exports.Buffer = exports.String = exports.Boolean = exports.Array = exports.Number = exports.Hash256bit = exports.Hash160bit = exports.Buffer256bit = exports.Network = exports.ECPoint = exports.Satoshi = exports.Signer = exports.BIP32Path = exports.UInt31 = exports.typeforce = void 0;
      exports.typeforce = require_typeforce();
      var UINT31_MAX = Math.pow(2, 31) - 1;
      function UInt31(value) {
        return exports.typeforce.UInt32(value) && value <= UINT31_MAX;
      }
      exports.UInt31 = UInt31;
      function BIP32Path(value) {
        return exports.typeforce.String(value) && !!value.match(/^(m\/)?(\d+'?\/)*\d+'?$/);
      }
      exports.BIP32Path = BIP32Path;
      BIP32Path.toJSON = () => {
        return "BIP32 derivation path";
      };
      function Signer(obj) {
        return (exports.typeforce.Buffer(obj.publicKey) || typeof obj.getPublicKey === "function") && typeof obj.sign === "function";
      }
      exports.Signer = Signer;
      var SATOSHI_MAX = 21 * 1e14;
      function Satoshi(value) {
        return exports.typeforce.UInt53(value) && value <= SATOSHI_MAX;
      }
      exports.Satoshi = Satoshi;
      exports.ECPoint = exports.typeforce.quacksLike("Point");
      exports.Network = exports.typeforce.compile({
        messagePrefix: exports.typeforce.oneOf(
          exports.typeforce.Buffer,
          exports.typeforce.String
        ),
        bip32: {
          public: exports.typeforce.UInt32,
          private: exports.typeforce.UInt32
        },
        pubKeyHash: exports.typeforce.UInt8,
        scriptHash: exports.typeforce.UInt8,
        wif: exports.typeforce.UInt8
      });
      exports.Buffer256bit = exports.typeforce.BufferN(32);
      exports.Hash160bit = exports.typeforce.BufferN(20);
      exports.Hash256bit = exports.typeforce.BufferN(32);
      exports.Number = exports.typeforce.Number;
      exports.Array = exports.typeforce.Array;
      exports.Boolean = exports.typeforce.Boolean;
      exports.String = exports.typeforce.String;
      exports.Buffer = exports.typeforce.Buffer;
      exports.Hex = exports.typeforce.Hex;
      exports.maybe = exports.typeforce.maybe;
      exports.tuple = exports.typeforce.tuple;
      exports.UInt8 = exports.typeforce.UInt8;
      exports.UInt32 = exports.typeforce.UInt32;
      exports.Function = exports.typeforce.Function;
      exports.BufferN = exports.typeforce.BufferN;
      exports.Null = exports.typeforce.Null;
      exports.oneOf = exports.typeforce.oneOf;
    }
  });

  // node_modules/tidecoinjs-lib/src/script_signature.js
  var require_script_signature = __commonJS({
    "node_modules/tidecoinjs-lib/src/script_signature.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encode = exports.decode = void 0;
      var types = require_types2();
      var { typeforce } = types;
      function decode(buffer) {
        const hashType = buffer.readUInt8(buffer.length - 1);
        const hashTypeMod = hashType & ~128;
        if (hashTypeMod <= 0 || hashTypeMod >= 4)
          throw new Error("Invalid hashType " + hashType);
        const signature = buffer.slice(0, -1);
        return { signature, hashType };
      }
      exports.decode = decode;
      function encode(signature, hashType) {
        typeforce(
          {
            signature: types.Buffer,
            hashType: types.UInt8
          },
          { signature, hashType }
        );
        const hashTypeMod = hashType & ~128;
        if (hashTypeMod <= 0 || hashTypeMod >= 4)
          throw new Error("Invalid hashType " + hashType);
        const hashTypeBuffer = Buffer.allocUnsafe(1);
        hashTypeBuffer.writeUInt8(hashType, 0);
        return Buffer.concat([signature, hashTypeBuffer]);
      }
      exports.encode = encode;
    }
  });

  // node_modules/tidecoinjs-lib/src/script.js
  var require_script = __commonJS({
    "node_modules/tidecoinjs-lib/src/script.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.signature = exports.number = exports.isCanonicalScriptSignature = exports.isDefinedHashType = exports.isCanonicalPubKey = exports.toStack = exports.fromASM = exports.toASM = exports.decompile = exports.compile = exports.countNonPushOnlyOPs = exports.isPushOnly = exports.OPS = void 0;
      var bip66 = require_bip66();
      var ops_1 = require_ops();
      Object.defineProperty(exports, "OPS", {
        enumerable: true,
        get: function() {
          return ops_1.OPS;
        }
      });
      var pushdata = require_push_data();
      var scriptNumber = require_script_number();
      var scriptSignature = require_script_signature();
      var types = require_types2();
      var { typeforce } = types;
      var OP_INT_BASE = ops_1.OPS.OP_RESERVED;
      function isOPInt(value) {
        return types.Number(value) && (value === ops_1.OPS.OP_0 || value >= ops_1.OPS.OP_1 && value <= ops_1.OPS.OP_16 || value === ops_1.OPS.OP_1NEGATE);
      }
      function isPushOnlyChunk(value) {
        return types.Buffer(value) || isOPInt(value);
      }
      function isPushOnly(value) {
        return types.Array(value) && value.every(isPushOnlyChunk);
      }
      exports.isPushOnly = isPushOnly;
      function countNonPushOnlyOPs(value) {
        return value.length - value.filter(isPushOnlyChunk).length;
      }
      exports.countNonPushOnlyOPs = countNonPushOnlyOPs;
      function asMinimalOP(buffer) {
        if (buffer.length === 0)
          return ops_1.OPS.OP_0;
        if (buffer.length !== 1)
          return;
        if (buffer[0] >= 1 && buffer[0] <= 16)
          return OP_INT_BASE + buffer[0];
        if (buffer[0] === 129)
          return ops_1.OPS.OP_1NEGATE;
      }
      function chunksIsBuffer(buf) {
        return Buffer.isBuffer(buf);
      }
      function chunksIsArray(buf) {
        return types.Array(buf);
      }
      function singleChunkIsBuffer(buf) {
        return Buffer.isBuffer(buf);
      }
      function compile(chunks) {
        if (chunksIsBuffer(chunks))
          return chunks;
        typeforce(types.Array, chunks);
        const bufferSize = chunks.reduce((accum, chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            if (chunk.length === 1 && asMinimalOP(chunk) !== void 0) {
              return accum + 1;
            }
            return accum + pushdata.encodingLength(chunk.length) + chunk.length;
          }
          return accum + 1;
        }, 0);
        const buffer = Buffer.allocUnsafe(bufferSize);
        let offset = 0;
        chunks.forEach((chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            const opcode = asMinimalOP(chunk);
            if (opcode !== void 0) {
              buffer.writeUInt8(opcode, offset);
              offset += 1;
              return;
            }
            offset += pushdata.encode(buffer, chunk.length, offset);
            chunk.copy(buffer, offset);
            offset += chunk.length;
          } else {
            buffer.writeUInt8(chunk, offset);
            offset += 1;
          }
        });
        if (offset !== buffer.length)
          throw new Error("Could not decode chunks");
        return buffer;
      }
      exports.compile = compile;
      function decompile(buffer) {
        if (chunksIsArray(buffer))
          return buffer;
        typeforce(types.Buffer, buffer);
        const chunks = [];
        let i = 0;
        while (i < buffer.length) {
          const opcode = buffer[i];
          if (opcode > ops_1.OPS.OP_0 && opcode <= ops_1.OPS.OP_PUSHDATA4) {
            const d = pushdata.decode(buffer, i);
            if (d === null)
              return null;
            i += d.size;
            if (i + d.number > buffer.length)
              return null;
            const data = buffer.slice(i, i + d.number);
            i += d.number;
            const op = asMinimalOP(data);
            if (op !== void 0) {
              chunks.push(op);
            } else {
              chunks.push(data);
            }
          } else {
            chunks.push(opcode);
            i += 1;
          }
        }
        return chunks;
      }
      exports.decompile = decompile;
      function toASM(chunks) {
        if (chunksIsBuffer(chunks)) {
          chunks = decompile(chunks);
        }
        return chunks.map((chunk) => {
          if (singleChunkIsBuffer(chunk)) {
            const op = asMinimalOP(chunk);
            if (op === void 0)
              return chunk.toString("hex");
            chunk = op;
          }
          return ops_1.REVERSE_OPS[chunk];
        }).join(" ");
      }
      exports.toASM = toASM;
      function fromASM(asm) {
        typeforce(types.String, asm);
        return compile(
          asm.split(" ").map((chunkStr) => {
            if (ops_1.OPS[chunkStr] !== void 0)
              return ops_1.OPS[chunkStr];
            typeforce(types.Hex, chunkStr);
            return Buffer.from(chunkStr, "hex");
          })
        );
      }
      exports.fromASM = fromASM;
      function toStack(chunks) {
        chunks = decompile(chunks);
        typeforce(isPushOnly, chunks);
        return chunks.map((op) => {
          if (singleChunkIsBuffer(op))
            return op;
          if (op === ops_1.OPS.OP_0)
            return Buffer.allocUnsafe(0);
          return scriptNumber.encode(op - OP_INT_BASE);
        });
      }
      exports.toStack = toStack;
      function isCanonicalPubKey(buffer) {
        return Buffer.isBuffer(buffer);
      }
      exports.isCanonicalPubKey = isCanonicalPubKey;
      function isDefinedHashType(hashType) {
        const hashTypeMod = hashType & ~128;
        return hashTypeMod > 0 && hashTypeMod < 4;
      }
      exports.isDefinedHashType = isDefinedHashType;
      function isCanonicalScriptSignature(buffer) {
        if (!Buffer.isBuffer(buffer))
          return false;
        if (!isDefinedHashType(buffer[buffer.length - 1]))
          return false;
        return true;
        return bip66.check(buffer.slice(0, -1));
      }
      exports.isCanonicalScriptSignature = isCanonicalScriptSignature;
      exports.number = scriptNumber;
      exports.signature = scriptSignature;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/lazy.js
  var require_lazy = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/lazy.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.value = exports.prop = void 0;
      function prop(object, name, f) {
        Object.defineProperty(object, name, {
          configurable: true,
          enumerable: true,
          get() {
            const _value = f.call(this);
            this[name] = _value;
            return _value;
          },
          set(_value) {
            Object.defineProperty(this, name, {
              configurable: true,
              enumerable: true,
              value: _value,
              writable: true
            });
          }
        });
      }
      exports.prop = prop;
      function value(f) {
        let _value;
        return () => {
          if (_value !== void 0)
            return _value;
          _value = f();
          return _value;
        };
      }
      exports.value = value;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/embed.js
  var require_embed = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/embed.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2data = void 0;
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2data(a, opts) {
        if (!a.data && !a.output)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            data: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const network = a.network || networks_1.TIDECOIN;
        const o = { name: "embed", network };
        lazy.prop(o, "output", () => {
          if (!a.data)
            return;
          return bscript.compile([OPS.OP_RETURN].concat(a.data));
        });
        lazy.prop(o, "data", () => {
          if (!a.output)
            return;
          return bscript.decompile(a.output).slice(1);
        });
        if (opts.validate) {
          if (a.output) {
            const chunks = bscript.decompile(a.output);
            if (chunks[0] !== OPS.OP_RETURN)
              throw new TypeError("Output is invalid");
            if (!chunks.slice(1).every(types_1.typeforce.Buffer))
              throw new TypeError("Output is invalid");
            if (a.data && !stacksEqual(a.data, o.data))
              throw new TypeError("Data mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2data = p2data;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2ms.js
  var require_p2ms = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2ms.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2ms = void 0;
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      var OP_INT_BASE = OPS.OP_RESERVED;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2ms(a, opts) {
        if (!a.input && !a.output && !(a.pubkeys && a.m !== void 0) && !a.signatures)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        function isAcceptableSignature(x) {
          return bscript.isCanonicalScriptSignature(x) || (opts.allowIncomplete && x === OPS.OP_0) !== void 0;
        }
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            m: types_1.typeforce.maybe(types_1.typeforce.Number),
            n: types_1.typeforce.maybe(types_1.typeforce.Number),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            pubkeys: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.BufferN(898))
            ),
            signatures: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(isAcceptableSignature)
            ),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const network = a.network || networks_1.TIDECOIN;
        const o = { network };
        let chunks = [];
        let decoded = false;
        function decode(output) {
          if (decoded)
            return;
          decoded = true;
          chunks = bscript.decompile(output);
          o.m = chunks[0] - OP_INT_BASE;
          o.n = chunks[chunks.length - 2] - OP_INT_BASE;
          o.pubkeys = chunks.slice(1, -2);
        }
        lazy.prop(o, "output", () => {
          if (!a.m)
            return;
          if (!o.n)
            return;
          if (!a.pubkeys)
            return;
          return bscript.compile(
            [].concat(
              OP_INT_BASE + a.m,
              a.pubkeys,
              OP_INT_BASE + o.n,
              OPS.OP_CHECKMULTISIG
            )
          );
        });
        lazy.prop(o, "m", () => {
          if (!o.output)
            return;
          decode(o.output);
          return o.m;
        });
        lazy.prop(o, "n", () => {
          if (!o.pubkeys)
            return;
          return o.pubkeys.length;
        });
        lazy.prop(o, "pubkeys", () => {
          if (!a.output)
            return;
          decode(a.output);
          return o.pubkeys;
        });
        lazy.prop(o, "signatures", () => {
          if (!a.input)
            return;
          return bscript.decompile(a.input).slice(1);
        });
        lazy.prop(o, "input", () => {
          if (!a.signatures)
            return;
          return bscript.compile([OPS.OP_0].concat(a.signatures));
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        lazy.prop(o, "name", () => {
          if (!o.m || !o.n)
            return;
          return `p2ms(${o.m} of ${o.n})`;
        });
        if (opts.validate) {
          if (a.output) {
            decode(a.output);
            if (!types_1.typeforce.Number(chunks[0]))
              throw new TypeError("Output is invalid");
            if (!types_1.typeforce.Number(chunks[chunks.length - 2]))
              throw new TypeError("Output is invalid");
            if (chunks[chunks.length - 1] !== OPS.OP_CHECKMULTISIG)
              throw new TypeError("Output is invalid");
            if (o.m <= 0 || o.n > 16 || o.m > o.n || o.n !== chunks.length - 3)
              throw new TypeError("Output is invalid");
            if (!o.pubkeys.every((x) => Buffer.isBuffer(x)))
              throw new TypeError("Output is invalid");
            if (a.m !== void 0 && a.m !== o.m)
              throw new TypeError("m mismatch");
            if (a.n !== void 0 && a.n !== o.n)
              throw new TypeError("n mismatch");
            if (a.pubkeys && !stacksEqual(a.pubkeys, o.pubkeys))
              throw new TypeError("Pubkeys mismatch");
          }
          if (a.pubkeys) {
            if (a.n !== void 0 && a.n !== a.pubkeys.length)
              throw new TypeError("Pubkey count mismatch");
            o.n = a.pubkeys.length;
            if (o.n < o.m)
              throw new TypeError("Pubkey count cannot be less than m");
          }
          if (a.signatures) {
            if (a.signatures.length < o.m)
              throw new TypeError("Not enough signatures provided");
            if (a.signatures.length > o.m)
              throw new TypeError("Too many signatures provided");
          }
          if (a.input) {
            if (a.input[0] !== OPS.OP_0)
              throw new TypeError("Input is invalid");
            if (o.signatures.length === 0 || !o.signatures.every(isAcceptableSignature))
              throw new TypeError("Input has invalid signature(s)");
            if (a.signatures && !stacksEqual(a.signatures, o.signatures))
              throw new TypeError("Signature mismatch");
            if (a.m !== void 0 && a.m !== a.signatures.length)
              throw new TypeError("Signature count mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2ms = p2ms;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2pk.js
  var require_p2pk = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2pk.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2pk = void 0;
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var OPS = bscript.OPS;
      function p2pk(a, opts) {
        if (!a.input && !a.output && !a.pubkey && !a.input && !a.signature)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            pubkey: types_1.typeforce.maybe(types_1.typeforce.BufferN(898)),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const network = a.network || networks_1.TIDECOIN;
        const o = { name: "p2pk", network };
        lazy.prop(o, "output", () => {
          if (!a.pubkey)
            return;
          return bscript.compile([a.pubkey, OPS.OP_CHECKSIG]);
        });
        lazy.prop(o, "pubkey", () => {
          if (!a.output)
            return;
          return a.output.slice(1, -1);
        });
        lazy.prop(o, "signature", () => {
          if (!a.input)
            return;
          return _chunks()[0];
        });
        lazy.prop(o, "input", () => {
          if (!a.signature)
            return;
          return bscript.compile([a.signature]);
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        if (opts.validate) {
          if (a.output) {
            if (a.output[a.output.length - 1] !== OPS.OP_CHECKSIG)
              throw new TypeError("Output is invalid");
            if (!Buffer.isBuffer(o.pubkey))
              throw new TypeError("Output pubkey is invalid");
            if (a.pubkey && !a.pubkey.equals(o.pubkey))
              throw new TypeError("Pubkey mismatch");
          }
          if (a.signature) {
            if (a.input && !a.input.equals(o.input))
              throw new TypeError("Signature mismatch");
          }
          if (a.input) {
            if (_chunks().length !== 1)
              throw new TypeError("Input is invalid");
            if (!bscript.isCanonicalScriptSignature(o.signature))
              throw new TypeError("Input has invalid signature");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2pk = p2pk;
    }
  });

  // node_modules/@noble/hashes/sha1.js
  var require_sha1 = __commonJS({
    "node_modules/@noble/hashes/sha1.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.sha1 = void 0;
      var _sha2_js_1 = require_sha2();
      var utils_js_1 = require_utils2();
      var rotl = (word, shift) => word << shift | word >>> 32 - shift >>> 0;
      var Chi = (a, b, c) => a & b ^ ~a & c;
      var Maj = (a, b, c) => a & b ^ a & c ^ b & c;
      var IV = /* @__PURE__ */ new Uint32Array([
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
      ]);
      var SHA1_W = /* @__PURE__ */ new Uint32Array(80);
      var SHA1 = class extends _sha2_js_1.SHA2 {
        constructor() {
          super(64, 20, 8, false);
          this.A = IV[0] | 0;
          this.B = IV[1] | 0;
          this.C = IV[2] | 0;
          this.D = IV[3] | 0;
          this.E = IV[4] | 0;
        }
        get() {
          const { A, B, C, D, E } = this;
          return [A, B, C, D, E];
        }
        set(A, B, C, D, E) {
          this.A = A | 0;
          this.B = B | 0;
          this.C = C | 0;
          this.D = D | 0;
          this.E = E | 0;
        }
        process(view, offset) {
          for (let i = 0; i < 16; i++, offset += 4)
            SHA1_W[i] = view.getUint32(offset, false);
          for (let i = 16; i < 80; i++)
            SHA1_W[i] = rotl(SHA1_W[i - 3] ^ SHA1_W[i - 8] ^ SHA1_W[i - 14] ^ SHA1_W[i - 16], 1);
          let { A, B, C, D, E } = this;
          for (let i = 0; i < 80; i++) {
            let F, K;
            if (i < 20) {
              F = Chi(B, C, D);
              K = 1518500249;
            } else if (i < 40) {
              F = B ^ C ^ D;
              K = 1859775393;
            } else if (i < 60) {
              F = Maj(B, C, D);
              K = 2400959708;
            } else {
              F = B ^ C ^ D;
              K = 3395469782;
            }
            const T = rotl(A, 5) + F + E + K + SHA1_W[i] | 0;
            E = D;
            D = C;
            C = rotl(B, 30);
            B = A;
            A = T;
          }
          A = A + this.A | 0;
          B = B + this.B | 0;
          C = C + this.C | 0;
          D = D + this.D | 0;
          E = E + this.E | 0;
          this.set(A, B, C, D, E);
        }
        roundClean() {
          SHA1_W.fill(0);
        }
        destroy() {
          this.set(0, 0, 0, 0, 0);
          this.buffer.fill(0);
        }
      };
      exports.sha1 = (0, utils_js_1.wrapConstructor)(() => new SHA1());
    }
  });

  // node_modules/tidecoinjs-lib/src/crypto.js
  var require_crypto2 = __commonJS({
    "node_modules/tidecoinjs-lib/src/crypto.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.taggedHash = exports.TAGGED_HASH_PREFIXES = exports.TAGS = exports.hash256 = exports.hash160 = exports.sha256 = exports.sha1 = exports.ripemd160 = void 0;
      var ripemd160_1 = require_ripemd160();
      var sha1_1 = require_sha1();
      var sha256_1 = require_sha256();
      function ripemd160(buffer) {
        return Buffer.from((0, ripemd160_1.ripemd160)(Uint8Array.from(buffer)));
      }
      exports.ripemd160 = ripemd160;
      function sha1(buffer) {
        return Buffer.from((0, sha1_1.sha1)(Uint8Array.from(buffer)));
      }
      exports.sha1 = sha1;
      function sha256(buffer) {
        return Buffer.from((0, sha256_1.sha256)(Uint8Array.from(buffer)));
      }
      exports.sha256 = sha256;
      function hash160(buffer) {
        return Buffer.from(
          (0, ripemd160_1.ripemd160)((0, sha256_1.sha256)(Uint8Array.from(buffer)))
        );
      }
      exports.hash160 = hash160;
      function hash256(buffer) {
        return Buffer.from(
          (0, sha256_1.sha256)((0, sha256_1.sha256)(Uint8Array.from(buffer)))
        );
      }
      exports.hash256 = hash256;
      exports.TAGS = [
        "BIP0340/challenge",
        "BIP0340/aux",
        "BIP0340/nonce",
        "KeyAgg list",
        "KeyAgg coefficient"
      ];
      exports.TAGGED_HASH_PREFIXES = {
        "BIP0340/challenge": Buffer.from([
          123,
          181,
          45,
          122,
          159,
          239,
          88,
          50,
          62,
          177,
          191,
          122,
          64,
          125,
          179,
          130,
          210,
          243,
          242,
          216,
          27,
          177,
          34,
          79,
          73,
          254,
          81,
          143,
          109,
          72,
          211,
          124,
          123,
          181,
          45,
          122,
          159,
          239,
          88,
          50,
          62,
          177,
          191,
          122,
          64,
          125,
          179,
          130,
          210,
          243,
          242,
          216,
          27,
          177,
          34,
          79,
          73,
          254,
          81,
          143,
          109,
          72,
          211,
          124
        ]),
        "BIP0340/aux": Buffer.from([
          241,
          239,
          78,
          94,
          192,
          99,
          202,
          218,
          109,
          148,
          202,
          250,
          157,
          152,
          126,
          160,
          105,
          38,
          88,
          57,
          236,
          193,
          31,
          151,
          45,
          119,
          165,
          46,
          216,
          193,
          204,
          144,
          241,
          239,
          78,
          94,
          192,
          99,
          202,
          218,
          109,
          148,
          202,
          250,
          157,
          152,
          126,
          160,
          105,
          38,
          88,
          57,
          236,
          193,
          31,
          151,
          45,
          119,
          165,
          46,
          216,
          193,
          204,
          144
        ]),
        "BIP0340/nonce": Buffer.from([
          7,
          73,
          119,
          52,
          167,
          155,
          203,
          53,
          91,
          155,
          140,
          125,
          3,
          79,
          18,
          28,
          244,
          52,
          215,
          62,
          247,
          45,
          218,
          25,
          135,
          0,
          97,
          251,
          82,
          191,
          235,
          47,
          7,
          73,
          119,
          52,
          167,
          155,
          203,
          53,
          91,
          155,
          140,
          125,
          3,
          79,
          18,
          28,
          244,
          52,
          215,
          62,
          247,
          45,
          218,
          25,
          135,
          0,
          97,
          251,
          82,
          191,
          235,
          47
        ]),
        "KeyAgg list": Buffer.from([
          72,
          28,
          151,
          28,
          60,
          11,
          70,
          215,
          240,
          178,
          117,
          174,
          89,
          141,
          78,
          44,
          126,
          215,
          49,
          156,
          89,
          74,
          92,
          110,
          199,
          158,
          160,
          212,
          153,
          2,
          148,
          240,
          72,
          28,
          151,
          28,
          60,
          11,
          70,
          215,
          240,
          178,
          117,
          174,
          89,
          141,
          78,
          44,
          126,
          215,
          49,
          156,
          89,
          74,
          92,
          110,
          199,
          158,
          160,
          212,
          153,
          2,
          148,
          240
        ]),
        "KeyAgg coefficient": Buffer.from([
          191,
          201,
          4,
          3,
          77,
          28,
          136,
          232,
          200,
          14,
          34,
          229,
          61,
          36,
          86,
          109,
          100,
          130,
          78,
          214,
          66,
          114,
          129,
          192,
          145,
          0,
          249,
          77,
          205,
          82,
          201,
          129,
          191,
          201,
          4,
          3,
          77,
          28,
          136,
          232,
          200,
          14,
          34,
          229,
          61,
          36,
          86,
          109,
          100,
          130,
          78,
          214,
          66,
          114,
          129,
          192,
          145,
          0,
          249,
          77,
          205,
          82,
          201,
          129
        ])
      };
      function taggedHash(prefix, data) {
        return sha256(Buffer.concat([exports.TAGGED_HASH_PREFIXES[prefix], data]));
      }
      exports.taggedHash = taggedHash;
    }
  });

  // node_modules/base-x/src/index.js
  var require_src = __commonJS({
    "node_modules/base-x/src/index.js"(exports, module) {
      "use strict";
      function base(ALPHABET) {
        if (ALPHABET.length >= 255) {
          throw new TypeError("Alphabet too long");
        }
        var BASE_MAP = new Uint8Array(256);
        for (var j = 0; j < BASE_MAP.length; j++) {
          BASE_MAP[j] = 255;
        }
        for (var i = 0; i < ALPHABET.length; i++) {
          var x = ALPHABET.charAt(i);
          var xc = x.charCodeAt(0);
          if (BASE_MAP[xc] !== 255) {
            throw new TypeError(x + " is ambiguous");
          }
          BASE_MAP[xc] = i;
        }
        var BASE = ALPHABET.length;
        var LEADER = ALPHABET.charAt(0);
        var FACTOR = Math.log(BASE) / Math.log(256);
        var iFACTOR = Math.log(256) / Math.log(BASE);
        function encode(source) {
          if (source instanceof Uint8Array) {
          } else if (ArrayBuffer.isView(source)) {
            source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
          } else if (Array.isArray(source)) {
            source = Uint8Array.from(source);
          }
          if (!(source instanceof Uint8Array)) {
            throw new TypeError("Expected Uint8Array");
          }
          if (source.length === 0) {
            return "";
          }
          var zeroes = 0;
          var length = 0;
          var pbegin = 0;
          var pend = source.length;
          while (pbegin !== pend && source[pbegin] === 0) {
            pbegin++;
            zeroes++;
          }
          var size = (pend - pbegin) * iFACTOR + 1 >>> 0;
          var b58 = new Uint8Array(size);
          while (pbegin !== pend) {
            var carry = source[pbegin];
            var i2 = 0;
            for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
              carry += 256 * b58[it1] >>> 0;
              b58[it1] = carry % BASE >>> 0;
              carry = carry / BASE >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            pbegin++;
          }
          var it2 = size - length;
          while (it2 !== size && b58[it2] === 0) {
            it2++;
          }
          var str = LEADER.repeat(zeroes);
          for (; it2 < size; ++it2) {
            str += ALPHABET.charAt(b58[it2]);
          }
          return str;
        }
        function decodeUnsafe(source) {
          if (typeof source !== "string") {
            throw new TypeError("Expected String");
          }
          if (source.length === 0) {
            return new Uint8Array();
          }
          var psz = 0;
          var zeroes = 0;
          var length = 0;
          while (source[psz] === LEADER) {
            zeroes++;
            psz++;
          }
          var size = (source.length - psz) * FACTOR + 1 >>> 0;
          var b256 = new Uint8Array(size);
          while (source[psz]) {
            var carry = BASE_MAP[source.charCodeAt(psz)];
            if (carry === 255) {
              return;
            }
            var i2 = 0;
            for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
              carry += BASE * b256[it3] >>> 0;
              b256[it3] = carry % 256 >>> 0;
              carry = carry / 256 >>> 0;
            }
            if (carry !== 0) {
              throw new Error("Non-zero carry");
            }
            length = i2;
            psz++;
          }
          var it4 = size - length;
          while (it4 !== size && b256[it4] === 0) {
            it4++;
          }
          var vch = new Uint8Array(zeroes + (size - it4));
          var j2 = zeroes;
          while (it4 !== size) {
            vch[j2++] = b256[it4++];
          }
          return vch;
        }
        function decode(string) {
          var buffer = decodeUnsafe(string);
          if (buffer) {
            return buffer;
          }
          throw new Error("Non-base" + BASE + " character");
        }
        return {
          encode,
          decodeUnsafe,
          decode
        };
      }
      module.exports = base;
    }
  });

  // node_modules/bs58/index.js
  var require_bs58 = __commonJS({
    "node_modules/bs58/index.js"(exports, module) {
      var basex = require_src();
      var ALPHABET = "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz";
      module.exports = basex(ALPHABET);
    }
  });

  // node_modules/bs58check/base.js
  var require_base = __commonJS({
    "node_modules/bs58check/base.js"(exports, module) {
      "use strict";
      var base58 = require_bs58();
      module.exports = function(checksumFn) {
        function encode(payload) {
          var payloadU8 = Uint8Array.from(payload);
          var checksum = checksumFn(payloadU8);
          var length = payloadU8.length + 4;
          var both = new Uint8Array(length);
          both.set(payloadU8, 0);
          both.set(checksum.subarray(0, 4), payloadU8.length);
          return base58.encode(both, length);
        }
        function decodeRaw(buffer) {
          var payload = buffer.slice(0, -4);
          var checksum = buffer.slice(-4);
          var newChecksum = checksumFn(payload);
          if (checksum[0] ^ newChecksum[0] | checksum[1] ^ newChecksum[1] | checksum[2] ^ newChecksum[2] | checksum[3] ^ newChecksum[3])
            return;
          return payload;
        }
        function decodeUnsafe(string) {
          var buffer = base58.decodeUnsafe(string);
          if (!buffer)
            return;
          return decodeRaw(buffer);
        }
        function decode(string) {
          var buffer = base58.decode(string);
          var payload = decodeRaw(buffer, checksumFn);
          if (!payload)
            throw new Error("Invalid checksum");
          return payload;
        }
        return {
          encode,
          decode,
          decodeUnsafe
        };
      };
    }
  });

  // node_modules/bs58check/index.js
  var require_bs58check = __commonJS({
    "node_modules/bs58check/index.js"(exports, module) {
      "use strict";
      var { sha256 } = require_sha256();
      var bs58checkBase = require_base();
      function sha256x2(buffer) {
        return sha256(sha256(buffer));
      }
      module.exports = bs58checkBase(sha256x2);
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2pkh.js
  var require_p2pkh = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2pkh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2pkh = void 0;
      var bcrypto = require_crypto2();
      var networks_1 = require_networks();
      var bscript = require_script();
      var lazy = require_lazy();
      var types_1 = require_types2();
      var bs58check = require_bs58check();
      var OPS = bscript.OPS;
      function p2pkh(a, opts) {
        return p2pkh_old(a, opts);
      }
      exports.p2pkh = p2pkh;
      function p2pkh_old(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.pubkey && !a.input)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(25)),
            pubkey: types_1.typeforce.maybe(types_1.typeforce.BufferN(898)),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer)
          },
          a
        );
        const _address = lazy.value(() => {
          const payload = Buffer.from(bs58check.decode(a.address));
          const version = payload.readUInt8(0);
          const hash = payload.slice(1);
          return { version, hash };
        });
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const network = a.network || networks_1.TIDECOIN;
        const o = { name: "p2pkh", network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const payload = Buffer.allocUnsafe(21);
          payload.writeUInt8(network.pubKeyHash, 0);
          o.hash.copy(payload, 1);
          return bs58check.encode(payload);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(3, 23);
          if (a.address)
            return _address().hash;
          if (a.pubkey || o.pubkey)
            return bcrypto.hash160(a.pubkey || o.pubkey);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([
            OPS.OP_DUP,
            OPS.OP_HASH160,
            o.hash,
            OPS.OP_EQUALVERIFY,
            OPS.OP_CHECKSIG
          ]);
        });
        lazy.prop(o, "pubkey", () => {
          if (!a.input)
            return;
          return _chunks()[1];
        });
        lazy.prop(o, "signature", () => {
          if (!a.input)
            return;
          return _chunks()[0];
        });
        lazy.prop(o, "input", () => {
          if (!a.pubkey)
            return;
          if (!a.signature)
            return;
          return bscript.compile([a.signature, a.pubkey]);
        });
        lazy.prop(o, "witness", () => {
          if (!o.input)
            return;
          return [];
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().version !== network.pubKeyHash)
              throw new TypeError("Invalid version or Network mismatch");
            if (_address().hash.length !== 20)
              throw new TypeError("Invalid address");
            hash = _address().hash;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 25 || a.output[0] !== OPS.OP_DUP || a.output[1] !== OPS.OP_HASH160 || a.output[2] !== 20 || a.output[23] !== OPS.OP_EQUALVERIFY || a.output[24] !== OPS.OP_CHECKSIG)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(3, 23);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (a.pubkey) {
            const pkh = bcrypto.hash160(a.pubkey);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
            else
              hash = pkh;
          }
          if (a.input) {
            const chunks = _chunks();
            if (chunks.length !== 2)
              throw new TypeError("Input is invalid");
            if (!bscript.isCanonicalScriptSignature(chunks[0]))
              throw new TypeError("Input has invalid signature");
            if (!Buffer.isBuffer(chunks[1]))
              throw new TypeError("Input has invalid pubkey");
            if (a.signature && !a.signature.equals(chunks[0]))
              throw new TypeError("Signature mismatch");
            if (a.pubkey && !a.pubkey.equals(chunks[1]))
              throw new TypeError("Pubkey mismatch");
            const pkh = bcrypto.hash160(chunks[1]);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
          }
        }
        return Object.assign(o, a);
      }
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2sh.js
  var require_p2sh = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2sh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2sh = void 0;
      var bcrypto = require_crypto2();
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bs58check = require_bs58check();
      var OPS = bscript.OPS;
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function p2sh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.redeem && !a.input)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(23)),
            redeem: types_1.typeforce.maybe({
              network: types_1.typeforce.maybe(types_1.typeforce.Object),
              output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              witness: types_1.typeforce.maybe(
                types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
              )
            }),
            input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        let network = a.network;
        if (!network) {
          network = a.redeem && a.redeem.network || networks_1.TIDECOIN;
        }
        const o = { network };
        const _address = lazy.value(() => {
          const payload = Buffer.from(bs58check.decode(a.address));
          const version = payload.readUInt8(0);
          const hash = payload.slice(1);
          return { version, hash };
        });
        const _chunks = lazy.value(() => {
          return bscript.decompile(a.input);
        });
        const _redeem = lazy.value(() => {
          const chunks = _chunks();
          const lastChunk = chunks[chunks.length - 1];
          return {
            network,
            output: lastChunk === OPS.OP_FALSE ? Buffer.from([]) : lastChunk,
            input: bscript.compile(chunks.slice(0, -1)),
            witness: a.witness || []
          };
        });
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const payload = Buffer.allocUnsafe(21);
          payload.writeUInt8(o.network.scriptHash, 0);
          o.hash.copy(payload, 1);
          return bs58check.encode(payload);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2, 22);
          if (a.address)
            return _address().hash;
          if (o.redeem && o.redeem.output)
            return bcrypto.hash160(o.redeem.output);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_HASH160, o.hash, OPS.OP_EQUAL]);
        });
        lazy.prop(o, "redeem", () => {
          if (!a.input)
            return;
          return _redeem();
        });
        lazy.prop(o, "input", () => {
          if (!a.redeem || !a.redeem.input || !a.redeem.output)
            return;
          return bscript.compile(
            [].concat(bscript.decompile(a.redeem.input), a.redeem.output)
          );
        });
        lazy.prop(o, "witness", () => {
          if (o.redeem && o.redeem.witness)
            return o.redeem.witness;
          if (o.input)
            return [];
        });
        lazy.prop(o, "name", () => {
          const nameParts = ["p2sh"];
          if (o.redeem !== void 0 && o.redeem.name !== void 0)
            nameParts.push(o.redeem.name);
          return nameParts.join("-");
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().version !== network.scriptHash)
              throw new TypeError("Invalid version or Network mismatch");
            if (_address().hash.length !== 20)
              throw new TypeError("Invalid address");
            hash = _address().hash;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 23 || a.output[0] !== OPS.OP_HASH160 || a.output[1] !== 20 || a.output[22] !== OPS.OP_EQUAL)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(2, 22);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          const checkRedeem = (redeem) => {
            if (redeem.output) {
              const decompile = bscript.decompile(redeem.output);
              if (!decompile || decompile.length < 1)
                throw new TypeError("Redeem.output too short");
              if (redeem.output.byteLength > 520)
                throw new TypeError(
                  "Redeem.output unspendable if larger than 520 bytes"
                );
              if (bscript.countNonPushOnlyOPs(decompile) > 201)
                throw new TypeError(
                  "Redeem.output unspendable with more than 201 non-push ops"
                );
              const hash2 = bcrypto.hash160(redeem.output);
              if (hash.length > 0 && !hash.equals(hash2))
                throw new TypeError("Hash mismatch");
              else
                hash = hash2;
            }
            if (redeem.input) {
              const hasInput = redeem.input.length > 0;
              const hasWitness = redeem.witness && redeem.witness.length > 0;
              if (!hasInput && !hasWitness)
                throw new TypeError("Empty input");
              if (hasInput && hasWitness)
                throw new TypeError("Input and witness provided");
              if (hasInput) {
                const richunks = bscript.decompile(redeem.input);
                if (!bscript.isPushOnly(richunks))
                  throw new TypeError("Non push-only scriptSig");
              }
            }
          };
          if (a.input) {
            const chunks = _chunks();
            if (!chunks || chunks.length < 1)
              throw new TypeError("Input too short");
            if (!Buffer.isBuffer(_redeem().output))
              throw new TypeError("Input is invalid");
            checkRedeem(_redeem());
          }
          if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network)
              throw new TypeError("Network mismatch");
            if (a.input) {
              const redeem = _redeem();
              if (a.redeem.output && !a.redeem.output.equals(redeem.output))
                throw new TypeError("Redeem.output mismatch");
              if (a.redeem.input && !a.redeem.input.equals(redeem.input))
                throw new TypeError("Redeem.input mismatch");
            }
            checkRedeem(a.redeem);
          }
          if (a.witness) {
            if (a.redeem && a.redeem.witness && !stacksEqual(a.redeem.witness, a.witness))
              throw new TypeError("Witness and redeem.witness mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2sh = p2sh;
    }
  });

  // node_modules/bech32/dist/index.js
  var require_dist3 = __commonJS({
    "node_modules/bech32/dist/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.bech32m = exports.bech32 = void 0;
      var ALPHABET = "qpzry9x8gf2tvdw0s3jn54khce6mua7l";
      var ALPHABET_MAP = {};
      for (let z = 0; z < ALPHABET.length; z++) {
        const x = ALPHABET.charAt(z);
        ALPHABET_MAP[x] = z;
      }
      function polymodStep(pre) {
        const b = pre >> 25;
        return (pre & 33554431) << 5 ^ -(b >> 0 & 1) & 996825010 ^ -(b >> 1 & 1) & 642813549 ^ -(b >> 2 & 1) & 513874426 ^ -(b >> 3 & 1) & 1027748829 ^ -(b >> 4 & 1) & 705979059;
      }
      function prefixChk(prefix) {
        let chk = 1;
        for (let i = 0; i < prefix.length; ++i) {
          const c = prefix.charCodeAt(i);
          if (c < 33 || c > 126)
            return "Invalid prefix (" + prefix + ")";
          chk = polymodStep(chk) ^ c >> 5;
        }
        chk = polymodStep(chk);
        for (let i = 0; i < prefix.length; ++i) {
          const v = prefix.charCodeAt(i);
          chk = polymodStep(chk) ^ v & 31;
        }
        return chk;
      }
      function convert(data, inBits, outBits, pad) {
        let value = 0;
        let bits = 0;
        const maxV = (1 << outBits) - 1;
        const result = [];
        for (let i = 0; i < data.length; ++i) {
          value = value << inBits | data[i];
          bits += inBits;
          while (bits >= outBits) {
            bits -= outBits;
            result.push(value >> bits & maxV);
          }
        }
        if (pad) {
          if (bits > 0) {
            result.push(value << outBits - bits & maxV);
          }
        } else {
          if (bits >= inBits)
            return "Excess padding";
          if (value << outBits - bits & maxV)
            return "Non-zero padding";
        }
        return result;
      }
      function toWords(bytes) {
        return convert(bytes, 8, 5, true);
      }
      function fromWordsUnsafe(words) {
        const res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
      }
      function fromWords(words) {
        const res = convert(words, 5, 8, false);
        if (Array.isArray(res))
          return res;
        throw new Error(res);
      }
      function getLibraryFromEncoding(encoding) {
        let ENCODING_CONST;
        if (encoding === "bech32") {
          ENCODING_CONST = 1;
        } else {
          ENCODING_CONST = 734539939;
        }
        function encode(prefix, words, LIMIT) {
          LIMIT = LIMIT || 90;
          if (prefix.length + 7 + words.length > LIMIT)
            throw new TypeError("Exceeds length limit");
          prefix = prefix.toLowerCase();
          let chk = prefixChk(prefix);
          if (typeof chk === "string")
            throw new Error(chk);
          let result = prefix + "1";
          for (let i = 0; i < words.length; ++i) {
            const x = words[i];
            if (x >> 5 !== 0)
              throw new Error("Non 5-bit word");
            chk = polymodStep(chk) ^ x;
            result += ALPHABET.charAt(x);
          }
          for (let i = 0; i < 6; ++i) {
            chk = polymodStep(chk);
          }
          chk ^= ENCODING_CONST;
          for (let i = 0; i < 6; ++i) {
            const v = chk >> (5 - i) * 5 & 31;
            result += ALPHABET.charAt(v);
          }
          return result;
        }
        function __decode(str, LIMIT) {
          LIMIT = LIMIT || 90;
          if (str.length < 8)
            return str + " too short";
          if (str.length > LIMIT)
            return "Exceeds length limit";
          const lowered = str.toLowerCase();
          const uppered = str.toUpperCase();
          if (str !== lowered && str !== uppered)
            return "Mixed-case string " + str;
          str = lowered;
          const split = str.lastIndexOf("1");
          if (split === -1)
            return "No separator character for " + str;
          if (split === 0)
            return "Missing prefix for " + str;
          const prefix = str.slice(0, split);
          const wordChars = str.slice(split + 1);
          if (wordChars.length < 6)
            return "Data too short";
          let chk = prefixChk(prefix);
          if (typeof chk === "string")
            return chk;
          const words = [];
          for (let i = 0; i < wordChars.length; ++i) {
            const c = wordChars.charAt(i);
            const v = ALPHABET_MAP[c];
            if (v === void 0)
              return "Unknown character " + c;
            chk = polymodStep(chk) ^ v;
            if (i + 6 >= wordChars.length)
              continue;
            words.push(v);
          }
          if (chk !== ENCODING_CONST)
            return "Invalid checksum for " + str;
          return { prefix, words };
        }
        function decodeUnsafe(str, LIMIT) {
          const res = __decode(str, LIMIT);
          if (typeof res === "object")
            return res;
        }
        function decode(str, LIMIT) {
          const res = __decode(str, LIMIT);
          if (typeof res === "object")
            return res;
          throw new Error(res);
        }
        return {
          decodeUnsafe,
          decode,
          encode,
          toWords,
          fromWordsUnsafe,
          fromWords
        };
      }
      exports.bech32 = getLibraryFromEncoding("bech32");
      exports.bech32m = getLibraryFromEncoding("bech32m");
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2wpkh.js
  var require_p2wpkh = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2wpkh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2wpkh_old = exports.p2wpkh = void 0;
      var bcrypto = require_crypto2();
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bech32_1 = require_dist3();
      var OPS = bscript.OPS;
      var EMPTY_BUFFER = Buffer.alloc(0);
      function p2wpkh(a, opts) {
        return p2wpkh_old(a, opts);
      }
      exports.p2wpkh = p2wpkh;
      function p2wpkh_old(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.pubkey && !a.witness)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(20)),
            input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(22)),
            pubkey: types_1.typeforce.maybe(types_1.typeforce.BufferN(898)),
            signature: types_1.typeforce.maybe(bscript.isCanonicalScriptSignature),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const _address = lazy.value(() => {
          const result = bech32_1.bech32.decode(a.address);
          const version = result.words.shift();
          const data = bech32_1.bech32.fromWords(result.words);
          return {
            version,
            prefix: result.prefix,
            data: Buffer.from(data)
          };
        });
        const network = a.network || networks_1.TIDECOIN;
        const o = { name: "p2wpkh", network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const words = bech32_1.bech32.toWords(o.hash);
          words.unshift(0);
          return bech32_1.bech32.encode(network.bech32, words);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2, 22);
          if (a.address)
            return _address().data;
          if (a.pubkey || o.pubkey)
            return bcrypto.hash160(a.pubkey || o.pubkey);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_0, o.hash]);
        });
        lazy.prop(o, "pubkey", () => {
          if (a.pubkey)
            return a.pubkey;
          if (!a.witness)
            return;
          return a.witness[1];
        });
        lazy.prop(o, "signature", () => {
          if (!a.witness)
            return;
          return a.witness[0];
        });
        lazy.prop(o, "input", () => {
          if (!o.witness)
            return;
          return EMPTY_BUFFER;
        });
        lazy.prop(o, "witness", () => {
          if (!a.pubkey)
            return;
          if (!a.signature)
            return;
          return [a.signature, a.pubkey];
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (network && network.bech32 !== _address().prefix)
              throw new TypeError("Invalid prefix or Network mismatch");
            if (_address().version !== 0)
              throw new TypeError("Invalid address version");
            if (_address().data.length !== 20)
              throw new TypeError("Invalid address data");
            hash = _address().data;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 22 || a.output[0] !== OPS.OP_0 || a.output[1] !== 20)
              throw new TypeError("Output is invalid");
            if (hash.length > 0 && !hash.equals(a.output.slice(2)))
              throw new TypeError("Hash mismatch");
            else
              hash = a.output.slice(2);
          }
          if (a.pubkey) {
            const pkh = bcrypto.hash160(a.pubkey);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
            else
              hash = pkh;
            if (a.pubkey.length !== 898 || a.pubkey[0] !== 7)
              throw new TypeError("Invalid pubkey for p2wpkh");
          }
          if (a.witness) {
            if (a.witness.length !== 2)
              throw new TypeError("Witness is invalid");
            if (!bscript.isCanonicalScriptSignature(a.witness[0]))
              throw new TypeError("Witness has invalid signature");
            if (a.witness[1].length !== 898)
              throw new TypeError("Witness has invalid pubkey");
            if (a.signature && !a.signature.equals(a.witness[0]))
              throw new TypeError("Signature mismatch");
            if (a.pubkey && !a.pubkey.equals(a.witness[1]))
              throw new TypeError("Pubkey mismatch");
            const pkh = bcrypto.hash160(a.witness[1]);
            if (hash.length > 0 && !hash.equals(pkh))
              throw new TypeError("Hash mismatch");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2wpkh_old = p2wpkh_old;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/p2wsh.js
  var require_p2wsh = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/p2wsh.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2wsh = void 0;
      var bcrypto = require_crypto2();
      var networks_1 = require_networks();
      var bscript = require_script();
      var types_1 = require_types2();
      var lazy = require_lazy();
      var bech32_1 = require_dist3();
      var OPS = bscript.OPS;
      var EMPTY_BUFFER = Buffer.alloc(0);
      function stacksEqual(a, b) {
        if (a.length !== b.length)
          return false;
        return a.every((x, i) => {
          return x.equals(b[i]);
        });
      }
      function chunkHasUncompressedPubkey(chunk) {
        if (Buffer.isBuffer(chunk) && chunk.length === 898 && chunk[0] === 7) {
          return true;
        } else {
          return false;
        }
      }
      function p2wsh(a, opts) {
        if (!a.address && !a.hash && !a.output && !a.redeem && !a.witness)
          throw new TypeError("Not enough data");
        opts = Object.assign({ validate: true }, opts || {});
        (0, types_1.typeforce)(
          {
            network: types_1.typeforce.maybe(types_1.typeforce.Object),
            address: types_1.typeforce.maybe(types_1.typeforce.String),
            hash: types_1.typeforce.maybe(types_1.typeforce.BufferN(32)),
            output: types_1.typeforce.maybe(types_1.typeforce.BufferN(34)),
            redeem: types_1.typeforce.maybe({
              input: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              network: types_1.typeforce.maybe(types_1.typeforce.Object),
              output: types_1.typeforce.maybe(types_1.typeforce.Buffer),
              witness: types_1.typeforce.maybe(
                types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
              )
            }),
            input: types_1.typeforce.maybe(types_1.typeforce.BufferN(0)),
            witness: types_1.typeforce.maybe(
              types_1.typeforce.arrayOf(types_1.typeforce.Buffer)
            )
          },
          a
        );
        const _address = lazy.value(() => {
          const result = bech32_1.bech32.decode(a.address);
          const version = result.words.shift();
          const data = bech32_1.bech32.fromWords(result.words);
          return {
            version,
            prefix: result.prefix,
            data: Buffer.from(data)
          };
        });
        const _rchunks = lazy.value(() => {
          return bscript.decompile(a.redeem.input);
        });
        let network = a.network;
        if (!network) {
          network = a.redeem && a.redeem.network || networks_1.TIDECOIN;
        }
        const o = { network };
        lazy.prop(o, "address", () => {
          if (!o.hash)
            return;
          const words = bech32_1.bech32.toWords(o.hash);
          words.unshift(0);
          return bech32_1.bech32.encode(network.bech32, words);
        });
        lazy.prop(o, "hash", () => {
          if (a.output)
            return a.output.slice(2);
          if (a.address)
            return _address().data;
          if (o.redeem && o.redeem.output)
            return bcrypto.sha256(o.redeem.output);
        });
        lazy.prop(o, "output", () => {
          if (!o.hash)
            return;
          return bscript.compile([OPS.OP_0, o.hash]);
        });
        lazy.prop(o, "redeem", () => {
          if (!a.witness)
            return;
          return {
            output: a.witness[a.witness.length - 1],
            input: EMPTY_BUFFER,
            witness: a.witness.slice(0, -1)
          };
        });
        lazy.prop(o, "input", () => {
          if (!o.witness)
            return;
          return EMPTY_BUFFER;
        });
        lazy.prop(o, "witness", () => {
          if (a.redeem && a.redeem.input && a.redeem.input.length > 0 && a.redeem.output && a.redeem.output.length > 0) {
            const stack = bscript.toStack(_rchunks());
            o.redeem = Object.assign({ witness: stack }, a.redeem);
            o.redeem.input = EMPTY_BUFFER;
            return [].concat(stack, a.redeem.output);
          }
          if (!a.redeem)
            return;
          if (!a.redeem.output)
            return;
          if (!a.redeem.witness)
            return;
          return [].concat(a.redeem.witness, a.redeem.output);
        });
        lazy.prop(o, "name", () => {
          const nameParts = ["p2wsh"];
          if (o.redeem !== void 0 && o.redeem.name !== void 0)
            nameParts.push(o.redeem.name);
          return nameParts.join("-");
        });
        if (opts.validate) {
          let hash = Buffer.from([]);
          if (a.address) {
            if (_address().prefix !== network.bech32)
              throw new TypeError("Invalid prefix or Network mismatch");
            if (_address().version !== 0)
              throw new TypeError("Invalid address version");
            if (_address().data.length !== 32)
              throw new TypeError("Invalid address data");
            hash = _address().data;
          }
          if (a.hash) {
            if (hash.length > 0 && !hash.equals(a.hash))
              throw new TypeError("Hash mismatch");
            else
              hash = a.hash;
          }
          if (a.output) {
            if (a.output.length !== 34 || a.output[0] !== OPS.OP_0 || a.output[1] !== 32)
              throw new TypeError("Output is invalid");
            const hash2 = a.output.slice(2);
            if (hash.length > 0 && !hash.equals(hash2))
              throw new TypeError("Hash mismatch");
            else
              hash = hash2;
          }
          if (a.redeem) {
            if (a.redeem.network && a.redeem.network !== network)
              throw new TypeError("Network mismatch");
            if (a.redeem.input && a.redeem.input.length > 0 && a.redeem.witness && a.redeem.witness.length > 0)
              throw new TypeError("Ambiguous witness source");
            if (a.redeem.output) {
              const decompile = bscript.decompile(a.redeem.output);
              if (!decompile || decompile.length < 1)
                throw new TypeError("Redeem.output is invalid");
              if (a.redeem.output.byteLength > 3600)
                throw new TypeError(
                  "Redeem.output unspendable if larger than 3600 bytes"
                );
              if (bscript.countNonPushOnlyOPs(decompile) > 201)
                throw new TypeError(
                  "Redeem.output unspendable with more than 201 non-push ops"
                );
              const hash2 = bcrypto.sha256(a.redeem.output);
              if (hash.length > 0 && !hash.equals(hash2))
                throw new TypeError("Hash mismatch");
              else
                hash = hash2;
            }
            if (a.redeem.input && !bscript.isPushOnly(_rchunks()))
              throw new TypeError("Non push-only scriptSig");
            if (a.witness && a.redeem.witness && !stacksEqual(a.witness, a.redeem.witness))
              throw new TypeError("Witness and redeem.witness mismatch");
            if (a.redeem.input && _rchunks().some(chunkHasUncompressedPubkey) || a.redeem.output && (bscript.decompile(a.redeem.output) || []).some(
              chunkHasUncompressedPubkey
            )) {
              throw new TypeError(
                "redeem.input or redeem.output contains uncompressed pubkey"
              );
            }
          }
          if (a.witness && a.witness.length > 0) {
            const wScript = a.witness[a.witness.length - 1];
            if (a.redeem && a.redeem.output && !a.redeem.output.equals(wScript))
              throw new TypeError("Witness and redeem.output mismatch");
            if (a.witness.some(chunkHasUncompressedPubkey) || (bscript.decompile(wScript) || []).some(chunkHasUncompressedPubkey))
              throw new TypeError("Witness contains uncompressed pubkey");
          }
        }
        return Object.assign(o, a);
      }
      exports.p2wsh = p2wsh;
    }
  });

  // node_modules/tidecoinjs-lib/src/payments/index.js
  var require_payments = __commonJS({
    "node_modules/tidecoinjs-lib/src/payments/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.p2wsh = exports.p2wpkh = exports.p2sh = exports.p2pkh = exports.p2pk = exports.p2ms = exports.embed = void 0;
      var embed_1 = require_embed();
      Object.defineProperty(exports, "embed", {
        enumerable: true,
        get: function() {
          return embed_1.p2data;
        }
      });
      var p2ms_1 = require_p2ms();
      Object.defineProperty(exports, "p2ms", {
        enumerable: true,
        get: function() {
          return p2ms_1.p2ms;
        }
      });
      var p2pk_1 = require_p2pk();
      Object.defineProperty(exports, "p2pk", {
        enumerable: true,
        get: function() {
          return p2pk_1.p2pk;
        }
      });
      var p2pkh_1 = require_p2pkh();
      Object.defineProperty(exports, "p2pkh", {
        enumerable: true,
        get: function() {
          return p2pkh_1.p2pkh;
        }
      });
      var p2sh_1 = require_p2sh();
      Object.defineProperty(exports, "p2sh", {
        enumerable: true,
        get: function() {
          return p2sh_1.p2sh;
        }
      });
      var p2wpkh_1 = require_p2wpkh();
      Object.defineProperty(exports, "p2wpkh", {
        enumerable: true,
        get: function() {
          return p2wpkh_1.p2wpkh;
        }
      });
      var p2wsh_1 = require_p2wsh();
      Object.defineProperty(exports, "p2wsh", {
        enumerable: true,
        get: function() {
          return p2wsh_1.p2wsh;
        }
      });
    }
  });

  // node_modules/tidecoinjs-lib/src/address.js
  var require_address = __commonJS({
    "node_modules/tidecoinjs-lib/src/address.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.toOutputScript = exports.fromOutputScript = exports.toBech32 = exports.toBase58Check = exports.fromBech32 = exports.fromBase58Check = void 0;
      var networks = require_networks();
      var payments2 = require_payments();
      var bscript = require_script();
      var types_1 = require_types2();
      var bech32_1 = require_dist3();
      var bs58check = require_bs58check();
      var FUTURE_SEGWIT_MAX_SIZE = 40;
      var FUTURE_SEGWIT_MIN_SIZE = 2;
      var FUTURE_SEGWIT_MAX_VERSION = 16;
      var FUTURE_SEGWIT_MIN_VERSION = 2;
      var FUTURE_SEGWIT_VERSION_DIFF = 80;
      var FUTURE_SEGWIT_VERSION_WARNING = "WARNING: Sending to a future segwit version address can lead to loss of funds. End users MUST be warned carefully in the GUI and asked if they wish to proceed with caution. Wallets should verify the segwit version from the output of fromBech32, then decide when it is safe to use which version of segwit.";
      function _toFutureSegwitAddress(output, network) {
        const data = output.slice(2);
        if (data.length < FUTURE_SEGWIT_MIN_SIZE || data.length > FUTURE_SEGWIT_MAX_SIZE)
          throw new TypeError("Invalid program length for segwit address");
        const version = output[0] - FUTURE_SEGWIT_VERSION_DIFF;
        if (version < FUTURE_SEGWIT_MIN_VERSION || version > FUTURE_SEGWIT_MAX_VERSION)
          throw new TypeError("Invalid version for segwit address");
        if (output[1] !== data.length)
          throw new TypeError("Invalid script for segwit address");
        console.warn(FUTURE_SEGWIT_VERSION_WARNING);
        return toBech32(data, version, network.bech32);
      }
      function fromBase58Check(address) {
        const payload = Buffer.from(bs58check.decode(address));
        if (payload.length < 21)
          throw new TypeError(address + " is too short");
        if (payload.length > 21)
          throw new TypeError(address + " is too long");
        const version = payload.readUInt8(0);
        const hash = payload.slice(1);
        return { version, hash };
      }
      exports.fromBase58Check = fromBase58Check;
      function fromBech32(address) {
        let result;
        let version;
        try {
          result = bech32_1.bech32.decode(address);
        } catch (e) {
        }
        if (result) {
          version = result.words[0];
          if (version !== 0)
            throw new TypeError(address + " uses wrong encoding");
        } else {
          result = bech32_1.bech32m.decode(address);
          version = result.words[0];
          if (version === 0)
            throw new TypeError(address + " uses wrong encoding");
        }
        const data = bech32_1.bech32.fromWords(result.words.slice(1));
        return {
          version,
          prefix: result.prefix,
          data: Buffer.from(data)
        };
      }
      exports.fromBech32 = fromBech32;
      function toBase58Check(hash, version) {
        (0, types_1.typeforce)(
          (0, types_1.tuple)(types_1.Hash160bit, types_1.UInt8),
          arguments
        );
        const payload = Buffer.allocUnsafe(21);
        payload.writeUInt8(version, 0);
        hash.copy(payload, 1);
        return bs58check.encode(payload);
      }
      exports.toBase58Check = toBase58Check;
      function toBech32(data, version, prefix) {
        const words = bech32_1.bech32.toWords(data);
        words.unshift(version);
        return version === 0 ? bech32_1.bech32.encode(prefix, words) : bech32_1.bech32m.encode(prefix, words);
      }
      exports.toBech32 = toBech32;
      function fromOutputScript(output, network) {
        network = network || networks.TIDECOIN;
        try {
          return payments2.p2pkh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2sh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2wpkh({ output, network }).address;
        } catch (e) {
        }
        try {
          return payments2.p2wsh({ output, network }).address;
        } catch (e) {
        }
        try {
          return _toFutureSegwitAddress(output, network);
        } catch (e) {
        }
        throw new Error(bscript.toASM(output) + " has no matching Address");
      }
      exports.fromOutputScript = fromOutputScript;
      function toOutputScript(address, network) {
        network = network || networks.TIDECOIN;
        let decodeBase58;
        let decodeBech32;
        try {
          decodeBase58 = fromBase58Check(address);
        } catch (e) {
        }
        if (decodeBase58) {
          if (decodeBase58.version === network.pubKeyHash)
            return payments2.p2pkh({ hash: decodeBase58.hash }).output;
          if (decodeBase58.version === network.scriptHash)
            return payments2.p2sh({ hash: decodeBase58.hash }).output;
        } else {
          try {
            decodeBech32 = fromBech32(address);
          } catch (e) {
          }
          if (decodeBech32) {
            if (decodeBech32.prefix !== network.bech32)
              throw new Error(address + " has an invalid prefix");
            if (decodeBech32.version === 0) {
              if (decodeBech32.data.length === 20)
                return payments2.p2wpkh({ hash: decodeBech32.data }).output;
              if (decodeBech32.data.length === 32)
                return payments2.p2wsh({ hash: decodeBech32.data }).output;
            } else if (decodeBech32.version >= FUTURE_SEGWIT_MIN_VERSION && decodeBech32.version <= FUTURE_SEGWIT_MAX_VERSION && decodeBech32.data.length >= FUTURE_SEGWIT_MIN_SIZE && decodeBech32.data.length <= FUTURE_SEGWIT_MAX_SIZE) {
              console.warn(FUTURE_SEGWIT_VERSION_WARNING);
              return bscript.compile([
                decodeBech32.version + FUTURE_SEGWIT_VERSION_DIFF,
                decodeBech32.data
              ]);
            }
          }
        }
        throw new Error(address + " has no matching Script");
      }
      exports.toOutputScript = toOutputScript;
    }
  });

  // node_modules/base64-js/index.js
  var require_base64_js = __commonJS({
    "node_modules/base64-js/index.js"(exports) {
      "use strict";
      exports.byteLength = byteLength;
      exports.toByteArray = toByteArray;
      exports.fromByteArray = fromByteArray;
      var lookup = [];
      var revLookup = [];
      var Arr = typeof Uint8Array !== "undefined" ? Uint8Array : Array;
      var code = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      for (i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }
      var i;
      var len;
      revLookup["-".charCodeAt(0)] = 62;
      revLookup["_".charCodeAt(0)] = 63;
      function getLens(b64) {
        var len2 = b64.length;
        if (len2 % 4 > 0) {
          throw new Error("Invalid string. Length must be a multiple of 4");
        }
        var validLen = b64.indexOf("=");
        if (validLen === -1)
          validLen = len2;
        var placeHoldersLen = validLen === len2 ? 0 : 4 - validLen % 4;
        return [validLen, placeHoldersLen];
      }
      function byteLength(b64) {
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function _byteLength(b64, validLen, placeHoldersLen) {
        return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
      }
      function toByteArray(b64) {
        var tmp;
        var lens = getLens(b64);
        var validLen = lens[0];
        var placeHoldersLen = lens[1];
        var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
        var curByte = 0;
        var len2 = placeHoldersLen > 0 ? validLen - 4 : validLen;
        var i2;
        for (i2 = 0; i2 < len2; i2 += 4) {
          tmp = revLookup[b64.charCodeAt(i2)] << 18 | revLookup[b64.charCodeAt(i2 + 1)] << 12 | revLookup[b64.charCodeAt(i2 + 2)] << 6 | revLookup[b64.charCodeAt(i2 + 3)];
          arr[curByte++] = tmp >> 16 & 255;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 2) {
          tmp = revLookup[b64.charCodeAt(i2)] << 2 | revLookup[b64.charCodeAt(i2 + 1)] >> 4;
          arr[curByte++] = tmp & 255;
        }
        if (placeHoldersLen === 1) {
          tmp = revLookup[b64.charCodeAt(i2)] << 10 | revLookup[b64.charCodeAt(i2 + 1)] << 4 | revLookup[b64.charCodeAt(i2 + 2)] >> 2;
          arr[curByte++] = tmp >> 8 & 255;
          arr[curByte++] = tmp & 255;
        }
        return arr;
      }
      function tripletToBase64(num) {
        return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
      }
      function encodeChunk(uint8, start, end) {
        var tmp;
        var output = [];
        for (var i2 = start; i2 < end; i2 += 3) {
          tmp = (uint8[i2] << 16 & 16711680) + (uint8[i2 + 1] << 8 & 65280) + (uint8[i2 + 2] & 255);
          output.push(tripletToBase64(tmp));
        }
        return output.join("");
      }
      function fromByteArray(uint8) {
        var tmp;
        var len2 = uint8.length;
        var extraBytes = len2 % 3;
        var parts = [];
        var maxChunkLength = 16383;
        for (var i2 = 0, len22 = len2 - extraBytes; i2 < len22; i2 += maxChunkLength) {
          parts.push(encodeChunk(uint8, i2, i2 + maxChunkLength > len22 ? len22 : i2 + maxChunkLength));
        }
        if (extraBytes === 1) {
          tmp = uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 2] + lookup[tmp << 4 & 63] + "=="
          );
        } else if (extraBytes === 2) {
          tmp = (uint8[len2 - 2] << 8) + uint8[len2 - 1];
          parts.push(
            lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + "="
          );
        }
        return parts.join("");
      }
    }
  });

  // node_modules/ieee754/index.js
  var require_ieee754 = __commonJS({
    "node_modules/ieee754/index.js"(exports) {
      exports.read = function(buffer, offset, isLE2, mLen, nBytes) {
        var e, m;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var nBits = -7;
        var i = isLE2 ? nBytes - 1 : 0;
        var d = isLE2 ? -1 : 1;
        var s = buffer[offset + i];
        i += d;
        e = s & (1 << -nBits) - 1;
        s >>= -nBits;
        nBits += eLen;
        for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        m = e & (1 << -nBits) - 1;
        e >>= -nBits;
        nBits += mLen;
        for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {
        }
        if (e === 0) {
          e = 1 - eBias;
        } else if (e === eMax) {
          return m ? NaN : (s ? -1 : 1) * Infinity;
        } else {
          m = m + Math.pow(2, mLen);
          e = e - eBias;
        }
        return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
      };
      exports.write = function(buffer, value, offset, isLE2, mLen, nBytes) {
        var e, m, c;
        var eLen = nBytes * 8 - mLen - 1;
        var eMax = (1 << eLen) - 1;
        var eBias = eMax >> 1;
        var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
        var i = isLE2 ? 0 : nBytes - 1;
        var d = isLE2 ? 1 : -1;
        var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
        value = Math.abs(value);
        if (isNaN(value) || value === Infinity) {
          m = isNaN(value) ? 1 : 0;
          e = eMax;
        } else {
          e = Math.floor(Math.log(value) / Math.LN2);
          if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
          }
          if (e + eBias >= 1) {
            value += rt / c;
          } else {
            value += rt * Math.pow(2, 1 - eBias);
          }
          if (value * c >= 2) {
            e++;
            c /= 2;
          }
          if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
          } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
          } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
          }
        }
        for (; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8) {
        }
        e = e << mLen | m;
        eLen += mLen;
        for (; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8) {
        }
        buffer[offset + i - d] |= s * 128;
      };
    }
  });

  // node_modules/buffer/index.js
  var require_buffer2 = __commonJS({
    "node_modules/buffer/index.js"(exports) {
      "use strict";
      var base64 = require_base64_js();
      var ieee754 = require_ieee754();
      var customInspectSymbol = typeof Symbol === "function" && typeof Symbol["for"] === "function" ? Symbol["for"]("nodejs.util.inspect.custom") : null;
      exports.Buffer = Buffer2;
      exports.SlowBuffer = SlowBuffer;
      exports.INSPECT_MAX_BYTES = 50;
      var K_MAX_LENGTH = 2147483647;
      exports.kMaxLength = K_MAX_LENGTH;
      Buffer2.TYPED_ARRAY_SUPPORT = typedArraySupport();
      if (!Buffer2.TYPED_ARRAY_SUPPORT && typeof console !== "undefined" && typeof console.error === "function") {
        console.error(
          "This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."
        );
      }
      function typedArraySupport() {
        try {
          const arr = new Uint8Array(1);
          const proto = { foo: function() {
            return 42;
          } };
          Object.setPrototypeOf(proto, Uint8Array.prototype);
          Object.setPrototypeOf(arr, proto);
          return arr.foo() === 42;
        } catch (e) {
          return false;
        }
      }
      Object.defineProperty(Buffer2.prototype, "parent", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.buffer;
        }
      });
      Object.defineProperty(Buffer2.prototype, "offset", {
        enumerable: true,
        get: function() {
          if (!Buffer2.isBuffer(this))
            return void 0;
          return this.byteOffset;
        }
      });
      function createBuffer(length) {
        if (length > K_MAX_LENGTH) {
          throw new RangeError('The value "' + length + '" is invalid for option "size"');
        }
        const buf = new Uint8Array(length);
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function Buffer2(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          if (typeof encodingOrOffset === "string") {
            throw new TypeError(
              'The "string" argument must be of type string. Received type number'
            );
          }
          return allocUnsafe(arg);
        }
        return from(arg, encodingOrOffset, length);
      }
      Buffer2.poolSize = 8192;
      function from(value, encodingOrOffset, length) {
        if (typeof value === "string") {
          return fromString(value, encodingOrOffset);
        }
        if (ArrayBuffer.isView(value)) {
          return fromArrayView(value);
        }
        if (value == null) {
          throw new TypeError(
            "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
          );
        }
        if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof SharedArrayBuffer !== "undefined" && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) {
          return fromArrayBuffer(value, encodingOrOffset, length);
        }
        if (typeof value === "number") {
          throw new TypeError(
            'The "value" argument must not be of type number. Received type number'
          );
        }
        const valueOf = value.valueOf && value.valueOf();
        if (valueOf != null && valueOf !== value) {
          return Buffer2.from(valueOf, encodingOrOffset, length);
        }
        const b = fromObject(value);
        if (b)
          return b;
        if (typeof Symbol !== "undefined" && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === "function") {
          return Buffer2.from(value[Symbol.toPrimitive]("string"), encodingOrOffset, length);
        }
        throw new TypeError(
          "The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value
        );
      }
      Buffer2.from = function(value, encodingOrOffset, length) {
        return from(value, encodingOrOffset, length);
      };
      Object.setPrototypeOf(Buffer2.prototype, Uint8Array.prototype);
      Object.setPrototypeOf(Buffer2, Uint8Array);
      function assertSize(size) {
        if (typeof size !== "number") {
          throw new TypeError('"size" argument must be of type number');
        } else if (size < 0) {
          throw new RangeError('The value "' + size + '" is invalid for option "size"');
        }
      }
      function alloc(size, fill, encoding) {
        assertSize(size);
        if (size <= 0) {
          return createBuffer(size);
        }
        if (fill !== void 0) {
          return typeof encoding === "string" ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
        }
        return createBuffer(size);
      }
      Buffer2.alloc = function(size, fill, encoding) {
        return alloc(size, fill, encoding);
      };
      function allocUnsafe(size) {
        assertSize(size);
        return createBuffer(size < 0 ? 0 : checked(size) | 0);
      }
      Buffer2.allocUnsafe = function(size) {
        return allocUnsafe(size);
      };
      Buffer2.allocUnsafeSlow = function(size) {
        return allocUnsafe(size);
      };
      function fromString(string, encoding) {
        if (typeof encoding !== "string" || encoding === "") {
          encoding = "utf8";
        }
        if (!Buffer2.isEncoding(encoding)) {
          throw new TypeError("Unknown encoding: " + encoding);
        }
        const length = byteLength(string, encoding) | 0;
        let buf = createBuffer(length);
        const actual = buf.write(string, encoding);
        if (actual !== length) {
          buf = buf.slice(0, actual);
        }
        return buf;
      }
      function fromArrayLike(array) {
        const length = array.length < 0 ? 0 : checked(array.length) | 0;
        const buf = createBuffer(length);
        for (let i = 0; i < length; i += 1) {
          buf[i] = array[i] & 255;
        }
        return buf;
      }
      function fromArrayView(arrayView) {
        if (isInstance(arrayView, Uint8Array)) {
          const copy = new Uint8Array(arrayView);
          return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
        }
        return fromArrayLike(arrayView);
      }
      function fromArrayBuffer(array, byteOffset, length) {
        if (byteOffset < 0 || array.byteLength < byteOffset) {
          throw new RangeError('"offset" is outside of buffer bounds');
        }
        if (array.byteLength < byteOffset + (length || 0)) {
          throw new RangeError('"length" is outside of buffer bounds');
        }
        let buf;
        if (byteOffset === void 0 && length === void 0) {
          buf = new Uint8Array(array);
        } else if (length === void 0) {
          buf = new Uint8Array(array, byteOffset);
        } else {
          buf = new Uint8Array(array, byteOffset, length);
        }
        Object.setPrototypeOf(buf, Buffer2.prototype);
        return buf;
      }
      function fromObject(obj) {
        if (Buffer2.isBuffer(obj)) {
          const len = checked(obj.length) | 0;
          const buf = createBuffer(len);
          if (buf.length === 0) {
            return buf;
          }
          obj.copy(buf, 0, 0, len);
          return buf;
        }
        if (obj.length !== void 0) {
          if (typeof obj.length !== "number" || numberIsNaN(obj.length)) {
            return createBuffer(0);
          }
          return fromArrayLike(obj);
        }
        if (obj.type === "Buffer" && Array.isArray(obj.data)) {
          return fromArrayLike(obj.data);
        }
      }
      function checked(length) {
        if (length >= K_MAX_LENGTH) {
          throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + " bytes");
        }
        return length | 0;
      }
      function SlowBuffer(length) {
        if (+length != length) {
          length = 0;
        }
        return Buffer2.alloc(+length);
      }
      Buffer2.isBuffer = function isBuffer(b) {
        return b != null && b._isBuffer === true && b !== Buffer2.prototype;
      };
      Buffer2.compare = function compare(a, b) {
        if (isInstance(a, Uint8Array))
          a = Buffer2.from(a, a.offset, a.byteLength);
        if (isInstance(b, Uint8Array))
          b = Buffer2.from(b, b.offset, b.byteLength);
        if (!Buffer2.isBuffer(a) || !Buffer2.isBuffer(b)) {
          throw new TypeError(
            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
          );
        }
        if (a === b)
          return 0;
        let x = a.length;
        let y = b.length;
        for (let i = 0, len = Math.min(x, y); i < len; ++i) {
          if (a[i] !== b[i]) {
            x = a[i];
            y = b[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      Buffer2.isEncoding = function isEncoding(encoding) {
        switch (String(encoding).toLowerCase()) {
          case "hex":
          case "utf8":
          case "utf-8":
          case "ascii":
          case "latin1":
          case "binary":
          case "base64":
          case "ucs2":
          case "ucs-2":
          case "utf16le":
          case "utf-16le":
            return true;
          default:
            return false;
        }
      };
      Buffer2.concat = function concat(list, length) {
        if (!Array.isArray(list)) {
          throw new TypeError('"list" argument must be an Array of Buffers');
        }
        if (list.length === 0) {
          return Buffer2.alloc(0);
        }
        let i;
        if (length === void 0) {
          length = 0;
          for (i = 0; i < list.length; ++i) {
            length += list[i].length;
          }
        }
        const buffer = Buffer2.allocUnsafe(length);
        let pos = 0;
        for (i = 0; i < list.length; ++i) {
          let buf = list[i];
          if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) {
              if (!Buffer2.isBuffer(buf))
                buf = Buffer2.from(buf);
              buf.copy(buffer, pos);
            } else {
              Uint8Array.prototype.set.call(
                buffer,
                buf,
                pos
              );
            }
          } else if (!Buffer2.isBuffer(buf)) {
            throw new TypeError('"list" argument must be an Array of Buffers');
          } else {
            buf.copy(buffer, pos);
          }
          pos += buf.length;
        }
        return buffer;
      };
      function byteLength(string, encoding) {
        if (Buffer2.isBuffer(string)) {
          return string.length;
        }
        if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {
          return string.byteLength;
        }
        if (typeof string !== "string") {
          throw new TypeError(
            'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' + typeof string
          );
        }
        const len = string.length;
        const mustMatch = arguments.length > 2 && arguments[2] === true;
        if (!mustMatch && len === 0)
          return 0;
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "ascii":
            case "latin1":
            case "binary":
              return len;
            case "utf8":
            case "utf-8":
              return utf8ToBytes(string).length;
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return len * 2;
            case "hex":
              return len >>> 1;
            case "base64":
              return base64ToBytes(string).length;
            default:
              if (loweredCase) {
                return mustMatch ? -1 : utf8ToBytes(string).length;
              }
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.byteLength = byteLength;
      function slowToString(encoding, start, end) {
        let loweredCase = false;
        if (start === void 0 || start < 0) {
          start = 0;
        }
        if (start > this.length) {
          return "";
        }
        if (end === void 0 || end > this.length) {
          end = this.length;
        }
        if (end <= 0) {
          return "";
        }
        end >>>= 0;
        start >>>= 0;
        if (end <= start) {
          return "";
        }
        if (!encoding)
          encoding = "utf8";
        while (true) {
          switch (encoding) {
            case "hex":
              return hexSlice(this, start, end);
            case "utf8":
            case "utf-8":
              return utf8Slice(this, start, end);
            case "ascii":
              return asciiSlice(this, start, end);
            case "latin1":
            case "binary":
              return latin1Slice(this, start, end);
            case "base64":
              return base64Slice(this, start, end);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return utf16leSlice(this, start, end);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = (encoding + "").toLowerCase();
              loweredCase = true;
          }
        }
      }
      Buffer2.prototype._isBuffer = true;
      function swap(b, n, m) {
        const i = b[n];
        b[n] = b[m];
        b[m] = i;
      }
      Buffer2.prototype.swap16 = function swap16() {
        const len = this.length;
        if (len % 2 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 16-bits");
        }
        for (let i = 0; i < len; i += 2) {
          swap(this, i, i + 1);
        }
        return this;
      };
      Buffer2.prototype.swap32 = function swap32() {
        const len = this.length;
        if (len % 4 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 32-bits");
        }
        for (let i = 0; i < len; i += 4) {
          swap(this, i, i + 3);
          swap(this, i + 1, i + 2);
        }
        return this;
      };
      Buffer2.prototype.swap64 = function swap64() {
        const len = this.length;
        if (len % 8 !== 0) {
          throw new RangeError("Buffer size must be a multiple of 64-bits");
        }
        for (let i = 0; i < len; i += 8) {
          swap(this, i, i + 7);
          swap(this, i + 1, i + 6);
          swap(this, i + 2, i + 5);
          swap(this, i + 3, i + 4);
        }
        return this;
      };
      Buffer2.prototype.toString = function toString() {
        const length = this.length;
        if (length === 0)
          return "";
        if (arguments.length === 0)
          return utf8Slice(this, 0, length);
        return slowToString.apply(this, arguments);
      };
      Buffer2.prototype.toLocaleString = Buffer2.prototype.toString;
      Buffer2.prototype.equals = function equals(b) {
        if (!Buffer2.isBuffer(b))
          throw new TypeError("Argument must be a Buffer");
        if (this === b)
          return true;
        return Buffer2.compare(this, b) === 0;
      };
      Buffer2.prototype.inspect = function inspect() {
        let str = "";
        const max = exports.INSPECT_MAX_BYTES;
        str = this.toString("hex", 0, max).replace(/(.{2})/g, "$1 ").trim();
        if (this.length > max)
          str += " ... ";
        return "<Buffer " + str + ">";
      };
      if (customInspectSymbol) {
        Buffer2.prototype[customInspectSymbol] = Buffer2.prototype.inspect;
      }
      Buffer2.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {
        if (isInstance(target, Uint8Array)) {
          target = Buffer2.from(target, target.offset, target.byteLength);
        }
        if (!Buffer2.isBuffer(target)) {
          throw new TypeError(
            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' + typeof target
          );
        }
        if (start === void 0) {
          start = 0;
        }
        if (end === void 0) {
          end = target ? target.length : 0;
        }
        if (thisStart === void 0) {
          thisStart = 0;
        }
        if (thisEnd === void 0) {
          thisEnd = this.length;
        }
        if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
          throw new RangeError("out of range index");
        }
        if (thisStart >= thisEnd && start >= end) {
          return 0;
        }
        if (thisStart >= thisEnd) {
          return -1;
        }
        if (start >= end) {
          return 1;
        }
        start >>>= 0;
        end >>>= 0;
        thisStart >>>= 0;
        thisEnd >>>= 0;
        if (this === target)
          return 0;
        let x = thisEnd - thisStart;
        let y = end - start;
        const len = Math.min(x, y);
        const thisCopy = this.slice(thisStart, thisEnd);
        const targetCopy = target.slice(start, end);
        for (let i = 0; i < len; ++i) {
          if (thisCopy[i] !== targetCopy[i]) {
            x = thisCopy[i];
            y = targetCopy[i];
            break;
          }
        }
        if (x < y)
          return -1;
        if (y < x)
          return 1;
        return 0;
      };
      function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
        if (buffer.length === 0)
          return -1;
        if (typeof byteOffset === "string") {
          encoding = byteOffset;
          byteOffset = 0;
        } else if (byteOffset > 2147483647) {
          byteOffset = 2147483647;
        } else if (byteOffset < -2147483648) {
          byteOffset = -2147483648;
        }
        byteOffset = +byteOffset;
        if (numberIsNaN(byteOffset)) {
          byteOffset = dir ? 0 : buffer.length - 1;
        }
        if (byteOffset < 0)
          byteOffset = buffer.length + byteOffset;
        if (byteOffset >= buffer.length) {
          if (dir)
            return -1;
          else
            byteOffset = buffer.length - 1;
        } else if (byteOffset < 0) {
          if (dir)
            byteOffset = 0;
          else
            return -1;
        }
        if (typeof val === "string") {
          val = Buffer2.from(val, encoding);
        }
        if (Buffer2.isBuffer(val)) {
          if (val.length === 0) {
            return -1;
          }
          return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
        } else if (typeof val === "number") {
          val = val & 255;
          if (typeof Uint8Array.prototype.indexOf === "function") {
            if (dir) {
              return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            } else {
              return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
            }
          }
          return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);
        }
        throw new TypeError("val must be string, number or Buffer");
      }
      function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
        let indexSize = 1;
        let arrLength = arr.length;
        let valLength = val.length;
        if (encoding !== void 0) {
          encoding = String(encoding).toLowerCase();
          if (encoding === "ucs2" || encoding === "ucs-2" || encoding === "utf16le" || encoding === "utf-16le") {
            if (arr.length < 2 || val.length < 2) {
              return -1;
            }
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
          }
        }
        function read(buf, i2) {
          if (indexSize === 1) {
            return buf[i2];
          } else {
            return buf.readUInt16BE(i2 * indexSize);
          }
        }
        let i;
        if (dir) {
          let foundIndex = -1;
          for (i = byteOffset; i < arrLength; i++) {
            if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
              if (foundIndex === -1)
                foundIndex = i;
              if (i - foundIndex + 1 === valLength)
                return foundIndex * indexSize;
            } else {
              if (foundIndex !== -1)
                i -= i - foundIndex;
              foundIndex = -1;
            }
          }
        } else {
          if (byteOffset + valLength > arrLength)
            byteOffset = arrLength - valLength;
          for (i = byteOffset; i >= 0; i--) {
            let found = true;
            for (let j = 0; j < valLength; j++) {
              if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
              }
            }
            if (found)
              return i;
          }
        }
        return -1;
      }
      Buffer2.prototype.includes = function includes(val, byteOffset, encoding) {
        return this.indexOf(val, byteOffset, encoding) !== -1;
      };
      Buffer2.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
      };
      Buffer2.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
        return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
      };
      function hexWrite(buf, string, offset, length) {
        offset = Number(offset) || 0;
        const remaining = buf.length - offset;
        if (!length) {
          length = remaining;
        } else {
          length = Number(length);
          if (length > remaining) {
            length = remaining;
          }
        }
        const strLen = string.length;
        if (length > strLen / 2) {
          length = strLen / 2;
        }
        let i;
        for (i = 0; i < length; ++i) {
          const parsed = parseInt(string.substr(i * 2, 2), 16);
          if (numberIsNaN(parsed))
            return i;
          buf[offset + i] = parsed;
        }
        return i;
      }
      function utf8Write(buf, string, offset, length) {
        return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
      }
      function asciiWrite(buf, string, offset, length) {
        return blitBuffer(asciiToBytes(string), buf, offset, length);
      }
      function base64Write(buf, string, offset, length) {
        return blitBuffer(base64ToBytes(string), buf, offset, length);
      }
      function ucs2Write(buf, string, offset, length) {
        return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
      }
      Buffer2.prototype.write = function write(string, offset, length, encoding) {
        if (offset === void 0) {
          encoding = "utf8";
          length = this.length;
          offset = 0;
        } else if (length === void 0 && typeof offset === "string") {
          encoding = offset;
          length = this.length;
          offset = 0;
        } else if (isFinite(offset)) {
          offset = offset >>> 0;
          if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === void 0)
              encoding = "utf8";
          } else {
            encoding = length;
            length = void 0;
          }
        } else {
          throw new Error(
            "Buffer.write(string, encoding, offset[, length]) is no longer supported"
          );
        }
        const remaining = this.length - offset;
        if (length === void 0 || length > remaining)
          length = remaining;
        if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {
          throw new RangeError("Attempt to write outside buffer bounds");
        }
        if (!encoding)
          encoding = "utf8";
        let loweredCase = false;
        for (; ; ) {
          switch (encoding) {
            case "hex":
              return hexWrite(this, string, offset, length);
            case "utf8":
            case "utf-8":
              return utf8Write(this, string, offset, length);
            case "ascii":
            case "latin1":
            case "binary":
              return asciiWrite(this, string, offset, length);
            case "base64":
              return base64Write(this, string, offset, length);
            case "ucs2":
            case "ucs-2":
            case "utf16le":
            case "utf-16le":
              return ucs2Write(this, string, offset, length);
            default:
              if (loweredCase)
                throw new TypeError("Unknown encoding: " + encoding);
              encoding = ("" + encoding).toLowerCase();
              loweredCase = true;
          }
        }
      };
      Buffer2.prototype.toJSON = function toJSON() {
        return {
          type: "Buffer",
          data: Array.prototype.slice.call(this._arr || this, 0)
        };
      };
      function base64Slice(buf, start, end) {
        if (start === 0 && end === buf.length) {
          return base64.fromByteArray(buf);
        } else {
          return base64.fromByteArray(buf.slice(start, end));
        }
      }
      function utf8Slice(buf, start, end) {
        end = Math.min(buf.length, end);
        const res = [];
        let i = start;
        while (i < end) {
          const firstByte = buf[i];
          let codePoint = null;
          let bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
          if (i + bytesPerSequence <= end) {
            let secondByte, thirdByte, fourthByte, tempCodePoint;
            switch (bytesPerSequence) {
              case 1:
                if (firstByte < 128) {
                  codePoint = firstByte;
                }
                break;
              case 2:
                secondByte = buf[i + 1];
                if ((secondByte & 192) === 128) {
                  tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                  if (tempCodePoint > 127) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 3:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                  if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {
                    codePoint = tempCodePoint;
                  }
                }
                break;
              case 4:
                secondByte = buf[i + 1];
                thirdByte = buf[i + 2];
                fourthByte = buf[i + 3];
                if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                  tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                  if (tempCodePoint > 65535 && tempCodePoint < 1114112) {
                    codePoint = tempCodePoint;
                  }
                }
            }
          }
          if (codePoint === null) {
            codePoint = 65533;
            bytesPerSequence = 1;
          } else if (codePoint > 65535) {
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
          }
          res.push(codePoint);
          i += bytesPerSequence;
        }
        return decodeCodePointsArray(res);
      }
      var MAX_ARGUMENTS_LENGTH = 4096;
      function decodeCodePointsArray(codePoints) {
        const len = codePoints.length;
        if (len <= MAX_ARGUMENTS_LENGTH) {
          return String.fromCharCode.apply(String, codePoints);
        }
        let res = "";
        let i = 0;
        while (i < len) {
          res += String.fromCharCode.apply(
            String,
            codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
          );
        }
        return res;
      }
      function asciiSlice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i] & 127);
        }
        return ret;
      }
      function latin1Slice(buf, start, end) {
        let ret = "";
        end = Math.min(buf.length, end);
        for (let i = start; i < end; ++i) {
          ret += String.fromCharCode(buf[i]);
        }
        return ret;
      }
      function hexSlice(buf, start, end) {
        const len = buf.length;
        if (!start || start < 0)
          start = 0;
        if (!end || end < 0 || end > len)
          end = len;
        let out = "";
        for (let i = start; i < end; ++i) {
          out += hexSliceLookupTable[buf[i]];
        }
        return out;
      }
      function utf16leSlice(buf, start, end) {
        const bytes = buf.slice(start, end);
        let res = "";
        for (let i = 0; i < bytes.length - 1; i += 2) {
          res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
        }
        return res;
      }
      Buffer2.prototype.slice = function slice(start, end) {
        const len = this.length;
        start = ~~start;
        end = end === void 0 ? len : ~~end;
        if (start < 0) {
          start += len;
          if (start < 0)
            start = 0;
        } else if (start > len) {
          start = len;
        }
        if (end < 0) {
          end += len;
          if (end < 0)
            end = 0;
        } else if (end > len) {
          end = len;
        }
        if (end < start)
          end = start;
        const newBuf = this.subarray(start, end);
        Object.setPrototypeOf(newBuf, Buffer2.prototype);
        return newBuf;
      };
      function checkOffset(offset, ext, length) {
        if (offset % 1 !== 0 || offset < 0)
          throw new RangeError("offset is not uint");
        if (offset + ext > length)
          throw new RangeError("Trying to access beyond buffer length");
      }
      Buffer2.prototype.readUintLE = Buffer2.prototype.readUIntLE = function readUIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUintBE = Buffer2.prototype.readUIntBE = function readUIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          checkOffset(offset, byteLength2, this.length);
        }
        let val = this[offset + --byteLength2];
        let mul = 1;
        while (byteLength2 > 0 && (mul *= 256)) {
          val += this[offset + --byteLength2] * mul;
        }
        return val;
      };
      Buffer2.prototype.readUint8 = Buffer2.prototype.readUInt8 = function readUInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        return this[offset];
      };
      Buffer2.prototype.readUint16LE = Buffer2.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] | this[offset + 1] << 8;
      };
      Buffer2.prototype.readUint16BE = Buffer2.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        return this[offset] << 8 | this[offset + 1];
      };
      Buffer2.prototype.readUint32LE = Buffer2.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
      };
      Buffer2.prototype.readUint32BE = Buffer2.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
      };
      Buffer2.prototype.readBigUInt64LE = defineBigIntMethod(function readBigUInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const lo = first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24;
        const hi = this[++offset] + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + last * 2 ** 24;
        return BigInt(lo) + (BigInt(hi) << BigInt(32));
      });
      Buffer2.prototype.readBigUInt64BE = defineBigIntMethod(function readBigUInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const hi = first * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        const lo = this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last;
        return (BigInt(hi) << BigInt(32)) + BigInt(lo);
      });
      Buffer2.prototype.readIntLE = function readIntLE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let val = this[offset];
        let mul = 1;
        let i = 0;
        while (++i < byteLength2 && (mul *= 256)) {
          val += this[offset + i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readIntBE = function readIntBE(offset, byteLength2, noAssert) {
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert)
          checkOffset(offset, byteLength2, this.length);
        let i = byteLength2;
        let mul = 1;
        let val = this[offset + --i];
        while (i > 0 && (mul *= 256)) {
          val += this[offset + --i] * mul;
        }
        mul *= 128;
        if (val >= mul)
          val -= Math.pow(2, 8 * byteLength2);
        return val;
      };
      Buffer2.prototype.readInt8 = function readInt8(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 1, this.length);
        if (!(this[offset] & 128))
          return this[offset];
        return (255 - this[offset] + 1) * -1;
      };
      Buffer2.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset] | this[offset + 1] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 2, this.length);
        const val = this[offset + 1] | this[offset] << 8;
        return val & 32768 ? val | 4294901760 : val;
      };
      Buffer2.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
      };
      Buffer2.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
      };
      Buffer2.prototype.readBigInt64LE = defineBigIntMethod(function readBigInt64LE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = this[offset + 4] + this[offset + 5] * 2 ** 8 + this[offset + 6] * 2 ** 16 + (last << 24);
        return (BigInt(val) << BigInt(32)) + BigInt(first + this[++offset] * 2 ** 8 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 24);
      });
      Buffer2.prototype.readBigInt64BE = defineBigIntMethod(function readBigInt64BE(offset) {
        offset = offset >>> 0;
        validateNumber(offset, "offset");
        const first = this[offset];
        const last = this[offset + 7];
        if (first === void 0 || last === void 0) {
          boundsError(offset, this.length - 8);
        }
        const val = (first << 24) + // Overflow
        this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + this[++offset];
        return (BigInt(val) << BigInt(32)) + BigInt(this[++offset] * 2 ** 24 + this[++offset] * 2 ** 16 + this[++offset] * 2 ** 8 + last);
      });
      Buffer2.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, true, 23, 4);
      };
      Buffer2.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 4, this.length);
        return ieee754.read(this, offset, false, 23, 4);
      };
      Buffer2.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, true, 52, 8);
      };
      Buffer2.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
        offset = offset >>> 0;
        if (!noAssert)
          checkOffset(offset, 8, this.length);
        return ieee754.read(this, offset, false, 52, 8);
      };
      function checkInt(buf, value, offset, ext, max, min) {
        if (!Buffer2.isBuffer(buf))
          throw new TypeError('"buffer" argument must be a Buffer instance');
        if (value > max || value < min)
          throw new RangeError('"value" argument is out of bounds');
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
      }
      Buffer2.prototype.writeUintLE = Buffer2.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let mul = 1;
        let i = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUintBE = Buffer2.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        byteLength2 = byteLength2 >>> 0;
        if (!noAssert) {
          const maxBytes = Math.pow(2, 8 * byteLength2) - 1;
          checkInt(this, value, offset, byteLength2, maxBytes, 0);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          this[offset + i] = value / mul & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeUint8 = Buffer2.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 255, 0);
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeUint16LE = Buffer2.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeUint16BE = Buffer2.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 65535, 0);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeUint32LE = Buffer2.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset + 3] = value >>> 24;
        this[offset + 2] = value >>> 16;
        this[offset + 1] = value >>> 8;
        this[offset] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeUint32BE = Buffer2.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 4294967295, 0);
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      function wrtBigUInt64LE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        lo = lo >> 8;
        buf[offset++] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        hi = hi >> 8;
        buf[offset++] = hi;
        return offset;
      }
      function wrtBigUInt64BE(buf, value, offset, min, max) {
        checkIntBI(value, min, max, buf, offset, 7);
        let lo = Number(value & BigInt(4294967295));
        buf[offset + 7] = lo;
        lo = lo >> 8;
        buf[offset + 6] = lo;
        lo = lo >> 8;
        buf[offset + 5] = lo;
        lo = lo >> 8;
        buf[offset + 4] = lo;
        let hi = Number(value >> BigInt(32) & BigInt(4294967295));
        buf[offset + 3] = hi;
        hi = hi >> 8;
        buf[offset + 2] = hi;
        hi = hi >> 8;
        buf[offset + 1] = hi;
        hi = hi >> 8;
        buf[offset] = hi;
        return offset + 8;
      }
      Buffer2.prototype.writeBigUInt64LE = defineBigIntMethod(function writeBigUInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeBigUInt64BE = defineBigIntMethod(function writeBigUInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, BigInt(0), BigInt("0xffffffffffffffff"));
      });
      Buffer2.prototype.writeIntLE = function writeIntLE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = 0;
        let mul = 1;
        let sub = 0;
        this[offset] = value & 255;
        while (++i < byteLength2 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeIntBE = function writeIntBE(value, offset, byteLength2, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          const limit = Math.pow(2, 8 * byteLength2 - 1);
          checkInt(this, value, offset, byteLength2, limit - 1, -limit);
        }
        let i = byteLength2 - 1;
        let mul = 1;
        let sub = 0;
        this[offset + i] = value & 255;
        while (--i >= 0 && (mul *= 256)) {
          if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
            sub = 1;
          }
          this[offset + i] = (value / mul >> 0) - sub & 255;
        }
        return offset + byteLength2;
      };
      Buffer2.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 1, 127, -128);
        if (value < 0)
          value = 255 + value + 1;
        this[offset] = value & 255;
        return offset + 1;
      };
      Buffer2.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        return offset + 2;
      };
      Buffer2.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 2, 32767, -32768);
        this[offset] = value >>> 8;
        this[offset + 1] = value & 255;
        return offset + 2;
      };
      Buffer2.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        this[offset] = value & 255;
        this[offset + 1] = value >>> 8;
        this[offset + 2] = value >>> 16;
        this[offset + 3] = value >>> 24;
        return offset + 4;
      };
      Buffer2.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert)
          checkInt(this, value, offset, 4, 2147483647, -2147483648);
        if (value < 0)
          value = 4294967295 + value + 1;
        this[offset] = value >>> 24;
        this[offset + 1] = value >>> 16;
        this[offset + 2] = value >>> 8;
        this[offset + 3] = value & 255;
        return offset + 4;
      };
      Buffer2.prototype.writeBigInt64LE = defineBigIntMethod(function writeBigInt64LE(value, offset = 0) {
        return wrtBigUInt64LE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      Buffer2.prototype.writeBigInt64BE = defineBigIntMethod(function writeBigInt64BE(value, offset = 0) {
        return wrtBigUInt64BE(this, value, offset, -BigInt("0x8000000000000000"), BigInt("0x7fffffffffffffff"));
      });
      function checkIEEE754(buf, value, offset, ext, max, min) {
        if (offset + ext > buf.length)
          throw new RangeError("Index out of range");
        if (offset < 0)
          throw new RangeError("Index out of range");
      }
      function writeFloat(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 4, 34028234663852886e22, -34028234663852886e22);
        }
        ieee754.write(buf, value, offset, littleEndian, 23, 4);
        return offset + 4;
      }
      Buffer2.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
        return writeFloat(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
        return writeFloat(this, value, offset, false, noAssert);
      };
      function writeDouble(buf, value, offset, littleEndian, noAssert) {
        value = +value;
        offset = offset >>> 0;
        if (!noAssert) {
          checkIEEE754(buf, value, offset, 8, 17976931348623157e292, -17976931348623157e292);
        }
        ieee754.write(buf, value, offset, littleEndian, 52, 8);
        return offset + 8;
      }
      Buffer2.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
        return writeDouble(this, value, offset, true, noAssert);
      };
      Buffer2.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
        return writeDouble(this, value, offset, false, noAssert);
      };
      Buffer2.prototype.copy = function copy(target, targetStart, start, end) {
        if (!Buffer2.isBuffer(target))
          throw new TypeError("argument should be a Buffer");
        if (!start)
          start = 0;
        if (!end && end !== 0)
          end = this.length;
        if (targetStart >= target.length)
          targetStart = target.length;
        if (!targetStart)
          targetStart = 0;
        if (end > 0 && end < start)
          end = start;
        if (end === start)
          return 0;
        if (target.length === 0 || this.length === 0)
          return 0;
        if (targetStart < 0) {
          throw new RangeError("targetStart out of bounds");
        }
        if (start < 0 || start >= this.length)
          throw new RangeError("Index out of range");
        if (end < 0)
          throw new RangeError("sourceEnd out of bounds");
        if (end > this.length)
          end = this.length;
        if (target.length - targetStart < end - start) {
          end = target.length - targetStart + start;
        }
        const len = end - start;
        if (this === target && typeof Uint8Array.prototype.copyWithin === "function") {
          this.copyWithin(targetStart, start, end);
        } else {
          Uint8Array.prototype.set.call(
            target,
            this.subarray(start, end),
            targetStart
          );
        }
        return len;
      };
      Buffer2.prototype.fill = function fill(val, start, end, encoding) {
        if (typeof val === "string") {
          if (typeof start === "string") {
            encoding = start;
            start = 0;
            end = this.length;
          } else if (typeof end === "string") {
            encoding = end;
            end = this.length;
          }
          if (encoding !== void 0 && typeof encoding !== "string") {
            throw new TypeError("encoding must be a string");
          }
          if (typeof encoding === "string" && !Buffer2.isEncoding(encoding)) {
            throw new TypeError("Unknown encoding: " + encoding);
          }
          if (val.length === 1) {
            const code = val.charCodeAt(0);
            if (encoding === "utf8" && code < 128 || encoding === "latin1") {
              val = code;
            }
          }
        } else if (typeof val === "number") {
          val = val & 255;
        } else if (typeof val === "boolean") {
          val = Number(val);
        }
        if (start < 0 || this.length < start || this.length < end) {
          throw new RangeError("Out of range index");
        }
        if (end <= start) {
          return this;
        }
        start = start >>> 0;
        end = end === void 0 ? this.length : end >>> 0;
        if (!val)
          val = 0;
        let i;
        if (typeof val === "number") {
          for (i = start; i < end; ++i) {
            this[i] = val;
          }
        } else {
          const bytes = Buffer2.isBuffer(val) ? val : Buffer2.from(val, encoding);
          const len = bytes.length;
          if (len === 0) {
            throw new TypeError('The value "' + val + '" is invalid for argument "value"');
          }
          for (i = 0; i < end - start; ++i) {
            this[i + start] = bytes[i % len];
          }
        }
        return this;
      };
      var errors = {};
      function E(sym, getMessage, Base) {
        errors[sym] = class NodeError extends Base {
          constructor() {
            super();
            Object.defineProperty(this, "message", {
              value: getMessage.apply(this, arguments),
              writable: true,
              configurable: true
            });
            this.name = `${this.name} [${sym}]`;
            this.stack;
            delete this.name;
          }
          get code() {
            return sym;
          }
          set code(value) {
            Object.defineProperty(this, "code", {
              configurable: true,
              enumerable: true,
              value,
              writable: true
            });
          }
          toString() {
            return `${this.name} [${sym}]: ${this.message}`;
          }
        };
      }
      E(
        "ERR_BUFFER_OUT_OF_BOUNDS",
        function(name) {
          if (name) {
            return `${name} is outside of buffer bounds`;
          }
          return "Attempt to access memory outside buffer bounds";
        },
        RangeError
      );
      E(
        "ERR_INVALID_ARG_TYPE",
        function(name, actual) {
          return `The "${name}" argument must be of type number. Received type ${typeof actual}`;
        },
        TypeError
      );
      E(
        "ERR_OUT_OF_RANGE",
        function(str, range, input) {
          let msg = `The value of "${str}" is out of range.`;
          let received = input;
          if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {
            received = addNumericalSeparator(String(input));
          } else if (typeof input === "bigint") {
            received = String(input);
            if (input > BigInt(2) ** BigInt(32) || input < -(BigInt(2) ** BigInt(32))) {
              received = addNumericalSeparator(received);
            }
            received += "n";
          }
          msg += ` It must be ${range}. Received ${received}`;
          return msg;
        },
        RangeError
      );
      function addNumericalSeparator(val) {
        let res = "";
        let i = val.length;
        const start = val[0] === "-" ? 1 : 0;
        for (; i >= start + 4; i -= 3) {
          res = `_${val.slice(i - 3, i)}${res}`;
        }
        return `${val.slice(0, i)}${res}`;
      }
      function checkBounds(buf, offset, byteLength2) {
        validateNumber(offset, "offset");
        if (buf[offset] === void 0 || buf[offset + byteLength2] === void 0) {
          boundsError(offset, buf.length - (byteLength2 + 1));
        }
      }
      function checkIntBI(value, min, max, buf, offset, byteLength2) {
        if (value > max || value < min) {
          const n = typeof min === "bigint" ? "n" : "";
          let range;
          if (byteLength2 > 3) {
            if (min === 0 || min === BigInt(0)) {
              range = `>= 0${n} and < 2${n} ** ${(byteLength2 + 1) * 8}${n}`;
            } else {
              range = `>= -(2${n} ** ${(byteLength2 + 1) * 8 - 1}${n}) and < 2 ** ${(byteLength2 + 1) * 8 - 1}${n}`;
            }
          } else {
            range = `>= ${min}${n} and <= ${max}${n}`;
          }
          throw new errors.ERR_OUT_OF_RANGE("value", range, value);
        }
        checkBounds(buf, offset, byteLength2);
      }
      function validateNumber(value, name) {
        if (typeof value !== "number") {
          throw new errors.ERR_INVALID_ARG_TYPE(name, "number", value);
        }
      }
      function boundsError(value, length, type) {
        if (Math.floor(value) !== value) {
          validateNumber(value, type);
          throw new errors.ERR_OUT_OF_RANGE(type || "offset", "an integer", value);
        }
        if (length < 0) {
          throw new errors.ERR_BUFFER_OUT_OF_BOUNDS();
        }
        throw new errors.ERR_OUT_OF_RANGE(
          type || "offset",
          `>= ${type ? 1 : 0} and <= ${length}`,
          value
        );
      }
      var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
      function base64clean(str) {
        str = str.split("=")[0];
        str = str.trim().replace(INVALID_BASE64_RE, "");
        if (str.length < 2)
          return "";
        while (str.length % 4 !== 0) {
          str = str + "=";
        }
        return str;
      }
      function utf8ToBytes(string, units) {
        units = units || Infinity;
        let codePoint;
        const length = string.length;
        let leadSurrogate = null;
        const bytes = [];
        for (let i = 0; i < length; ++i) {
          codePoint = string.charCodeAt(i);
          if (codePoint > 55295 && codePoint < 57344) {
            if (!leadSurrogate) {
              if (codePoint > 56319) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              } else if (i + 1 === length) {
                if ((units -= 3) > -1)
                  bytes.push(239, 191, 189);
                continue;
              }
              leadSurrogate = codePoint;
              continue;
            }
            if (codePoint < 56320) {
              if ((units -= 3) > -1)
                bytes.push(239, 191, 189);
              leadSurrogate = codePoint;
              continue;
            }
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
          } else if (leadSurrogate) {
            if ((units -= 3) > -1)
              bytes.push(239, 191, 189);
          }
          leadSurrogate = null;
          if (codePoint < 128) {
            if ((units -= 1) < 0)
              break;
            bytes.push(codePoint);
          } else if (codePoint < 2048) {
            if ((units -= 2) < 0)
              break;
            bytes.push(
              codePoint >> 6 | 192,
              codePoint & 63 | 128
            );
          } else if (codePoint < 65536) {
            if ((units -= 3) < 0)
              break;
            bytes.push(
              codePoint >> 12 | 224,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else if (codePoint < 1114112) {
            if ((units -= 4) < 0)
              break;
            bytes.push(
              codePoint >> 18 | 240,
              codePoint >> 12 & 63 | 128,
              codePoint >> 6 & 63 | 128,
              codePoint & 63 | 128
            );
          } else {
            throw new Error("Invalid code point");
          }
        }
        return bytes;
      }
      function asciiToBytes(str) {
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          byteArray.push(str.charCodeAt(i) & 255);
        }
        return byteArray;
      }
      function utf16leToBytes(str, units) {
        let c, hi, lo;
        const byteArray = [];
        for (let i = 0; i < str.length; ++i) {
          if ((units -= 2) < 0)
            break;
          c = str.charCodeAt(i);
          hi = c >> 8;
          lo = c % 256;
          byteArray.push(lo);
          byteArray.push(hi);
        }
        return byteArray;
      }
      function base64ToBytes(str) {
        return base64.toByteArray(base64clean(str));
      }
      function blitBuffer(src, dst, offset, length) {
        let i;
        for (i = 0; i < length; ++i) {
          if (i + offset >= dst.length || i >= src.length)
            break;
          dst[i + offset] = src[i];
        }
        return i;
      }
      function isInstance(obj, type) {
        return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
      }
      function numberIsNaN(obj) {
        return obj !== obj;
      }
      var hexSliceLookupTable = function() {
        const alphabet = "0123456789abcdef";
        const table = new Array(256);
        for (let i = 0; i < 16; ++i) {
          const i16 = i * 16;
          for (let j = 0; j < 16; ++j) {
            table[i16 + j] = alphabet[i] + alphabet[j];
          }
        }
        return table;
      }();
      function defineBigIntMethod(fn) {
        return typeof BigInt === "undefined" ? BufferBigIntNotDefined : fn;
      }
      function BufferBigIntNotDefined() {
        throw new Error("BigInt not supported");
      }
    }
  });

  // node_modules/safe-buffer/index.js
  var require_safe_buffer = __commonJS({
    "node_modules/safe-buffer/index.js"(exports, module) {
      var buffer = require_buffer2();
      var Buffer2 = buffer.Buffer;
      function copyProps(src, dst) {
        for (var key in src) {
          dst[key] = src[key];
        }
      }
      if (Buffer2.from && Buffer2.alloc && Buffer2.allocUnsafe && Buffer2.allocUnsafeSlow) {
        module.exports = buffer;
      } else {
        copyProps(buffer, exports);
        exports.Buffer = SafeBuffer;
      }
      function SafeBuffer(arg, encodingOrOffset, length) {
        return Buffer2(arg, encodingOrOffset, length);
      }
      SafeBuffer.prototype = Object.create(Buffer2.prototype);
      copyProps(Buffer2, SafeBuffer);
      SafeBuffer.from = function(arg, encodingOrOffset, length) {
        if (typeof arg === "number") {
          throw new TypeError("Argument must not be a number");
        }
        return Buffer2(arg, encodingOrOffset, length);
      };
      SafeBuffer.alloc = function(size, fill, encoding) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        var buf = Buffer2(size);
        if (fill !== void 0) {
          if (typeof encoding === "string") {
            buf.fill(fill, encoding);
          } else {
            buf.fill(fill);
          }
        } else {
          buf.fill(0);
        }
        return buf;
      };
      SafeBuffer.allocUnsafe = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return Buffer2(size);
      };
      SafeBuffer.allocUnsafeSlow = function(size) {
        if (typeof size !== "number") {
          throw new TypeError("Argument must be a number");
        }
        return buffer.SlowBuffer(size);
      };
    }
  });

  // node_modules/varuint-bitcoin/index.js
  var require_varuint_bitcoin = __commonJS({
    "node_modules/varuint-bitcoin/index.js"(exports, module) {
      "use strict";
      var Buffer2 = require_safe_buffer().Buffer;
      var MAX_SAFE_INTEGER = 9007199254740991;
      function checkUInt53(n) {
        if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
          throw new RangeError("value out of range");
      }
      function encode(number, buffer, offset) {
        checkUInt53(number);
        if (!buffer)
          buffer = Buffer2.allocUnsafe(encodingLength(number));
        if (!Buffer2.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        if (number < 253) {
          buffer.writeUInt8(number, offset);
          encode.bytes = 1;
        } else if (number <= 65535) {
          buffer.writeUInt8(253, offset);
          buffer.writeUInt16LE(number, offset + 1);
          encode.bytes = 3;
        } else if (number <= 4294967295) {
          buffer.writeUInt8(254, offset);
          buffer.writeUInt32LE(number, offset + 1);
          encode.bytes = 5;
        } else {
          buffer.writeUInt8(255, offset);
          buffer.writeUInt32LE(number >>> 0, offset + 1);
          buffer.writeUInt32LE(number / 4294967296 | 0, offset + 5);
          encode.bytes = 9;
        }
        return buffer;
      }
      function decode(buffer, offset) {
        if (!Buffer2.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        var first = buffer.readUInt8(offset);
        if (first < 253) {
          decode.bytes = 1;
          return first;
        } else if (first === 253) {
          decode.bytes = 3;
          return buffer.readUInt16LE(offset + 1);
        } else if (first === 254) {
          decode.bytes = 5;
          return buffer.readUInt32LE(offset + 1);
        } else {
          decode.bytes = 9;
          var lo = buffer.readUInt32LE(offset + 1);
          var hi = buffer.readUInt32LE(offset + 5);
          var number = hi * 4294967296 + lo;
          checkUInt53(number);
          return number;
        }
      }
      function encodingLength(number) {
        checkUInt53(number);
        return number < 253 ? 1 : number <= 65535 ? 3 : number <= 4294967295 ? 5 : 9;
      }
      module.exports = { encode, decode, encodingLength };
    }
  });

  // node_modules/tidecoinjs-lib/src/bufferutils.js
  var require_bufferutils = __commonJS({
    "node_modules/tidecoinjs-lib/src/bufferutils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.BufferReader = exports.BufferWriter = exports.cloneBuffer = exports.reverseBuffer = exports.writeUInt64LE = exports.readUInt64LE = exports.varuint = void 0;
      var types = require_types2();
      var { typeforce } = types;
      var varuint = require_varuint_bitcoin();
      exports.varuint = varuint;
      function verifuint(value, max) {
        if (typeof value !== "number")
          throw new Error("cannot write a non-number as a number");
        if (value < 0)
          throw new Error("specified a negative value for writing an unsigned value");
        if (value > max)
          throw new Error("RangeError: value out of range");
        if (Math.floor(value) !== value)
          throw new Error("value has a fractional component");
      }
      function readUInt64LE(buffer, offset) {
        const a = buffer.readUInt32LE(offset);
        let b = buffer.readUInt32LE(offset + 4);
        b *= 4294967296;
        verifuint(b + a, 9007199254740991);
        return b + a;
      }
      exports.readUInt64LE = readUInt64LE;
      function writeUInt64LE(buffer, value, offset) {
        verifuint(value, 9007199254740991);
        buffer.writeInt32LE(value & -1, offset);
        buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
        return offset + 8;
      }
      exports.writeUInt64LE = writeUInt64LE;
      function reverseBuffer(buffer) {
        if (buffer.length < 1)
          return buffer;
        let j = buffer.length - 1;
        let tmp = 0;
        for (let i = 0; i < buffer.length / 2; i++) {
          tmp = buffer[i];
          buffer[i] = buffer[j];
          buffer[j] = tmp;
          j--;
        }
        return buffer;
      }
      exports.reverseBuffer = reverseBuffer;
      function cloneBuffer(buffer) {
        const clone = Buffer.allocUnsafe(buffer.length);
        buffer.copy(clone);
        return clone;
      }
      exports.cloneBuffer = cloneBuffer;
      var BufferWriter = class _BufferWriter {
        static withCapacity(size) {
          return new _BufferWriter(Buffer.alloc(size));
        }
        constructor(buffer, offset = 0) {
          this.buffer = buffer;
          this.offset = offset;
          typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
        }
        writeUInt8(i) {
          this.offset = this.buffer.writeUInt8(i, this.offset);
        }
        writeInt32(i) {
          this.offset = this.buffer.writeInt32LE(i, this.offset);
        }
        writeUInt32(i) {
          this.offset = this.buffer.writeUInt32LE(i, this.offset);
        }
        writeUInt64(i) {
          this.offset = writeUInt64LE(this.buffer, i, this.offset);
        }
        writeVarInt(i) {
          varuint.encode(i, this.buffer, this.offset);
          this.offset += varuint.encode.bytes;
        }
        writeSlice(slice) {
          if (this.buffer.length < this.offset + slice.length) {
            throw new Error("Cannot write slice out of bounds");
          }
          this.offset += slice.copy(this.buffer, this.offset);
        }
        writeVarSlice(slice) {
          this.writeVarInt(slice.length);
          this.writeSlice(slice);
        }
        writeVector(vector) {
          this.writeVarInt(vector.length);
          vector.forEach((buf) => this.writeVarSlice(buf));
        }
        end() {
          if (this.buffer.length === this.offset) {
            return this.buffer;
          }
          throw new Error(`buffer size ${this.buffer.length}, offset ${this.offset}`);
        }
      };
      exports.BufferWriter = BufferWriter;
      var BufferReader = class {
        constructor(buffer, offset = 0) {
          this.buffer = buffer;
          this.offset = offset;
          typeforce(types.tuple(types.Buffer, types.UInt32), [buffer, offset]);
        }
        readUInt8() {
          const result = this.buffer.readUInt8(this.offset);
          this.offset++;
          return result;
        }
        readInt32() {
          const result = this.buffer.readInt32LE(this.offset);
          this.offset += 4;
          return result;
        }
        readUInt32() {
          const result = this.buffer.readUInt32LE(this.offset);
          this.offset += 4;
          return result;
        }
        readUInt64() {
          const result = readUInt64LE(this.buffer, this.offset);
          this.offset += 8;
          return result;
        }
        readVarInt() {
          const vi = varuint.decode(this.buffer, this.offset);
          this.offset += varuint.decode.bytes;
          return vi;
        }
        readSlice(n) {
          if (this.buffer.length < this.offset + n) {
            throw new Error("Cannot read slice out of bounds");
          }
          const result = this.buffer.slice(this.offset, this.offset + n);
          this.offset += n;
          return result;
        }
        readVarSlice() {
          return this.readSlice(this.readVarInt());
        }
        readVector() {
          const count = this.readVarInt();
          const vector = [];
          for (let i = 0; i < count; i++)
            vector.push(this.readVarSlice());
          return vector;
        }
      };
      exports.BufferReader = BufferReader;
    }
  });

  // node_modules/tidecoinjs-lib/src/merkle.js
  var require_merkle = __commonJS({
    "node_modules/tidecoinjs-lib/src/merkle.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.fastMerkleRoot = void 0;
      function fastMerkleRoot(values, digestFn) {
        if (!Array.isArray(values))
          throw TypeError("Expected values Array");
        if (typeof digestFn !== "function")
          throw TypeError("Expected digest Function");
        let length = values.length;
        const results = values.concat();
        while (length > 1) {
          let j = 0;
          for (let i = 0; i < length; i += 2, ++j) {
            const left = results[i];
            const right = i + 1 === length ? left : results[i + 1];
            const data = Buffer.concat([left, right]);
            results[j] = digestFn(data);
          }
          length = j;
        }
        return results[0];
      }
      exports.fastMerkleRoot = fastMerkleRoot;
    }
  });

  // node_modules/tidecoinjs-lib/src/transaction.js
  var require_transaction = __commonJS({
    "node_modules/tidecoinjs-lib/src/transaction.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Transaction = void 0;
      var bufferutils_1 = require_bufferutils();
      var bcrypto = require_crypto2();
      var bscript = require_script();
      var script_1 = require_script();
      var types = require_types2();
      var { typeforce } = types;
      function varSliceSize(someScript) {
        const length = someScript.length;
        return bufferutils_1.varuint.encodingLength(length) + length;
      }
      function vectorSize(someVector) {
        const length = someVector.length;
        return bufferutils_1.varuint.encodingLength(length) + someVector.reduce((sum, witness) => {
          return sum + varSliceSize(witness);
        }, 0);
      }
      var EMPTY_BUFFER = Buffer.allocUnsafe(0);
      var EMPTY_WITNESS = [];
      var ZERO = Buffer.from(
        "0000000000000000000000000000000000000000000000000000000000000000",
        "hex"
      );
      var ONE = Buffer.from(
        "0000000000000000000000000000000000000000000000000000000000000001",
        "hex"
      );
      var VALUE_UINT64_MAX = Buffer.from("ffffffffffffffff", "hex");
      var BLANK_OUTPUT = {
        script: EMPTY_BUFFER,
        valueBuffer: VALUE_UINT64_MAX
      };
      function isOutput(out) {
        return out.value !== void 0;
      }
      var Transaction = class _Transaction {
        constructor() {
          this.version = 1;
          this.locktime = 0;
          this.ins = [];
          this.outs = [];
        }
        static fromBuffer(buffer, _NO_STRICT) {
          const bufferReader = new bufferutils_1.BufferReader(buffer);
          const tx = new _Transaction();
          tx.version = bufferReader.readInt32();
          const marker = bufferReader.readUInt8();
          const flag = bufferReader.readUInt8();
          let hasWitnesses = false;
          if (marker === _Transaction.ADVANCED_TRANSACTION_MARKER && flag === _Transaction.ADVANCED_TRANSACTION_FLAG) {
            hasWitnesses = true;
          } else {
            bufferReader.offset -= 2;
          }
          const vinLen = bufferReader.readVarInt();
          for (let i = 0; i < vinLen; ++i) {
            tx.ins.push({
              hash: bufferReader.readSlice(32),
              index: bufferReader.readUInt32(),
              script: bufferReader.readVarSlice(),
              sequence: bufferReader.readUInt32(),
              witness: EMPTY_WITNESS
            });
          }
          const voutLen = bufferReader.readVarInt();
          for (let i = 0; i < voutLen; ++i) {
            tx.outs.push({
              value: bufferReader.readUInt64(),
              script: bufferReader.readVarSlice()
            });
          }
          if (hasWitnesses) {
            for (let i = 0; i < vinLen; ++i) {
              tx.ins[i].witness = bufferReader.readVector();
            }
            if (!tx.hasWitnesses())
              throw new Error("Transaction has superfluous witness data");
          }
          tx.locktime = bufferReader.readUInt32();
          if (_NO_STRICT)
            return tx;
          if (bufferReader.offset !== buffer.length)
            throw new Error("Transaction has unexpected data");
          return tx;
        }
        static fromHex(hex) {
          return _Transaction.fromBuffer(Buffer.from(hex, "hex"), false);
        }
        static isCoinbaseHash(buffer) {
          typeforce(types.Hash256bit, buffer);
          for (let i = 0; i < 32; ++i) {
            if (buffer[i] !== 0)
              return false;
          }
          return true;
        }
        isCoinbase() {
          return this.ins.length === 1 && _Transaction.isCoinbaseHash(this.ins[0].hash);
        }
        addInput(hash, index, sequence, scriptSig) {
          typeforce(
            types.tuple(
              types.Hash256bit,
              types.UInt32,
              types.maybe(types.UInt32),
              types.maybe(types.Buffer)
            ),
            arguments
          );
          if (types.Null(sequence)) {
            sequence = _Transaction.DEFAULT_SEQUENCE;
          }
          return this.ins.push({
            hash,
            index,
            script: scriptSig || EMPTY_BUFFER,
            sequence,
            witness: EMPTY_WITNESS
          }) - 1;
        }
        addOutput(scriptPubKey, value) {
          typeforce(types.tuple(types.Buffer, types.Satoshi), arguments);
          return this.outs.push({
            script: scriptPubKey,
            value
          }) - 1;
        }
        hasWitnesses() {
          return this.ins.some((x) => {
            return x.witness.length !== 0;
          });
        }
        weight() {
          const base = this.byteLength(false);
          const total = this.byteLength(true);
          return base * 3 + total;
        }
        virtualSize() {
          return Math.ceil(this.weight() / 4);
        }
        byteLength(_ALLOW_WITNESS = true) {
          const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
          return (hasWitnesses ? 10 : 8) + bufferutils_1.varuint.encodingLength(this.ins.length) + bufferutils_1.varuint.encodingLength(this.outs.length) + this.ins.reduce((sum, input) => {
            return sum + 40 + varSliceSize(input.script);
          }, 0) + this.outs.reduce((sum, output) => {
            return sum + 8 + varSliceSize(output.script);
          }, 0) + (hasWitnesses ? this.ins.reduce((sum, input) => {
            return sum + vectorSize(input.witness);
          }, 0) : 0);
        }
        clone() {
          const newTx = new _Transaction();
          newTx.version = this.version;
          newTx.locktime = this.locktime;
          newTx.ins = this.ins.map((txIn) => {
            return {
              hash: txIn.hash,
              index: txIn.index,
              script: txIn.script,
              sequence: txIn.sequence,
              witness: txIn.witness
            };
          });
          newTx.outs = this.outs.map((txOut) => {
            return {
              script: txOut.script,
              value: txOut.value
            };
          });
          return newTx;
        }
        /**
         * Hash transaction for signing a specific input.
         *
         * Bitcoin uses a different hash for each signed transaction input.
         * This method copies the transaction, makes the necessary changes based on the
         * hashType, and then hashes the result.
         * This hash can then be used to sign the provided transaction input.
         */
        hashForSignature(inIndex, prevOutScript, hashType) {
          typeforce(
            types.tuple(
              types.UInt32,
              types.Buffer,
              /* types.UInt8 */
              types.Number
            ),
            arguments
          );
          if (inIndex >= this.ins.length)
            return ONE;
          const ourScript = bscript.compile(
            bscript.decompile(prevOutScript).filter((x) => {
              return x !== script_1.OPS.OP_CODESEPARATOR;
            })
          );
          const txTmp = this.clone();
          if ((hashType & 31) === _Transaction.SIGHASH_NONE) {
            txTmp.outs = [];
            txTmp.ins.forEach((input, i) => {
              if (i === inIndex)
                return;
              input.sequence = 0;
            });
          } else if ((hashType & 31) === _Transaction.SIGHASH_SINGLE) {
            if (inIndex >= this.outs.length)
              return ONE;
            txTmp.outs.length = inIndex + 1;
            for (let i = 0; i < inIndex; i++) {
              txTmp.outs[i] = BLANK_OUTPUT;
            }
            txTmp.ins.forEach((input, y) => {
              if (y === inIndex)
                return;
              input.sequence = 0;
            });
          }
          if (hashType & _Transaction.SIGHASH_ANYONECANPAY) {
            txTmp.ins = [txTmp.ins[inIndex]];
            txTmp.ins[0].script = ourScript;
          } else {
            txTmp.ins.forEach((input) => {
              input.script = EMPTY_BUFFER;
            });
            txTmp.ins[inIndex].script = ourScript;
          }
          const buffer = Buffer.allocUnsafe(txTmp.byteLength(false) + 4);
          buffer.writeInt32LE(hashType, buffer.length - 4);
          txTmp.__toBuffer(buffer, 0, false);
          return bcrypto.hash256(buffer);
        }
        hashForWitnessV0(inIndex, prevOutScript, value, hashType) {
          typeforce(
            types.tuple(types.UInt32, types.Buffer, types.Satoshi, types.UInt32),
            arguments
          );
          let tbuffer = Buffer.from([]);
          let bufferWriter;
          let hashOutputs = ZERO;
          let hashPrevouts = ZERO;
          let hashSequence = ZERO;
          if (!(hashType & _Transaction.SIGHASH_ANYONECANPAY)) {
            tbuffer = Buffer.allocUnsafe(36 * this.ins.length);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.ins.forEach((txIn) => {
              bufferWriter.writeSlice(txIn.hash);
              bufferWriter.writeUInt32(txIn.index);
            });
            hashPrevouts = bcrypto.hash256(tbuffer);
          }
          if (!(hashType & _Transaction.SIGHASH_ANYONECANPAY) && (hashType & 31) !== _Transaction.SIGHASH_SINGLE && (hashType & 31) !== _Transaction.SIGHASH_NONE) {
            tbuffer = Buffer.allocUnsafe(4 * this.ins.length);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.ins.forEach((txIn) => {
              bufferWriter.writeUInt32(txIn.sequence);
            });
            hashSequence = bcrypto.hash256(tbuffer);
          }
          if ((hashType & 31) !== _Transaction.SIGHASH_SINGLE && (hashType & 31) !== _Transaction.SIGHASH_NONE) {
            const txOutsSize = this.outs.reduce((sum, output) => {
              return sum + 8 + varSliceSize(output.script);
            }, 0);
            tbuffer = Buffer.allocUnsafe(txOutsSize);
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            this.outs.forEach((out) => {
              bufferWriter.writeUInt64(out.value);
              bufferWriter.writeVarSlice(out.script);
            });
            hashOutputs = bcrypto.hash256(tbuffer);
          } else if ((hashType & 31) === _Transaction.SIGHASH_SINGLE && inIndex < this.outs.length) {
            const output = this.outs[inIndex];
            tbuffer = Buffer.allocUnsafe(8 + varSliceSize(output.script));
            bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
            bufferWriter.writeUInt64(output.value);
            bufferWriter.writeVarSlice(output.script);
            hashOutputs = bcrypto.hash256(tbuffer);
          }
          tbuffer = Buffer.allocUnsafe(156 + varSliceSize(prevOutScript));
          bufferWriter = new bufferutils_1.BufferWriter(tbuffer, 0);
          const input = this.ins[inIndex];
          bufferWriter.writeInt32(this.version);
          bufferWriter.writeSlice(hashPrevouts);
          bufferWriter.writeSlice(hashSequence);
          bufferWriter.writeSlice(input.hash);
          bufferWriter.writeUInt32(input.index);
          bufferWriter.writeVarSlice(prevOutScript);
          bufferWriter.writeUInt64(value);
          bufferWriter.writeUInt32(input.sequence);
          bufferWriter.writeSlice(hashOutputs);
          bufferWriter.writeUInt32(this.locktime);
          bufferWriter.writeUInt32(hashType);
          return bcrypto.hash256(tbuffer);
        }
        getHash(forWitness) {
          if (forWitness && this.isCoinbase())
            return Buffer.alloc(32, 0);
          return bcrypto.hash256(this.__toBuffer(void 0, void 0, forWitness));
        }
        getId() {
          return (0, bufferutils_1.reverseBuffer)(this.getHash(false)).toString(
            "hex"
          );
        }
        toBuffer(buffer, initialOffset) {
          return this.__toBuffer(buffer, initialOffset, true);
        }
        toHex() {
          return this.toBuffer(void 0, void 0).toString("hex");
        }
        setInputScript(index, scriptSig) {
          typeforce(types.tuple(types.Number, types.Buffer), arguments);
          this.ins[index].script = scriptSig;
        }
        setWitness(index, witness) {
          typeforce(types.tuple(types.Number, [types.Buffer]), arguments);
          this.ins[index].witness = witness;
        }
        __toBuffer(buffer, initialOffset, _ALLOW_WITNESS = false) {
          if (!buffer)
            buffer = Buffer.allocUnsafe(this.byteLength(_ALLOW_WITNESS));
          const bufferWriter = new bufferutils_1.BufferWriter(
            buffer,
            initialOffset || 0
          );
          bufferWriter.writeInt32(this.version);
          const hasWitnesses = _ALLOW_WITNESS && this.hasWitnesses();
          if (hasWitnesses) {
            bufferWriter.writeUInt8(_Transaction.ADVANCED_TRANSACTION_MARKER);
            bufferWriter.writeUInt8(_Transaction.ADVANCED_TRANSACTION_FLAG);
          }
          bufferWriter.writeVarInt(this.ins.length);
          this.ins.forEach((txIn) => {
            bufferWriter.writeSlice(txIn.hash);
            bufferWriter.writeUInt32(txIn.index);
            bufferWriter.writeVarSlice(txIn.script);
            bufferWriter.writeUInt32(txIn.sequence);
          });
          bufferWriter.writeVarInt(this.outs.length);
          this.outs.forEach((txOut) => {
            if (isOutput(txOut)) {
              bufferWriter.writeUInt64(txOut.value);
            } else {
              bufferWriter.writeSlice(txOut.valueBuffer);
            }
            bufferWriter.writeVarSlice(txOut.script);
          });
          if (hasWitnesses) {
            this.ins.forEach((input) => {
              bufferWriter.writeVector(input.witness);
            });
          }
          bufferWriter.writeUInt32(this.locktime);
          if (initialOffset !== void 0)
            return buffer.slice(initialOffset, bufferWriter.offset);
          return buffer;
        }
      };
      exports.Transaction = Transaction;
      Transaction.DEFAULT_SEQUENCE = 4294967295;
      Transaction.SIGHASH_DEFAULT = 0;
      Transaction.SIGHASH_ALL = 1;
      Transaction.SIGHASH_NONE = 2;
      Transaction.SIGHASH_SINGLE = 3;
      Transaction.SIGHASH_ANYONECANPAY = 128;
      Transaction.SIGHASH_OUTPUT_MASK = 3;
      Transaction.SIGHASH_INPUT_MASK = 128;
      Transaction.ADVANCED_TRANSACTION_MARKER = 0;
      Transaction.ADVANCED_TRANSACTION_FLAG = 1;
    }
  });

  // node_modules/tidecoinjs-lib/src/block.js
  var require_block = __commonJS({
    "node_modules/tidecoinjs-lib/src/block.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Block = void 0;
      var bufferutils_1 = require_bufferutils();
      var bcrypto = require_crypto2();
      var merkle_1 = require_merkle();
      var transaction_1 = require_transaction();
      var types = require_types2();
      var { typeforce } = types;
      var errorMerkleNoTxes = new TypeError(
        "Cannot compute merkle root for zero transactions"
      );
      var errorWitnessNotSegwit = new TypeError(
        "Cannot compute witness commit for non-segwit block"
      );
      var Block = class _Block {
        constructor() {
          this.version = 1;
          this.prevHash = void 0;
          this.merkleRoot = void 0;
          this.timestamp = 0;
          this.witnessCommit = void 0;
          this.bits = 0;
          this.nonce = 0;
          this.transactions = void 0;
        }
        static fromBuffer(buffer) {
          if (buffer.length < 80)
            throw new Error("Buffer too small (< 80 bytes)");
          const bufferReader = new bufferutils_1.BufferReader(buffer);
          const block = new _Block();
          block.version = bufferReader.readInt32();
          block.prevHash = bufferReader.readSlice(32);
          block.merkleRoot = bufferReader.readSlice(32);
          block.timestamp = bufferReader.readUInt32();
          block.bits = bufferReader.readUInt32();
          block.nonce = bufferReader.readUInt32();
          if (buffer.length === 80)
            return block;
          const readTransaction = () => {
            const tx = transaction_1.Transaction.fromBuffer(
              bufferReader.buffer.slice(bufferReader.offset),
              true
            );
            bufferReader.offset += tx.byteLength();
            return tx;
          };
          const nTransactions = bufferReader.readVarInt();
          block.transactions = [];
          for (let i = 0; i < nTransactions; ++i) {
            const tx = readTransaction();
            block.transactions.push(tx);
          }
          const witnessCommit = block.getWitnessCommit();
          if (witnessCommit)
            block.witnessCommit = witnessCommit;
          return block;
        }
        static fromHex(hex) {
          return _Block.fromBuffer(Buffer.from(hex, "hex"));
        }
        static calculateTarget(bits) {
          const exponent = ((bits & 4278190080) >> 24) - 3;
          const mantissa = bits & 8388607;
          const target = Buffer.alloc(32, 0);
          target.writeUIntBE(mantissa, 29 - exponent, 3);
          return target;
        }
        static calculateMerkleRoot(transactions, forWitness) {
          typeforce([{ getHash: types.Function }], transactions);
          if (transactions.length === 0)
            throw errorMerkleNoTxes;
          if (forWitness && !txesHaveWitnessCommit(transactions))
            throw errorWitnessNotSegwit;
          const hashes = transactions.map(
            (transaction) => transaction.getHash(forWitness)
          );
          const rootHash = (0, merkle_1.fastMerkleRoot)(hashes, bcrypto.hash256);
          return forWitness ? bcrypto.hash256(
            Buffer.concat([rootHash, transactions[0].ins[0].witness[0]])
          ) : rootHash;
        }
        getWitnessCommit() {
          if (!txesHaveWitnessCommit(this.transactions))
            return null;
          const witnessCommits = this.transactions[0].outs.filter(
            (out) => out.script.slice(0, 6).equals(Buffer.from("6a24aa21a9ed", "hex"))
          ).map((out) => out.script.slice(6, 38));
          if (witnessCommits.length === 0)
            return null;
          const result = witnessCommits[witnessCommits.length - 1];
          if (!(result instanceof Buffer && result.length === 32))
            return null;
          return result;
        }
        hasWitnessCommit() {
          if (this.witnessCommit instanceof Buffer && this.witnessCommit.length === 32)
            return true;
          if (this.getWitnessCommit() !== null)
            return true;
          return false;
        }
        hasWitness() {
          return anyTxHasWitness(this.transactions);
        }
        weight() {
          const base = this.byteLength(false, false);
          const total = this.byteLength(false, true);
          return base * 3 + total;
        }
        byteLength(headersOnly, allowWitness = true) {
          if (headersOnly || !this.transactions)
            return 80;
          return 80 + bufferutils_1.varuint.encodingLength(this.transactions.length) + this.transactions.reduce((a, x) => a + x.byteLength(allowWitness), 0);
        }
        getHash() {
          return bcrypto.hash256(this.toBuffer(true));
        }
        getId() {
          return (0, bufferutils_1.reverseBuffer)(this.getHash()).toString("hex");
        }
        getUTCDate() {
          const date = /* @__PURE__ */ new Date(0);
          date.setUTCSeconds(this.timestamp);
          return date;
        }
        // TODO: buffer, offset compatibility
        toBuffer(headersOnly) {
          const buffer = Buffer.allocUnsafe(this.byteLength(headersOnly));
          const bufferWriter = new bufferutils_1.BufferWriter(buffer);
          bufferWriter.writeInt32(this.version);
          bufferWriter.writeSlice(this.prevHash);
          bufferWriter.writeSlice(this.merkleRoot);
          bufferWriter.writeUInt32(this.timestamp);
          bufferWriter.writeUInt32(this.bits);
          bufferWriter.writeUInt32(this.nonce);
          if (headersOnly || !this.transactions)
            return buffer;
          bufferutils_1.varuint.encode(
            this.transactions.length,
            buffer,
            bufferWriter.offset
          );
          bufferWriter.offset += bufferutils_1.varuint.encode.bytes;
          this.transactions.forEach((tx) => {
            const txSize = tx.byteLength();
            tx.toBuffer(buffer, bufferWriter.offset);
            bufferWriter.offset += txSize;
          });
          return buffer;
        }
        toHex(headersOnly) {
          return this.toBuffer(headersOnly).toString("hex");
        }
        checkTxRoots() {
          const hasWitnessCommit = this.hasWitnessCommit();
          if (!hasWitnessCommit && this.hasWitness())
            return false;
          return this.__checkMerkleRoot() && (hasWitnessCommit ? this.__checkWitnessCommit() : true);
        }
        checkProofOfWork() {
          const hash = (0, bufferutils_1.reverseBuffer)(this.getHash());
          const target = _Block.calculateTarget(this.bits);
          return hash.compare(target) <= 0;
        }
        __checkMerkleRoot() {
          if (!this.transactions)
            throw errorMerkleNoTxes;
          const actualMerkleRoot = _Block.calculateMerkleRoot(this.transactions);
          return this.merkleRoot.compare(actualMerkleRoot) === 0;
        }
        __checkWitnessCommit() {
          if (!this.transactions)
            throw errorMerkleNoTxes;
          if (!this.hasWitnessCommit())
            throw errorWitnessNotSegwit;
          const actualWitnessCommit = _Block.calculateMerkleRoot(
            this.transactions,
            true
          );
          return this.witnessCommit.compare(actualWitnessCommit) === 0;
        }
      };
      exports.Block = Block;
      function txesHaveWitnessCommit(transactions) {
        return transactions instanceof Array && transactions[0] && transactions[0].ins && transactions[0].ins instanceof Array && transactions[0].ins[0] && transactions[0].ins[0].witness && transactions[0].ins[0].witness instanceof Array && transactions[0].ins[0].witness.length > 0;
      }
      function anyTxHasWitness(transactions) {
        return transactions instanceof Array && transactions.some(
          (tx) => typeof tx === "object" && tx.ins instanceof Array && tx.ins.some(
            (input) => typeof input === "object" && input.witness instanceof Array && input.witness.length > 0
          )
        );
      }
    }
  });

  // node_modules/tip174/src/lib/typeFields.js
  var require_typeFields = __commonJS({
    "node_modules/tip174/src/lib/typeFields.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var GlobalTypes;
      (function(GlobalTypes2) {
        GlobalTypes2[GlobalTypes2["UNSIGNED_TX"] = 0] = "UNSIGNED_TX";
        GlobalTypes2[GlobalTypes2["GLOBAL_XPUB"] = 1] = "GLOBAL_XPUB";
      })(GlobalTypes = exports.GlobalTypes || (exports.GlobalTypes = {}));
      exports.GLOBAL_TYPE_NAMES = ["unsignedTx", "globalXpub"];
      var InputTypes;
      (function(InputTypes2) {
        InputTypes2[InputTypes2["NON_WITNESS_UTXO"] = 0] = "NON_WITNESS_UTXO";
        InputTypes2[InputTypes2["WITNESS_UTXO"] = 1] = "WITNESS_UTXO";
        InputTypes2[InputTypes2["PARTIAL_SIG"] = 2] = "PARTIAL_SIG";
        InputTypes2[InputTypes2["SIGHASH_TYPE"] = 3] = "SIGHASH_TYPE";
        InputTypes2[InputTypes2["REDEEM_SCRIPT"] = 4] = "REDEEM_SCRIPT";
        InputTypes2[InputTypes2["WITNESS_SCRIPT"] = 5] = "WITNESS_SCRIPT";
        InputTypes2[InputTypes2["BIP32_DERIVATION"] = 6] = "BIP32_DERIVATION";
        InputTypes2[InputTypes2["FINAL_SCRIPTSIG"] = 7] = "FINAL_SCRIPTSIG";
        InputTypes2[InputTypes2["FINAL_SCRIPTWITNESS"] = 8] = "FINAL_SCRIPTWITNESS";
        InputTypes2[InputTypes2["POR_COMMITMENT"] = 9] = "POR_COMMITMENT";
      })(InputTypes = exports.InputTypes || (exports.InputTypes = {}));
      exports.INPUT_TYPE_NAMES = [
        "nonWitnessUtxo",
        "witnessUtxo",
        "partialSig",
        "sighashType",
        "redeemScript",
        "witnessScript",
        "bip32Derivation",
        "finalScriptSig",
        "finalScriptWitness",
        "porCommitment"
      ];
      var OutputTypes;
      (function(OutputTypes2) {
        OutputTypes2[OutputTypes2["REDEEM_SCRIPT"] = 0] = "REDEEM_SCRIPT";
        OutputTypes2[OutputTypes2["WITNESS_SCRIPT"] = 1] = "WITNESS_SCRIPT";
        OutputTypes2[OutputTypes2["BIP32_DERIVATION"] = 2] = "BIP32_DERIVATION";
      })(OutputTypes = exports.OutputTypes || (exports.OutputTypes = {}));
      exports.OUTPUT_TYPE_NAMES = [
        "redeemScript",
        "witnessScript",
        "bip32Derivation"
      ];
    }
  });

  // node_modules/tip174/src/lib/converter/global/globalXpub.js
  var require_globalXpub = __commonJS({
    "node_modules/tip174/src/lib/converter/global/globalXpub.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var range = (n) => [...Array(n).keys()];
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.GlobalTypes.GLOBAL_XPUB) {
          throw new Error(
            "Decode Error: could not decode globalXpub with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.key.length !== 79 || ![2, 3].includes(keyVal.key[46])) {
          throw new Error(
            "Decode Error: globalXpub has invalid extended pubkey in key 0x" + keyVal.key.toString("hex")
          );
        }
        if (keyVal.value.length / 4 % 1 !== 0) {
          throw new Error(
            "Decode Error: Global GLOBAL_XPUB value length should be multiple of 4"
          );
        }
        const extendedPubkey = keyVal.key.slice(1);
        const data = {
          masterFingerprint: keyVal.value.slice(0, 4),
          extendedPubkey,
          path: "m"
        };
        for (const i of range(keyVal.value.length / 4 - 1)) {
          const val = keyVal.value.readUInt32LE(i * 4 + 4);
          const isHard = !!(val & 2147483648);
          const idx = val & 2147483647;
          data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
        }
        return data;
      }
      exports.decode = decode;
      function encode(data) {
        const head = Buffer.from([typeFields_1.GlobalTypes.GLOBAL_XPUB]);
        const key = Buffer.concat([head, data.extendedPubkey]);
        const splitPath = data.path.split("/");
        const value = Buffer.allocUnsafe(splitPath.length * 4);
        data.masterFingerprint.copy(value, 0);
        let offset = 4;
        splitPath.slice(1).forEach((level) => {
          const isHard = level.slice(-1) === "'";
          let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
          if (isHard)
            num += 2147483648;
          value.writeUInt32LE(num, offset);
          offset += 4;
        });
        return {
          key,
          value
        };
      }
      exports.encode = encode;
      exports.expected = "{ masterFingerprint: Buffer; extendedPubkey: Buffer; path: string; }";
      function check(data) {
        const epk = data.extendedPubkey;
        const mfp = data.masterFingerprint;
        const p = data.path;
        return Buffer.isBuffer(epk) && epk.length === 78 && [2, 3].indexOf(epk[45]) > -1 && Buffer.isBuffer(mfp) && mfp.length === 4 && typeof p === "string" && !!p.match(/^m(\/\d+'?)*$/);
      }
      exports.check = check;
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.extendedPubkey.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.extendedPubkey.equals(item.extendedPubkey)).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/tip174/src/lib/converter/global/unsignedTx.js
  var require_unsignedTx = __commonJS({
    "node_modules/tip174/src/lib/converter/global/unsignedTx.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function encode(data) {
        return {
          key: Buffer.from([typeFields_1.GlobalTypes.UNSIGNED_TX]),
          value: data.toBuffer()
        };
      }
      exports.encode = encode;
    }
  });

  // node_modules/tip174/src/lib/converter/input/finalScriptSig.js
  var require_finalScriptSig = __commonJS({
    "node_modules/tip174/src/lib/converter/input/finalScriptSig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTSIG) {
          throw new Error(
            "Decode Error: could not decode finalScriptSig with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTSIG]);
        return {
          key,
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.finalScriptSig === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/input/finalScriptWitness.js
  var require_finalScriptWitness = __commonJS({
    "node_modules/tip174/src/lib/converter/input/finalScriptWitness.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.FINAL_SCRIPTWITNESS) {
          throw new Error(
            "Decode Error: could not decode finalScriptWitness with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.FINAL_SCRIPTWITNESS]);
        return {
          key,
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.finalScriptWitness === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/input/nonWitnessUtxo.js
  var require_nonWitnessUtxo = __commonJS({
    "node_modules/tip174/src/lib/converter/input/nonWitnessUtxo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.NON_WITNESS_UTXO) {
          throw new Error(
            "Decode Error: could not decode nonWitnessUtxo with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value;
      }
      exports.decode = decode;
      function encode(data) {
        return {
          key: Buffer.from([typeFields_1.InputTypes.NON_WITNESS_UTXO]),
          value: data
        };
      }
      exports.encode = encode;
      exports.expected = "Buffer";
      function check(data) {
        return Buffer.isBuffer(data);
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.nonWitnessUtxo === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/input/partialSig.js
  var require_partialSig = __commonJS({
    "node_modules/tip174/src/lib/converter/input/partialSig.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.PARTIAL_SIG) {
          throw new Error(
            "Decode Error: could not decode partialSig with key 0x" + keyVal.key.toString("hex")
          );
        }
        if (!(keyVal.key.length === 898)) {
          throw new Error(
            "Decode Error: partialSig has invalid pubkey in key 0x" + keyVal.key.toString("hex")
          );
        }
        const pubkey = keyVal.key.slice(1);
        return {
          pubkey,
          signature: keyVal.value
        };
      }
      exports.decode = decode;
      function encode(pSig) {
        const head = Buffer.from([typeFields_1.InputTypes.PARTIAL_SIG]);
        return {
          key: Buffer.concat([head, pSig.pubkey]),
          value: pSig.signature
        };
      }
      exports.encode = encode;
      exports.expected = "{ pubkey: Buffer; signature: Buffer; }";
      function check(data) {
        return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.signature) && [898].includes(data.pubkey.length);
      }
      exports.check = check;
      function canAddToArray(array, item, dupeSet) {
        const dupeString = item.pubkey.toString("hex");
        if (dupeSet.has(dupeString))
          return false;
        dupeSet.add(dupeString);
        return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
      }
      exports.canAddToArray = canAddToArray;
    }
  });

  // node_modules/tip174/src/lib/converter/input/porCommitment.js
  var require_porCommitment = __commonJS({
    "node_modules/tip174/src/lib/converter/input/porCommitment.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.POR_COMMITMENT) {
          throw new Error(
            "Decode Error: could not decode porCommitment with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value.toString("utf8");
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.POR_COMMITMENT]);
        return {
          key,
          value: Buffer.from(data, "utf8")
        };
      }
      exports.encode = encode;
      exports.expected = "string";
      function check(data) {
        return typeof data === "string";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.porCommitment === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/input/sighashType.js
  var require_sighashType = __commonJS({
    "node_modules/tip174/src/lib/converter/input/sighashType.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.SIGHASH_TYPE) {
          throw new Error(
            "Decode Error: could not decode sighashType with key 0x" + keyVal.key.toString("hex")
          );
        }
        return keyVal.value.readUInt32LE(0);
      }
      exports.decode = decode;
      function encode(data) {
        const key = Buffer.from([typeFields_1.InputTypes.SIGHASH_TYPE]);
        const value = Buffer.allocUnsafe(4);
        value.writeUInt32LE(data, 0);
        return {
          key,
          value
        };
      }
      exports.encode = encode;
      exports.expected = "number";
      function check(data) {
        return typeof data === "number";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.sighashType === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/varint.js
  var require_varint = __commonJS({
    "node_modules/tip174/src/lib/converter/varint.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var MAX_SAFE_INTEGER = 9007199254740991;
      function checkUInt53(n) {
        if (n < 0 || n > MAX_SAFE_INTEGER || n % 1 !== 0)
          throw new RangeError("value out of range");
      }
      function encode(_number, buffer, offset) {
        checkUInt53(_number);
        if (!buffer)
          buffer = Buffer.allocUnsafe(encodingLength(_number));
        if (!Buffer.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        if (_number < 253) {
          buffer.writeUInt8(_number, offset);
          Object.assign(encode, { bytes: 1 });
        } else if (_number <= 65535) {
          buffer.writeUInt8(253, offset);
          buffer.writeUInt16LE(_number, offset + 1);
          Object.assign(encode, { bytes: 3 });
        } else if (_number <= 4294967295) {
          buffer.writeUInt8(254, offset);
          buffer.writeUInt32LE(_number, offset + 1);
          Object.assign(encode, { bytes: 5 });
        } else {
          buffer.writeUInt8(255, offset);
          buffer.writeUInt32LE(_number >>> 0, offset + 1);
          buffer.writeUInt32LE(_number / 4294967296 | 0, offset + 5);
          Object.assign(encode, { bytes: 9 });
        }
        return buffer;
      }
      exports.encode = encode;
      function decode(buffer, offset) {
        if (!Buffer.isBuffer(buffer))
          throw new TypeError("buffer must be a Buffer instance");
        if (!offset)
          offset = 0;
        const first = buffer.readUInt8(offset);
        if (first < 253) {
          Object.assign(decode, { bytes: 1 });
          return first;
        } else if (first === 253) {
          Object.assign(decode, { bytes: 3 });
          return buffer.readUInt16LE(offset + 1);
        } else if (first === 254) {
          Object.assign(decode, { bytes: 5 });
          return buffer.readUInt32LE(offset + 1);
        } else {
          Object.assign(decode, { bytes: 9 });
          const lo = buffer.readUInt32LE(offset + 1);
          const hi = buffer.readUInt32LE(offset + 5);
          const _number = hi * 4294967296 + lo;
          checkUInt53(_number);
          return _number;
        }
      }
      exports.decode = decode;
      function encodingLength(_number) {
        checkUInt53(_number);
        return _number < 253 ? 1 : _number <= 65535 ? 3 : _number <= 4294967295 ? 5 : 9;
      }
      exports.encodingLength = encodingLength;
    }
  });

  // node_modules/tip174/src/lib/converter/tools.js
  var require_tools = __commonJS({
    "node_modules/tip174/src/lib/converter/tools.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var varuint = require_varint();
      exports.range = (n) => [...Array(n).keys()];
      function reverseBuffer(buffer) {
        if (buffer.length < 1)
          return buffer;
        let j = buffer.length - 1;
        let tmp = 0;
        for (let i = 0; i < buffer.length / 2; i++) {
          tmp = buffer[i];
          buffer[i] = buffer[j];
          buffer[j] = tmp;
          j--;
        }
        return buffer;
      }
      exports.reverseBuffer = reverseBuffer;
      function keyValsToBuffer(keyVals) {
        const buffers = keyVals.map(keyValToBuffer);
        buffers.push(Buffer.from([0]));
        return Buffer.concat(buffers);
      }
      exports.keyValsToBuffer = keyValsToBuffer;
      function keyValToBuffer(keyVal) {
        const keyLen = keyVal.key.length;
        const valLen = keyVal.value.length;
        const keyVarIntLen = varuint.encodingLength(keyLen);
        const valVarIntLen = varuint.encodingLength(valLen);
        const buffer = Buffer.allocUnsafe(
          keyVarIntLen + keyLen + valVarIntLen + valLen
        );
        varuint.encode(keyLen, buffer, 0);
        keyVal.key.copy(buffer, keyVarIntLen);
        varuint.encode(valLen, buffer, keyVarIntLen + keyLen);
        keyVal.value.copy(buffer, keyVarIntLen + keyLen + valVarIntLen);
        return buffer;
      }
      exports.keyValToBuffer = keyValToBuffer;
      function verifuint(value, max) {
        if (typeof value !== "number")
          throw new Error("cannot write a non-number as a number");
        if (value < 0)
          throw new Error("specified a negative value for writing an unsigned value");
        if (value > max)
          throw new Error("RangeError: value out of range");
        if (Math.floor(value) !== value)
          throw new Error("value has a fractional component");
      }
      function readUInt64LE(buffer, offset) {
        const a = buffer.readUInt32LE(offset);
        let b = buffer.readUInt32LE(offset + 4);
        b *= 4294967296;
        verifuint(b + a, 9007199254740991);
        return b + a;
      }
      exports.readUInt64LE = readUInt64LE;
      function writeUInt64LE(buffer, value, offset) {
        verifuint(value, 9007199254740991);
        buffer.writeInt32LE(value & -1, offset);
        buffer.writeUInt32LE(Math.floor(value / 4294967296), offset + 4);
        return offset + 8;
      }
      exports.writeUInt64LE = writeUInt64LE;
    }
  });

  // node_modules/tip174/src/lib/converter/input/witnessUtxo.js
  var require_witnessUtxo = __commonJS({
    "node_modules/tip174/src/lib/converter/input/witnessUtxo.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var tools_1 = require_tools();
      var varuint = require_varint();
      function decode(keyVal) {
        if (keyVal.key[0] !== typeFields_1.InputTypes.WITNESS_UTXO) {
          throw new Error(
            "Decode Error: could not decode witnessUtxo with key 0x" + keyVal.key.toString("hex")
          );
        }
        const value = tools_1.readUInt64LE(keyVal.value, 0);
        let _offset = 8;
        const scriptLen = varuint.decode(keyVal.value, _offset);
        _offset += varuint.encodingLength(scriptLen);
        const script = keyVal.value.slice(_offset);
        if (script.length !== scriptLen) {
          throw new Error("Decode Error: WITNESS_UTXO script is not proper length");
        }
        return {
          script,
          value
        };
      }
      exports.decode = decode;
      function encode(data) {
        const { script, value } = data;
        const varintLen = varuint.encodingLength(script.length);
        const result = Buffer.allocUnsafe(8 + varintLen + script.length);
        tools_1.writeUInt64LE(result, value, 0);
        varuint.encode(script.length, result, 8);
        script.copy(result, 8 + varintLen);
        return {
          key: Buffer.from([typeFields_1.InputTypes.WITNESS_UTXO]),
          value: result
        };
      }
      exports.encode = encode;
      exports.expected = "{ script: Buffer; value: number; }";
      function check(data) {
        return Buffer.isBuffer(data.script) && typeof data.value === "number";
      }
      exports.check = check;
      function canAdd(currentData, newData) {
        return !!currentData && !!newData && currentData.witnessUtxo === void 0;
      }
      exports.canAdd = canAdd;
    }
  });

  // node_modules/tip174/src/lib/converter/shared/bip32Derivation.js
  var require_bip32Derivation = __commonJS({
    "node_modules/tip174/src/lib/converter/shared/bip32Derivation.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var range = (n) => [...Array(n).keys()];
      var isValidDERKey = (pubkey) => pubkey.length === 898 && 7 === pubkey[0];
      function makeConverter(TYPE_BYTE, isValidPubkey = isValidDERKey) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode bip32Derivation with key 0x" + keyVal.key.toString("hex")
            );
          }
          const pubkey = keyVal.key.slice(1);
          if (!isValidPubkey(pubkey)) {
            throw new Error(
              "Decode Error: bip32Derivation has invalid pubkey in key 0x" + keyVal.key.toString("hex")
            );
          }
          if (keyVal.value.length / 4 % 1 !== 0) {
            throw new Error(
              "Decode Error: Input BIP32_DERIVATION value length should be multiple of 4"
            );
          }
          const data = {
            masterFingerprint: keyVal.value.slice(0, 4),
            pubkey,
            path: "m"
          };
          for (const i of range(keyVal.value.length / 4 - 1)) {
            const val = keyVal.value.readUInt32LE(i * 4 + 4);
            const isHard = !!(val & 2147483648);
            const idx = val & 2147483647;
            data.path += "/" + idx.toString(10) + (isHard ? "'" : "");
          }
          return data;
        }
        function encode(data) {
          const head = Buffer.from([TYPE_BYTE]);
          const key = Buffer.concat([head, data.pubkey]);
          const splitPath = data.path.split("/");
          const value = Buffer.allocUnsafe(splitPath.length * 4);
          data.masterFingerprint.copy(value, 0);
          let offset = 4;
          splitPath.slice(1).forEach((level) => {
            const isHard = level.slice(-1) === "'";
            let num = 2147483647 & parseInt(isHard ? level.slice(0, -1) : level, 10);
            if (isHard)
              num += 2147483648;
            value.writeUInt32LE(num, offset);
            offset += 4;
          });
          return {
            key,
            value
          };
        }
        const expected = "{ masterFingerprint: Buffer; pubkey: Buffer; path: string; }";
        function check(data) {
          return Buffer.isBuffer(data.pubkey) && Buffer.isBuffer(data.masterFingerprint) && typeof data.path === "string" && isValidPubkey(data.pubkey) && data.masterFingerprint.length === 4;
        }
        function canAddToArray(array, item, dupeSet) {
          const dupeString = item.pubkey.toString("hex");
          if (dupeSet.has(dupeString))
            return false;
          dupeSet.add(dupeString);
          return array.filter((v) => v.pubkey.equals(item.pubkey)).length === 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAddToArray
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/tip174/src/lib/converter/shared/checkPubkey.js
  var require_checkPubkey = __commonJS({
    "node_modules/tip174/src/lib/converter/shared/checkPubkey.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeChecker(pubkeyTypes) {
        return checkPubkey;
        function checkPubkey(keyVal) {
          let pubkey;
          if (pubkeyTypes.includes(keyVal.key[0])) {
            pubkey = keyVal.key.slice(1);
            if (pubkey.length !== 898) {
              throw new Error(
                "Format Error: invalid pubkey in key 0x" + keyVal.key.toString("hex")
              );
            }
          }
          return pubkey;
        }
      }
      exports.makeChecker = makeChecker;
    }
  });

  // node_modules/tip174/src/lib/converter/shared/redeemScript.js
  var require_redeemScript = __commonJS({
    "node_modules/tip174/src/lib/converter/shared/redeemScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeConverter(TYPE_BYTE) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode redeemScript with key 0x" + keyVal.key.toString("hex")
            );
          }
          return keyVal.value;
        }
        function encode(data) {
          const key = Buffer.from([TYPE_BYTE]);
          return {
            key,
            value: data
          };
        }
        const expected = "Buffer";
        function check(data) {
          return Buffer.isBuffer(data);
        }
        function canAdd(currentData, newData) {
          return !!currentData && !!newData && currentData.redeemScript === void 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAdd
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/tip174/src/lib/converter/shared/witnessScript.js
  var require_witnessScript = __commonJS({
    "node_modules/tip174/src/lib/converter/shared/witnessScript.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      function makeConverter(TYPE_BYTE) {
        function decode(keyVal) {
          if (keyVal.key[0] !== TYPE_BYTE) {
            throw new Error(
              "Decode Error: could not decode witnessScript with key 0x" + keyVal.key.toString("hex")
            );
          }
          return keyVal.value;
        }
        function encode(data) {
          const key = Buffer.from([TYPE_BYTE]);
          return {
            key,
            value: data
          };
        }
        const expected = "Buffer";
        function check(data) {
          return Buffer.isBuffer(data);
        }
        function canAdd(currentData, newData) {
          return !!currentData && !!newData && currentData.witnessScript === void 0;
        }
        return {
          decode,
          encode,
          check,
          expected,
          canAdd
        };
      }
      exports.makeConverter = makeConverter;
    }
  });

  // node_modules/tip174/src/lib/converter/index.js
  var require_converter = __commonJS({
    "node_modules/tip174/src/lib/converter/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var typeFields_1 = require_typeFields();
      var globalXpub = require_globalXpub();
      var unsignedTx = require_unsignedTx();
      var finalScriptSig = require_finalScriptSig();
      var finalScriptWitness = require_finalScriptWitness();
      var nonWitnessUtxo = require_nonWitnessUtxo();
      var partialSig = require_partialSig();
      var porCommitment = require_porCommitment();
      var sighashType = require_sighashType();
      var witnessUtxo = require_witnessUtxo();
      var bip32Derivation = require_bip32Derivation();
      var checkPubkey = require_checkPubkey();
      var redeemScript = require_redeemScript();
      var witnessScript = require_witnessScript();
      var globals = {
        unsignedTx,
        globalXpub,
        // pass an Array of key bytes that require pubkey beside the key
        checkPubkey: checkPubkey.makeChecker([])
      };
      exports.globals = globals;
      var inputs = {
        nonWitnessUtxo,
        partialSig,
        sighashType,
        finalScriptSig,
        finalScriptWitness,
        porCommitment,
        witnessUtxo,
        bip32Derivation: bip32Derivation.makeConverter(
          typeFields_1.InputTypes.BIP32_DERIVATION
        ),
        redeemScript: redeemScript.makeConverter(
          typeFields_1.InputTypes.REDEEM_SCRIPT
        ),
        witnessScript: witnessScript.makeConverter(
          typeFields_1.InputTypes.WITNESS_SCRIPT
        ),
        checkPubkey: checkPubkey.makeChecker([
          typeFields_1.InputTypes.PARTIAL_SIG,
          typeFields_1.InputTypes.BIP32_DERIVATION
        ])
      };
      exports.inputs = inputs;
      var outputs = {
        bip32Derivation: bip32Derivation.makeConverter(
          typeFields_1.OutputTypes.BIP32_DERIVATION
        ),
        redeemScript: redeemScript.makeConverter(
          typeFields_1.OutputTypes.REDEEM_SCRIPT
        ),
        witnessScript: witnessScript.makeConverter(
          typeFields_1.OutputTypes.WITNESS_SCRIPT
        ),
        checkPubkey: checkPubkey.makeChecker([
          typeFields_1.OutputTypes.BIP32_DERIVATION
        ])
      };
      exports.outputs = outputs;
    }
  });

  // node_modules/tip174/src/lib/parser/fromBuffer.js
  var require_fromBuffer = __commonJS({
    "node_modules/tip174/src/lib/parser/fromBuffer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var convert = require_converter();
      var tools_1 = require_tools();
      var varuint = require_varint();
      var typeFields_1 = require_typeFields();
      function psbtFromBuffer(buffer, txGetter) {
        let offset = 0;
        function varSlice() {
          const keyLen = varuint.decode(buffer, offset);
          offset += varuint.encodingLength(keyLen);
          const key = buffer.slice(offset, offset + keyLen);
          offset += keyLen;
          return key;
        }
        function readUInt32BE() {
          const num = buffer.readUInt32BE(offset);
          offset += 4;
          return num;
        }
        function readUInt8() {
          const num = buffer.readUInt8(offset);
          offset += 1;
          return num;
        }
        function getKeyValue() {
          const key = varSlice();
          const value = varSlice();
          return {
            key,
            value
          };
        }
        function checkEndOfKeyValPairs() {
          if (offset >= buffer.length) {
            throw new Error("Format Error: Unexpected End of PSBT");
          }
          const isEnd = buffer.readUInt8(offset) === 0;
          if (isEnd) {
            offset++;
          }
          return isEnd;
        }
        if (readUInt32BE() !== 1886610036) {
          throw new Error("Format Error: Invalid Magic Number");
        }
        if (readUInt8() !== 255) {
          throw new Error(
            "Format Error: Magic Number must be followed by 0xff separator"
          );
        }
        const globalMapKeyVals = [];
        const globalKeyIndex = {};
        while (!checkEndOfKeyValPairs()) {
          const keyVal = getKeyValue();
          const hexKey = keyVal.key.toString("hex");
          if (globalKeyIndex[hexKey]) {
            throw new Error(
              "Format Error: Keys must be unique for global keymap: key " + hexKey
            );
          }
          globalKeyIndex[hexKey] = 1;
          globalMapKeyVals.push(keyVal);
        }
        const unsignedTxMaps = globalMapKeyVals.filter(
          (keyVal) => keyVal.key[0] === typeFields_1.GlobalTypes.UNSIGNED_TX
        );
        if (unsignedTxMaps.length !== 1) {
          throw new Error("Format Error: Only one UNSIGNED_TX allowed");
        }
        const unsignedTx = txGetter(unsignedTxMaps[0].value);
        const { inputCount, outputCount } = unsignedTx.getInputOutputCounts();
        const inputKeyVals = [];
        const outputKeyVals = [];
        for (const index of tools_1.range(inputCount)) {
          const inputKeyIndex = {};
          const input = [];
          while (!checkEndOfKeyValPairs()) {
            const keyVal = getKeyValue();
            const hexKey = keyVal.key.toString("hex");
            if (inputKeyIndex[hexKey]) {
              throw new Error(
                "Format Error: Keys must be unique for each input: input index " + index + " key " + hexKey
              );
            }
            inputKeyIndex[hexKey] = 1;
            input.push(keyVal);
          }
          inputKeyVals.push(input);
        }
        for (const index of tools_1.range(outputCount)) {
          const outputKeyIndex = {};
          const output = [];
          while (!checkEndOfKeyValPairs()) {
            const keyVal = getKeyValue();
            const hexKey = keyVal.key.toString("hex");
            if (outputKeyIndex[hexKey]) {
              throw new Error(
                "Format Error: Keys must be unique for each output: output index " + index + " key " + hexKey
              );
            }
            outputKeyIndex[hexKey] = 1;
            output.push(keyVal);
          }
          outputKeyVals.push(output);
        }
        return psbtFromKeyVals(unsignedTx, {
          globalMapKeyVals,
          inputKeyVals,
          outputKeyVals
        });
      }
      exports.psbtFromBuffer = psbtFromBuffer;
      function checkKeyBuffer(type, keyBuf, keyNum) {
        if (!keyBuf.equals(Buffer.from([keyNum]))) {
          throw new Error(
            `Format Error: Invalid ${type} key: ${keyBuf.toString("hex")}`
          );
        }
      }
      exports.checkKeyBuffer = checkKeyBuffer;
      function psbtFromKeyVals(unsignedTx, { globalMapKeyVals, inputKeyVals, outputKeyVals }) {
        const globalMap = {
          unsignedTx
        };
        let txCount = 0;
        for (const keyVal of globalMapKeyVals) {
          switch (keyVal.key[0]) {
            case typeFields_1.GlobalTypes.UNSIGNED_TX:
              checkKeyBuffer(
                "global",
                keyVal.key,
                typeFields_1.GlobalTypes.UNSIGNED_TX
              );
              if (txCount > 0) {
                throw new Error("Format Error: GlobalMap has multiple UNSIGNED_TX");
              }
              txCount++;
              break;
            case typeFields_1.GlobalTypes.GLOBAL_XPUB:
              if (globalMap.globalXpub === void 0) {
                globalMap.globalXpub = [];
              }
              globalMap.globalXpub.push(convert.globals.globalXpub.decode(keyVal));
              break;
            default:
              if (!globalMap.unknownKeyVals)
                globalMap.unknownKeyVals = [];
              globalMap.unknownKeyVals.push(keyVal);
          }
        }
        const inputCount = inputKeyVals.length;
        const outputCount = outputKeyVals.length;
        const inputs = [];
        const outputs = [];
        for (const index of tools_1.range(inputCount)) {
          const input = {};
          for (const keyVal of inputKeyVals[index]) {
            convert.inputs.checkPubkey(keyVal);
            switch (keyVal.key[0]) {
              case typeFields_1.InputTypes.NON_WITNESS_UTXO:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.NON_WITNESS_UTXO
                );
                if (input.nonWitnessUtxo !== void 0) {
                  throw new Error(
                    "Format Error: Input has multiple NON_WITNESS_UTXO"
                  );
                }
                input.nonWitnessUtxo = convert.inputs.nonWitnessUtxo.decode(keyVal);
                break;
              case typeFields_1.InputTypes.WITNESS_UTXO:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.WITNESS_UTXO
                );
                if (input.witnessUtxo !== void 0) {
                  throw new Error("Format Error: Input has multiple WITNESS_UTXO");
                }
                input.witnessUtxo = convert.inputs.witnessUtxo.decode(keyVal);
                break;
              case typeFields_1.InputTypes.PARTIAL_SIG:
                if (input.partialSig === void 0) {
                  input.partialSig = [];
                }
                input.partialSig.push(convert.inputs.partialSig.decode(keyVal));
                break;
              case typeFields_1.InputTypes.SIGHASH_TYPE:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.SIGHASH_TYPE
                );
                if (input.sighashType !== void 0) {
                  throw new Error("Format Error: Input has multiple SIGHASH_TYPE");
                }
                input.sighashType = convert.inputs.sighashType.decode(keyVal);
                break;
              case typeFields_1.InputTypes.REDEEM_SCRIPT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.REDEEM_SCRIPT
                );
                if (input.redeemScript !== void 0) {
                  throw new Error("Format Error: Input has multiple REDEEM_SCRIPT");
                }
                input.redeemScript = convert.inputs.redeemScript.decode(keyVal);
                break;
              case typeFields_1.InputTypes.WITNESS_SCRIPT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.WITNESS_SCRIPT
                );
                if (input.witnessScript !== void 0) {
                  throw new Error("Format Error: Input has multiple WITNESS_SCRIPT");
                }
                input.witnessScript = convert.inputs.witnessScript.decode(keyVal);
                break;
              case typeFields_1.InputTypes.BIP32_DERIVATION:
                if (input.bip32Derivation === void 0) {
                  input.bip32Derivation = [];
                }
                input.bip32Derivation.push(
                  convert.inputs.bip32Derivation.decode(keyVal)
                );
                break;
              case typeFields_1.InputTypes.FINAL_SCRIPTSIG:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.FINAL_SCRIPTSIG
                );
                input.finalScriptSig = convert.inputs.finalScriptSig.decode(keyVal);
                break;
              case typeFields_1.InputTypes.FINAL_SCRIPTWITNESS:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.FINAL_SCRIPTWITNESS
                );
                input.finalScriptWitness = convert.inputs.finalScriptWitness.decode(
                  keyVal
                );
                break;
              case typeFields_1.InputTypes.POR_COMMITMENT:
                checkKeyBuffer(
                  "input",
                  keyVal.key,
                  typeFields_1.InputTypes.POR_COMMITMENT
                );
                input.porCommitment = convert.inputs.porCommitment.decode(keyVal);
                break;
              default:
                if (!input.unknownKeyVals)
                  input.unknownKeyVals = [];
                input.unknownKeyVals.push(keyVal);
            }
          }
          inputs.push(input);
        }
        for (const index of tools_1.range(outputCount)) {
          const output = {};
          for (const keyVal of outputKeyVals[index]) {
            convert.outputs.checkPubkey(keyVal);
            switch (keyVal.key[0]) {
              case typeFields_1.OutputTypes.REDEEM_SCRIPT:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.REDEEM_SCRIPT
                );
                if (output.redeemScript !== void 0) {
                  throw new Error("Format Error: Output has multiple REDEEM_SCRIPT");
                }
                output.redeemScript = convert.outputs.redeemScript.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.WITNESS_SCRIPT:
                checkKeyBuffer(
                  "output",
                  keyVal.key,
                  typeFields_1.OutputTypes.WITNESS_SCRIPT
                );
                if (output.witnessScript !== void 0) {
                  throw new Error("Format Error: Output has multiple WITNESS_SCRIPT");
                }
                output.witnessScript = convert.outputs.witnessScript.decode(keyVal);
                break;
              case typeFields_1.OutputTypes.BIP32_DERIVATION:
                if (output.bip32Derivation === void 0) {
                  output.bip32Derivation = [];
                }
                output.bip32Derivation.push(
                  convert.outputs.bip32Derivation.decode(keyVal)
                );
                break;
              default:
                if (!output.unknownKeyVals)
                  output.unknownKeyVals = [];
                output.unknownKeyVals.push(keyVal);
            }
          }
          outputs.push(output);
        }
        return { globalMap, inputs, outputs };
      }
      exports.psbtFromKeyVals = psbtFromKeyVals;
    }
  });

  // node_modules/tip174/src/lib/parser/toBuffer.js
  var require_toBuffer = __commonJS({
    "node_modules/tip174/src/lib/parser/toBuffer.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var convert = require_converter();
      var tools_1 = require_tools();
      function psbtToBuffer({ globalMap, inputs, outputs }) {
        const { globalKeyVals, inputKeyVals, outputKeyVals } = psbtToKeyVals({
          globalMap,
          inputs,
          outputs
        });
        const globalBuffer = tools_1.keyValsToBuffer(globalKeyVals);
        const keyValsOrEmptyToBuffer = (keyVals) => keyVals.length === 0 ? [Buffer.from([0])] : keyVals.map(tools_1.keyValsToBuffer);
        const inputBuffers = keyValsOrEmptyToBuffer(inputKeyVals);
        const outputBuffers = keyValsOrEmptyToBuffer(outputKeyVals);
        const header = Buffer.allocUnsafe(5);
        header.writeUIntBE(482972169471, 0, 5);
        return Buffer.concat(
          [header, globalBuffer].concat(inputBuffers, outputBuffers)
        );
      }
      exports.psbtToBuffer = psbtToBuffer;
      var sortKeyVals = (a, b) => {
        return a.key.compare(b.key);
      };
      function keyValsFromMap(keyValMap, converterFactory) {
        const keyHexSet = /* @__PURE__ */ new Set();
        const keyVals = Object.entries(keyValMap).reduce((result, [key, value]) => {
          if (key === "unknownKeyVals")
            return result;
          const converter = converterFactory[key];
          if (converter === void 0)
            return result;
          const encodedKeyVals = (Array.isArray(value) ? value : [value]).map(
            converter.encode
          );
          const keyHexes = encodedKeyVals.map((kv) => kv.key.toString("hex"));
          keyHexes.forEach((hex) => {
            if (keyHexSet.has(hex))
              throw new Error("Serialize Error: Duplicate key: " + hex);
            keyHexSet.add(hex);
          });
          return result.concat(encodedKeyVals);
        }, []);
        const otherKeyVals = keyValMap.unknownKeyVals ? keyValMap.unknownKeyVals.filter((keyVal) => {
          return !keyHexSet.has(keyVal.key.toString("hex"));
        }) : [];
        return keyVals.concat(otherKeyVals).sort(sortKeyVals);
      }
      function psbtToKeyVals({ globalMap, inputs, outputs }) {
        return {
          globalKeyVals: keyValsFromMap(globalMap, convert.globals),
          inputKeyVals: inputs.map((i) => keyValsFromMap(i, convert.inputs)),
          outputKeyVals: outputs.map((o) => keyValsFromMap(o, convert.outputs))
        };
      }
      exports.psbtToKeyVals = psbtToKeyVals;
    }
  });

  // node_modules/tip174/src/lib/parser/index.js
  var require_parser = __commonJS({
    "node_modules/tip174/src/lib/parser/index.js"(exports) {
      "use strict";
      function __export(m) {
        for (var p in m)
          if (!exports.hasOwnProperty(p))
            exports[p] = m[p];
      }
      Object.defineProperty(exports, "__esModule", { value: true });
      __export(require_fromBuffer());
      __export(require_toBuffer());
    }
  });

  // node_modules/tip174/src/lib/combiner/index.js
  var require_combiner = __commonJS({
    "node_modules/tip174/src/lib/combiner/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var parser_1 = require_parser();
      function combine(psbts) {
        const self2 = psbts[0];
        const selfKeyVals = parser_1.psbtToKeyVals(self2);
        const others = psbts.slice(1);
        if (others.length === 0)
          throw new Error("Combine: Nothing to combine");
        const selfTx = getTx(self2);
        if (selfTx === void 0) {
          throw new Error("Combine: Self missing transaction");
        }
        const selfGlobalSet = getKeySet(selfKeyVals.globalKeyVals);
        const selfInputSets = selfKeyVals.inputKeyVals.map(getKeySet);
        const selfOutputSets = selfKeyVals.outputKeyVals.map(getKeySet);
        for (const other of others) {
          const otherTx = getTx(other);
          if (otherTx === void 0 || !otherTx.toBuffer().equals(selfTx.toBuffer())) {
            throw new Error(
              "Combine: One of the Psbts does not have the same transaction."
            );
          }
          const otherKeyVals = parser_1.psbtToKeyVals(other);
          const otherGlobalSet = getKeySet(otherKeyVals.globalKeyVals);
          otherGlobalSet.forEach(
            keyPusher(
              selfGlobalSet,
              selfKeyVals.globalKeyVals,
              otherKeyVals.globalKeyVals
            )
          );
          const otherInputSets = otherKeyVals.inputKeyVals.map(getKeySet);
          otherInputSets.forEach(
            (inputSet, idx) => inputSet.forEach(
              keyPusher(
                selfInputSets[idx],
                selfKeyVals.inputKeyVals[idx],
                otherKeyVals.inputKeyVals[idx]
              )
            )
          );
          const otherOutputSets = otherKeyVals.outputKeyVals.map(getKeySet);
          otherOutputSets.forEach(
            (outputSet, idx) => outputSet.forEach(
              keyPusher(
                selfOutputSets[idx],
                selfKeyVals.outputKeyVals[idx],
                otherKeyVals.outputKeyVals[idx]
              )
            )
          );
        }
        return parser_1.psbtFromKeyVals(selfTx, {
          globalMapKeyVals: selfKeyVals.globalKeyVals,
          inputKeyVals: selfKeyVals.inputKeyVals,
          outputKeyVals: selfKeyVals.outputKeyVals
        });
      }
      exports.combine = combine;
      function keyPusher(selfSet, selfKeyVals, otherKeyVals) {
        return (key) => {
          if (selfSet.has(key))
            return;
          const newKv = otherKeyVals.filter((kv) => kv.key.toString("hex") === key)[0];
          selfKeyVals.push(newKv);
          selfSet.add(key);
        };
      }
      function getTx(psbt) {
        return psbt.globalMap.unsignedTx;
      }
      function getKeySet(keyVals) {
        const set = /* @__PURE__ */ new Set();
        keyVals.forEach((keyVal) => {
          const hex = keyVal.key.toString("hex");
          if (set.has(hex))
            throw new Error("Combine: KeyValue Map keys should be unique");
          set.add(hex);
        });
        return set;
      }
    }
  });

  // node_modules/tip174/src/lib/utils.js
  var require_utils3 = __commonJS({
    "node_modules/tip174/src/lib/utils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var converter = require_converter();
      function checkForInput(inputs, inputIndex) {
        const input = inputs[inputIndex];
        if (input === void 0)
          throw new Error(`No input #${inputIndex}`);
        return input;
      }
      exports.checkForInput = checkForInput;
      function checkForOutput(outputs, outputIndex) {
        const output = outputs[outputIndex];
        if (output === void 0)
          throw new Error(`No output #${outputIndex}`);
        return output;
      }
      exports.checkForOutput = checkForOutput;
      function checkHasKey(checkKeyVal, keyVals, enumLength) {
        if (checkKeyVal.key[0] < enumLength) {
          throw new Error(
            `Use the method for your specific key instead of addUnknownKeyVal*`
          );
        }
        if (keyVals && keyVals.filter((kv) => kv.key.equals(checkKeyVal.key)).length !== 0) {
          throw new Error(`Duplicate Key: ${checkKeyVal.key.toString("hex")}`);
        }
      }
      exports.checkHasKey = checkHasKey;
      function getEnumLength(myenum) {
        let count = 0;
        Object.keys(myenum).forEach((val) => {
          if (Number(isNaN(Number(val)))) {
            count++;
          }
        });
        return count;
      }
      exports.getEnumLength = getEnumLength;
      function inputCheckUncleanFinalized(inputIndex, input) {
        let result = false;
        if (input.nonWitnessUtxo || input.witnessUtxo) {
          const needScriptSig = !!input.redeemScript;
          const needWitnessScript = !!input.witnessScript;
          const scriptSigOK = !needScriptSig || !!input.finalScriptSig;
          const witnessScriptOK = !needWitnessScript || !!input.finalScriptWitness;
          const hasOneFinal = !!input.finalScriptSig || !!input.finalScriptWitness;
          result = scriptSigOK && witnessScriptOK && hasOneFinal;
        }
        if (result === false) {
          throw new Error(
            `Input #${inputIndex} has too much or too little data to clean`
          );
        }
      }
      exports.inputCheckUncleanFinalized = inputCheckUncleanFinalized;
      function throwForUpdateMaker(typeName, name, expected, data) {
        throw new Error(
          `Data for ${typeName} key ${name} is incorrect: Expected ${expected} and got ${JSON.stringify(data)}`
        );
      }
      function updateMaker(typeName) {
        return (updateData, mainData) => {
          for (const name of Object.keys(updateData)) {
            const data = updateData[name];
            const { canAdd, canAddToArray, check, expected } = (
              // @ts-ignore
              converter[typeName + "s"][name] || {}
            );
            const isArray = !!canAddToArray;
            if (check) {
              if (isArray) {
                if (!Array.isArray(data) || // @ts-ignore
                mainData[name] && !Array.isArray(mainData[name])) {
                  throw new Error(`Key type ${name} must be an array`);
                }
                if (!data.every(check)) {
                  throwForUpdateMaker(typeName, name, expected, data);
                }
                const arr = mainData[name] || [];
                const dupeCheckSet = /* @__PURE__ */ new Set();
                if (!data.every((v) => canAddToArray(arr, v, dupeCheckSet))) {
                  throw new Error("Can not add duplicate data to array");
                }
                mainData[name] = arr.concat(data);
              } else {
                if (!check(data)) {
                  throwForUpdateMaker(typeName, name, expected, data);
                }
                if (!canAdd(mainData, data)) {
                  throw new Error(`Can not add duplicate data to ${typeName}`);
                }
                mainData[name] = data;
              }
            }
          }
        };
      }
      exports.updateGlobal = updateMaker("global");
      exports.updateInput = updateMaker("input");
      exports.updateOutput = updateMaker("output");
      function addInputAttributes(inputs, data) {
        const index = inputs.length - 1;
        const input = checkForInput(inputs, index);
        exports.updateInput(data, input);
      }
      exports.addInputAttributes = addInputAttributes;
      function addOutputAttributes(outputs, data) {
        const index = outputs.length - 1;
        const output = checkForOutput(outputs, index);
        exports.updateOutput(data, output);
      }
      exports.addOutputAttributes = addOutputAttributes;
      function defaultVersionSetter(version, txBuf) {
        if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
          throw new Error("Set Version: Invalid Transaction");
        }
        txBuf.writeUInt32LE(version, 0);
        return txBuf;
      }
      exports.defaultVersionSetter = defaultVersionSetter;
      function defaultLocktimeSetter(locktime, txBuf) {
        if (!Buffer.isBuffer(txBuf) || txBuf.length < 4) {
          throw new Error("Set Locktime: Invalid Transaction");
        }
        txBuf.writeUInt32LE(locktime, txBuf.length - 4);
        return txBuf;
      }
      exports.defaultLocktimeSetter = defaultLocktimeSetter;
    }
  });

  // node_modules/tip174/src/lib/psbt.js
  var require_psbt = __commonJS({
    "node_modules/tip174/src/lib/psbt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var combiner_1 = require_combiner();
      var parser_1 = require_parser();
      var typeFields_1 = require_typeFields();
      var utils_1 = require_utils3();
      var Psbt = class {
        constructor(tx) {
          this.inputs = [];
          this.outputs = [];
          this.globalMap = {
            unsignedTx: tx
          };
        }
        static fromBase64(data, txFromBuffer) {
          const buffer = Buffer.from(data, "base64");
          return this.fromBuffer(buffer, txFromBuffer);
        }
        static fromHex(data, txFromBuffer) {
          const buffer = Buffer.from(data, "hex");
          return this.fromBuffer(buffer, txFromBuffer);
        }
        static fromBuffer(buffer, txFromBuffer) {
          const results = parser_1.psbtFromBuffer(buffer, txFromBuffer);
          const psbt = new this(results.globalMap.unsignedTx);
          Object.assign(psbt, results);
          return psbt;
        }
        toBase64() {
          const buffer = this.toBuffer();
          return buffer.toString("base64");
        }
        toHex() {
          const buffer = this.toBuffer();
          return buffer.toString("hex");
        }
        toBuffer() {
          return parser_1.psbtToBuffer(this);
        }
        updateGlobal(updateData) {
          utils_1.updateGlobal(updateData, this.globalMap);
          return this;
        }
        updateInput(inputIndex, updateData) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.updateInput(updateData, input);
          return this;
        }
        updateOutput(outputIndex, updateData) {
          const output = utils_1.checkForOutput(this.outputs, outputIndex);
          utils_1.updateOutput(updateData, output);
          return this;
        }
        addUnknownKeyValToGlobal(keyVal) {
          utils_1.checkHasKey(
            keyVal,
            this.globalMap.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.GlobalTypes)
          );
          if (!this.globalMap.unknownKeyVals)
            this.globalMap.unknownKeyVals = [];
          this.globalMap.unknownKeyVals.push(keyVal);
          return this;
        }
        addUnknownKeyValToInput(inputIndex, keyVal) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.checkHasKey(
            keyVal,
            input.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.InputTypes)
          );
          if (!input.unknownKeyVals)
            input.unknownKeyVals = [];
          input.unknownKeyVals.push(keyVal);
          return this;
        }
        addUnknownKeyValToOutput(outputIndex, keyVal) {
          const output = utils_1.checkForOutput(this.outputs, outputIndex);
          utils_1.checkHasKey(
            keyVal,
            output.unknownKeyVals,
            utils_1.getEnumLength(typeFields_1.OutputTypes)
          );
          if (!output.unknownKeyVals)
            output.unknownKeyVals = [];
          output.unknownKeyVals.push(keyVal);
          return this;
        }
        addInput(inputData) {
          this.globalMap.unsignedTx.addInput(inputData);
          this.inputs.push({
            unknownKeyVals: []
          });
          const addKeyVals = inputData.unknownKeyVals || [];
          const inputIndex = this.inputs.length - 1;
          if (!Array.isArray(addKeyVals)) {
            throw new Error("unknownKeyVals must be an Array");
          }
          addKeyVals.forEach(
            (keyVal) => this.addUnknownKeyValToInput(inputIndex, keyVal)
          );
          utils_1.addInputAttributes(this.inputs, inputData);
          return this;
        }
        addOutput(outputData) {
          this.globalMap.unsignedTx.addOutput(outputData);
          this.outputs.push({
            unknownKeyVals: []
          });
          const addKeyVals = outputData.unknownKeyVals || [];
          const outputIndex = this.outputs.length - 1;
          if (!Array.isArray(addKeyVals)) {
            throw new Error("unknownKeyVals must be an Array");
          }
          addKeyVals.forEach(
            (keyVal) => this.addUnknownKeyValToOutput(outputIndex, keyVal)
          );
          utils_1.addOutputAttributes(this.outputs, outputData);
          return this;
        }
        clearFinalizedInput(inputIndex) {
          const input = utils_1.checkForInput(this.inputs, inputIndex);
          utils_1.inputCheckUncleanFinalized(inputIndex, input);
          for (const key of Object.keys(input)) {
            if (![
              "witnessUtxo",
              "nonWitnessUtxo",
              "finalScriptSig",
              "finalScriptWitness",
              "unknownKeyVals"
            ].includes(key)) {
              delete input[key];
            }
          }
          return this;
        }
        combine(...those) {
          const result = combiner_1.combine([this].concat(those));
          Object.assign(this, result);
          return this;
        }
        getTransaction() {
          return this.globalMap.unsignedTx.toBuffer();
        }
      };
      exports.Psbt = Psbt;
    }
  });

  // node_modules/tidecoinjs-lib/src/psbt/psbtutils.js
  var require_psbtutils = __commonJS({
    "node_modules/tidecoinjs-lib/src/psbt/psbtutils.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.signatureBlocksAction = exports.checkInputForSig = exports.pubkeyInScript = exports.pubkeyPositionInScript = exports.witnessStackToScriptWitness = exports.isP2SHScript = exports.isP2WSHScript = exports.isP2WPKH = exports.isP2PKH = exports.isP2PK = exports.isP2MS = void 0;
      var varuint = require_varint();
      var bscript = require_script();
      var transaction_1 = require_transaction();
      var crypto_1 = require_crypto2();
      var payments2 = require_payments();
      var utils_1 = require_utils2();
      function isPaymentFactory(payment) {
        return (script) => {
          try {
            payment({ output: script });
            return true;
          } catch (err) {
            return false;
          }
        };
      }
      exports.isP2MS = isPaymentFactory(payments2.p2ms);
      exports.isP2PK = isPaymentFactory(payments2.p2pk);
      exports.isP2PKH = isPaymentFactory(payments2.p2pkh);
      exports.isP2WPKH = isPaymentFactory(payments2.p2wpkh);
      exports.isP2WSHScript = isPaymentFactory(payments2.p2wsh);
      exports.isP2SHScript = isPaymentFactory(payments2.p2sh);
      function witnessStackToScriptWitness(witness) {
        let buffer = Buffer.allocUnsafe(0);
        function writeSlice(slice) {
          buffer = Buffer.concat([buffer, Buffer.from(slice)]);
        }
        function writeVarInt(i) {
          const currentLen = buffer.length;
          const varintLen = varuint.encodingLength(i);
          buffer = Buffer.concat([buffer, Buffer.allocUnsafe(varintLen)]);
          varuint.encode(i, buffer, currentLen);
        }
        function writeVarSlice(slice) {
          writeVarInt(slice.length);
          writeSlice(slice);
        }
        function writeVector(vector) {
          writeVarInt(vector.length);
          vector.forEach(writeVarSlice);
        }
        writeVector(witness);
        return buffer;
      }
      exports.witnessStackToScriptWitness = witnessStackToScriptWitness;
      function pubkeyPositionInScript(pubkey, script) {
        const pubkeyHash = (0, crypto_1.hash160)(
          Buffer.from("07" + (0, utils_1.bytesToHex)(pubkey), "hex")
        );
        const decompiled = bscript.decompile(script);
        if (decompiled === null)
          throw new Error("Unknown script error");
        return decompiled.findIndex((element) => {
          if (typeof element === "number")
            return false;
          return element.equals(pubkey) || element.equals(pubkeyHash);
        });
      }
      exports.pubkeyPositionInScript = pubkeyPositionInScript;
      function pubkeyInScript(pubkey, script) {
        return pubkeyPositionInScript(pubkey, script) !== -1;
      }
      exports.pubkeyInScript = pubkeyInScript;
      function checkInputForSig(input, action) {
        const pSigs = extractPartialSigs(input);
        return pSigs.some(
          (pSig) => signatureBlocksAction(pSig, bscript.signature.decode, action)
        );
      }
      exports.checkInputForSig = checkInputForSig;
      function signatureBlocksAction(signature, signatureDecodeFn, action) {
        const { hashType } = signatureDecodeFn(signature);
        const whitelist = [];
        const isAnyoneCanPay = hashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY;
        if (isAnyoneCanPay)
          whitelist.push("addInput");
        const hashMod = hashType & 31;
        switch (hashMod) {
          case transaction_1.Transaction.SIGHASH_ALL:
            break;
          case transaction_1.Transaction.SIGHASH_SINGLE:
          case transaction_1.Transaction.SIGHASH_NONE:
            whitelist.push("addOutput");
            whitelist.push("setInputSequence");
            break;
        }
        if (whitelist.indexOf(action) === -1) {
          return true;
        }
        return false;
      }
      exports.signatureBlocksAction = signatureBlocksAction;
      function extractPartialSigs(input) {
        let pSigs = [];
        if ((input.partialSig || []).length === 0) {
          if (!input.finalScriptSig && !input.finalScriptWitness)
            return [];
          pSigs = getPsigsFromInputFinalScripts(input);
        } else {
          pSigs = input.partialSig;
        }
        return pSigs.map((p) => p.signature);
      }
      function getPsigsFromInputFinalScripts(input) {
        const scriptItems = !input.finalScriptSig ? [] : bscript.decompile(input.finalScriptSig) || [];
        const witnessItems = !input.finalScriptWitness ? [] : bscript.decompile(input.finalScriptWitness) || [];
        return scriptItems.concat(witnessItems).filter((item) => {
          return Buffer.isBuffer(item) && bscript.isCanonicalScriptSignature(item);
        }).map((sig) => ({ signature: sig }));
      }
    }
  });

  // node_modules/tidecoinjs-lib/src/psbt.js
  var require_psbt2 = __commonJS({
    "node_modules/tidecoinjs-lib/src/psbt.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Psbt = void 0;
      var psbt_1 = require_psbt();
      var varuint = require_varint();
      var utils_1 = require_utils3();
      var address_1 = require_address();
      var bufferutils_1 = require_bufferutils();
      var payments2 = require_payments();
      var bscript = require_script();
      var transaction_1 = require_transaction();
      var psbtutils_1 = require_psbtutils();
      var networks_1 = require_networks();
      var utils_2 = require_utils2();
      var DEFAULT_OPTS = {
        /**
         * A bitcoinjs Network object. This is only used if you pass an `address`
         * parameter to addOutput. Otherwise it is not needed and can be left default.
         */
        network: networks_1.TIDECOIN,
        /**
         * When extractTransaction is called, the fee rate is checked.
         * THIS IS NOT TO BE RELIED ON.
         * It is only here as a last ditch effort to prevent sending a 500 BTC fee etc.
         */
        maximumFeeRate: 5e3
        // satoshi per byte
      };
      var Psbt = class _Psbt {
        static fromBase64(data, opts = {}) {
          const buffer = Buffer.from(data, "base64");
          return this.fromBuffer(buffer, opts);
        }
        static fromHex(data, opts = {}) {
          const buffer = Buffer.from(data, "hex");
          return this.fromBuffer(buffer, opts);
        }
        static fromBuffer(buffer, opts = {}) {
          const psbtBase = psbt_1.Psbt.fromBuffer(buffer, transactionFromBuffer);
          const psbt = new _Psbt(opts, psbtBase);
          checkTxForDupeIns(psbt.__CACHE.__TX, psbt.__CACHE);
          return psbt;
        }
        constructor(opts = {}, data = new psbt_1.Psbt(new PsbtTransaction())) {
          this.data = data;
          this.opts = Object.assign({}, DEFAULT_OPTS, opts);
          this.__CACHE = {
            __NON_WITNESS_UTXO_TX_CACHE: [],
            __NON_WITNESS_UTXO_BUF_CACHE: [],
            __TX_IN_CACHE: {},
            __TX: this.data.globalMap.unsignedTx.tx,
            // Psbt's predecesor (TransactionBuilder - now removed) behavior
            // was to not confirm input values  before signing.
            // Even though we highly encourage people to get
            // the full parent transaction to verify values, the ability to
            // sign non-segwit inputs without the full transaction was often
            // requested. So the only way to activate is to use @ts-ignore.
            // We will disable exporting the Psbt when unsafe sign is active.
            // because it is not BIP174 compliant.
            __UNSAFE_SIGN_NONSEGWIT: false
          };
          if (this.data.inputs.length === 0)
            this.setVersion(2);
          const dpew = (obj, attr, enumerable, writable) => Object.defineProperty(obj, attr, {
            enumerable,
            writable
          });
          dpew(this, "__CACHE", false, true);
          dpew(this, "opts", false, true);
        }
        get inputCount() {
          return this.data.inputs.length;
        }
        get version() {
          return this.__CACHE.__TX.version;
        }
        set version(version) {
          this.setVersion(version);
        }
        get locktime() {
          return this.__CACHE.__TX.locktime;
        }
        set locktime(locktime) {
          this.setLocktime(locktime);
        }
        get txInputs() {
          return this.__CACHE.__TX.ins.map((input) => ({
            hash: (0, bufferutils_1.cloneBuffer)(input.hash),
            index: input.index,
            sequence: input.sequence
          }));
        }
        get txOutputs() {
          return this.__CACHE.__TX.outs.map((output) => {
            let address;
            try {
              address = (0, address_1.fromOutputScript)(
                output.script,
                this.opts.network
              );
            } catch (_) {
            }
            return {
              script: (0, bufferutils_1.cloneBuffer)(output.script),
              value: output.value,
              address
            };
          });
        }
        combine(...those) {
          this.data.combine(...those.map((o) => o.data));
          return this;
        }
        clone() {
          const res = _Psbt.fromBuffer(this.data.toBuffer());
          res.opts = JSON.parse(JSON.stringify(this.opts));
          return res;
        }
        setMaximumFeeRate(satoshiPerByte) {
          check32Bit(satoshiPerByte);
          this.opts.maximumFeeRate = satoshiPerByte;
        }
        setVersion(version) {
          check32Bit(version);
          checkInputsForPartialSig(this.data.inputs, "setVersion");
          const c = this.__CACHE;
          c.__TX.version = version;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        setLocktime(locktime) {
          check32Bit(locktime);
          checkInputsForPartialSig(this.data.inputs, "setLocktime");
          const c = this.__CACHE;
          c.__TX.locktime = locktime;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        setInputSequence(inputIndex, sequence) {
          check32Bit(sequence);
          checkInputsForPartialSig(this.data.inputs, "setInputSequence");
          const c = this.__CACHE;
          if (c.__TX.ins.length <= inputIndex) {
            throw new Error("Input index too high");
          }
          c.__TX.ins[inputIndex].sequence = sequence;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        addInputs(inputDatas) {
          inputDatas.forEach((inputData) => this.addInput(inputData));
          return this;
        }
        addInput(inputData) {
          if (arguments.length > 1 || !inputData || inputData.hash === void 0 || inputData.index === void 0) {
            throw new Error(
              `Invalid arguments for Psbt.addInput. Requires single object with at least [hash] and [index]`
            );
          }
          checkInputsForPartialSig(this.data.inputs, "addInput");
          if (inputData.witnessScript)
            checkInvalidP2WSH(inputData.witnessScript);
          const c = this.__CACHE;
          this.data.addInput(inputData);
          const txIn = c.__TX.ins[c.__TX.ins.length - 1];
          checkTxInputCache(c, txIn);
          const inputIndex = this.data.inputs.length - 1;
          const input = this.data.inputs[inputIndex];
          if (input.nonWitnessUtxo) {
            addNonWitnessTxCache(this.__CACHE, input, inputIndex);
          }
          c.__FEE = void 0;
          c.__FEE_RATE = void 0;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        addOutputs(outputDatas) {
          outputDatas.forEach((outputData) => this.addOutput(outputData));
          return this;
        }
        addOutput(outputData) {
          if (arguments.length > 1 || !outputData || outputData.value === void 0 || outputData.address === void 0 && outputData.script === void 0) {
            throw new Error(
              `Invalid arguments for Psbt.addOutput. Requires single object with at least [script or address] and [value]`
            );
          }
          checkInputsForPartialSig(this.data.inputs, "addOutput");
          const { address } = outputData;
          if (typeof address === "string") {
            const { network } = this.opts;
            const script = (0, address_1.toOutputScript)(address, network);
            outputData = Object.assign(outputData, { script });
          }
          const c = this.__CACHE;
          this.data.addOutput(outputData);
          c.__FEE = void 0;
          c.__FEE_RATE = void 0;
          c.__EXTRACTED_TX = void 0;
          return this;
        }
        extractTransaction(disableFeeCheck) {
          if (!this.data.inputs.every(isFinalized))
            throw new Error("Not finalized");
          const c = this.__CACHE;
          if (!disableFeeCheck) {
            checkFees(this, c, this.opts);
          }
          if (c.__EXTRACTED_TX)
            return c.__EXTRACTED_TX;
          const tx = c.__TX.clone();
          inputFinalizeGetAmts(this.data.inputs, tx, c, true);
          return tx;
        }
        getFeeRate() {
          return getTxCacheValue(
            "__FEE_RATE",
            "fee rate",
            this.data.inputs,
            this.__CACHE
          );
        }
        getFee() {
          return getTxCacheValue("__FEE", "fee", this.data.inputs, this.__CACHE);
        }
        finalizeAllInputs() {
          (0, utils_1.checkForInput)(this.data.inputs, 0);
          range(this.data.inputs.length).forEach((idx) => this.finalizeInput(idx));
          return this;
        }
        finalizeInput(inputIndex, finalScriptsFunc) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          return this._finalizeInput(inputIndex, input, finalScriptsFunc);
        }
        _finalizeInput(inputIndex, input, finalScriptsFunc = getFinalScripts) {
          const { script, isP2SH, isP2WSH, isSegwit } = getScriptFromInput(
            inputIndex,
            input,
            this.__CACHE
          );
          if (!script)
            throw new Error(`No script found for input #${inputIndex}`);
          checkPartialSigSighashes(input);
          const { finalScriptSig, finalScriptWitness } = finalScriptsFunc(
            inputIndex,
            input,
            script,
            isSegwit,
            isP2SH,
            isP2WSH
          );
          if (finalScriptSig)
            this.data.updateInput(inputIndex, { finalScriptSig });
          if (finalScriptWitness)
            this.data.updateInput(inputIndex, { finalScriptWitness });
          if (!finalScriptSig && !finalScriptWitness)
            throw new Error(`Unknown error finalizing input #${inputIndex}`);
          this.data.clearFinalizedInput(inputIndex);
          return this;
        }
        getInputType(inputIndex) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          const script = getScriptFromUtxo(inputIndex, input, this.__CACHE);
          const result = getMeaningfulScript(
            script,
            inputIndex,
            "input",
            input.redeemScript || redeemFromFinalScriptSig(input.finalScriptSig),
            input.witnessScript || redeemFromFinalWitnessScript(input.finalScriptWitness)
          );
          const type = result.type === "raw" ? "" : result.type + "-";
          const mainType = classifyScript(result.meaningfulScript);
          return type + mainType;
        }
        inputHasPubkey(inputIndex, pubkey) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          return pubkeyInInput(pubkey, input, inputIndex, this.__CACHE);
        }
        inputHasHDKey(inputIndex, root) {
          const input = (0, utils_1.checkForInput)(this.data.inputs, inputIndex);
          const derivationIsMine = bip32DerivationIsMine(root);
          return !!input.bip32Derivation && input.bip32Derivation.some(derivationIsMine);
        }
        outputHasPubkey(outputIndex, pubkey) {
          const output = (0, utils_1.checkForOutput)(this.data.outputs, outputIndex);
          return pubkeyInOutput(pubkey, output, outputIndex, this.__CACHE);
        }
        outputHasHDKey(outputIndex, root) {
          const output = (0, utils_1.checkForOutput)(this.data.outputs, outputIndex);
          const derivationIsMine = bip32DerivationIsMine(root);
          return !!output.bip32Derivation && output.bip32Derivation.some(derivationIsMine);
        }
        validateSignaturesOfAllInputs(validator) {
          (0, utils_1.checkForInput)(this.data.inputs, 0);
          const results = range(this.data.inputs.length).map(
            (idx) => this.validateSignaturesOfInput(idx, validator)
          );
          return results.reduce((final, res) => res === true && final, true);
        }
        validateSignaturesOfInput(inputIndex, validator, pubkey) {
          return this._validateSignaturesOfInput(inputIndex, validator, pubkey);
        }
        _validateSignaturesOfInput(inputIndex, validator, pubkey) {
          const input = this.data.inputs[inputIndex];
          const partialSig = (input || {}).partialSig;
          if (!input || !partialSig || partialSig.length < 1)
            throw new Error("No signatures to validate");
          if (typeof validator !== "function")
            throw new Error("Need validator function to validate signatures");
          const mySigs = pubkey ? partialSig.filter((sig) => sig.pubkey.equals(pubkey)) : partialSig;
          if (mySigs.length < 1)
            throw new Error("No signatures for this pubkey");
          const results = [];
          let hashCache;
          let scriptCache;
          let sighashCache;
          for (const pSig of mySigs) {
            const sig = bscript.signature.decode(pSig.signature);
            const { hash, script } = sighashCache !== sig.hashType ? getHashForSig(
              inputIndex,
              Object.assign({}, input, { sighashType: sig.hashType }),
              this.__CACHE,
              true
            ) : { hash: hashCache, script: scriptCache };
            sighashCache = sig.hashType;
            hashCache = hash;
            scriptCache = script;
            checkScriptForPubkey(pSig.pubkey, script, "verify");
            results.push(validator(pSig.pubkey, hash, sig.signature));
          }
          return results.every((res) => res === true);
        }
        signAllInputsHD(hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error("Need HDSigner to sign input");
          }
          const results = [];
          for (const i of range(this.data.inputs.length)) {
            try {
              this.signInputHD(i, hdKeyPair, sighashTypes);
              results.push(true);
            } catch (err) {
              results.push(false);
            }
          }
          if (results.every((v) => v === false)) {
            throw new Error("No inputs were signed");
          }
          return this;
        }
        signInputHD(inputIndex, hdKeyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          if (!hdKeyPair || !hdKeyPair.publicKey || !hdKeyPair.fingerprint) {
            throw new Error("Need HDSigner to sign input");
          }
          const signers = getSignersFromHD(inputIndex, this.data.inputs, hdKeyPair);
          signers.forEach((signer) => this.signInput(inputIndex, signer, sighashTypes));
          return this;
        }
        signAllInputs(keyPair, sighashTypes) {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          const results = [];
          for (const i of range(this.data.inputs.length)) {
            try {
              this.signInput(i, keyPair, sighashTypes);
              results.push(true);
            } catch (err) {
              results.push(false);
            }
          }
          if (results.every((v) => v === false)) {
            throw new Error("No inputs were signed");
          }
          return this;
        }
        signInput(inputIndex, keyPair, sighashTypes) {
          if (!keyPair || !keyPair.publicKey)
            throw new Error("Need Signer to sign input");
          return this._signInput(inputIndex, keyPair, sighashTypes);
        }
        _signInput(inputIndex, keyPair, sighashTypes = [transaction_1.Transaction.SIGHASH_ALL]) {
          const { hash, sighashType } = getHashAndSighashType(
            this.data.inputs,
            inputIndex,
            Buffer.from(keyPair.publicKey),
            this.__CACHE,
            sighashTypes
          );
          const random = (0, utils_2.randomBytes)(48);
          const number = Buffer.alloc(1);
          number.writeUint8(7);
          const partialSig = [
            {
              pubkey: Buffer.concat([number, keyPair.publicKey]),
              signature: bscript.signature.encode(
                Buffer.from(keyPair.sign(hash, random)),
                sighashType
              )
            }
          ];
          this.data.updateInput(inputIndex, { partialSig });
          return this;
        }
        toBuffer() {
          checkCache(this.__CACHE);
          return this.data.toBuffer();
        }
        toHex() {
          checkCache(this.__CACHE);
          return this.data.toHex();
        }
        toBase64() {
          checkCache(this.__CACHE);
          return this.data.toBase64();
        }
        updateGlobal(updateData) {
          this.data.updateGlobal(updateData);
          return this;
        }
        updateInput(inputIndex, updateData) {
          if (updateData.witnessScript)
            checkInvalidP2WSH(updateData.witnessScript);
          this.data.updateInput(inputIndex, updateData);
          if (updateData.nonWitnessUtxo) {
            addNonWitnessTxCache(
              this.__CACHE,
              this.data.inputs[inputIndex],
              inputIndex
            );
          }
          return this;
        }
        updateOutput(outputIndex, updateData) {
          this.data.updateOutput(outputIndex, updateData);
          return this;
        }
        addUnknownKeyValToGlobal(keyVal) {
          this.data.addUnknownKeyValToGlobal(keyVal);
          return this;
        }
        addUnknownKeyValToInput(inputIndex, keyVal) {
          this.data.addUnknownKeyValToInput(inputIndex, keyVal);
          return this;
        }
        addUnknownKeyValToOutput(outputIndex, keyVal) {
          this.data.addUnknownKeyValToOutput(outputIndex, keyVal);
          return this;
        }
        clearFinalizedInput(inputIndex) {
          this.data.clearFinalizedInput(inputIndex);
          return this;
        }
      };
      exports.Psbt = Psbt;
      var transactionFromBuffer = (buffer) => new PsbtTransaction(buffer);
      var PsbtTransaction = class {
        constructor(buffer = Buffer.from([2, 0, 0, 0, 0, 0, 0, 0, 0, 0])) {
          this.tx = transaction_1.Transaction.fromBuffer(buffer);
          checkTxEmpty(this.tx);
          Object.defineProperty(this, "tx", {
            enumerable: false,
            writable: true
          });
        }
        getInputOutputCounts() {
          return {
            inputCount: this.tx.ins.length,
            outputCount: this.tx.outs.length
          };
        }
        addInput(input) {
          if (input.hash === void 0 || input.index === void 0 || !Buffer.isBuffer(input.hash) && typeof input.hash !== "string" || typeof input.index !== "number") {
            throw new Error("Error adding input.");
          }
          const hash = typeof input.hash === "string" ? (0, bufferutils_1.reverseBuffer)(Buffer.from(input.hash, "hex")) : input.hash;
          this.tx.addInput(hash, input.index, input.sequence);
        }
        addOutput(output) {
          if (output.script === void 0 || output.value === void 0 || !Buffer.isBuffer(output.script) || typeof output.value !== "number") {
            throw new Error("Error adding output.");
          }
          this.tx.addOutput(output.script, output.value);
        }
        toBuffer() {
          return this.tx.toBuffer();
        }
      };
      function canFinalize(input, script, scriptType) {
        switch (scriptType) {
          case "pubkey":
          case "pubkeyhash":
          case "witnesspubkeyhash":
            return hasSigs(1, input.partialSig);
          case "multisig":
            const p2ms = payments2.p2ms({ output: script });
            return hasSigs(p2ms.m, input.partialSig, p2ms.pubkeys);
          default:
            return false;
        }
      }
      function checkCache(cache) {
        if (cache.__UNSAFE_SIGN_NONSEGWIT !== false) {
          throw new Error("Not BIP174 compliant, can not export");
        }
      }
      function hasSigs(neededSigs, partialSig, pubkeys) {
        if (!partialSig)
          return false;
        let sigs;
        if (pubkeys) {
          sigs = pubkeys.map((pkey) => partialSig.find((pSig) => pSig.pubkey.equals(pkey))).filter((v) => !!v);
        } else {
          sigs = partialSig;
        }
        if (sigs.length > neededSigs)
          throw new Error("Too many signatures");
        return sigs.length === neededSigs;
      }
      function isFinalized(input) {
        return !!input.finalScriptSig || !!input.finalScriptWitness;
      }
      function bip32DerivationIsMine(root) {
        return (d) => {
          if (!d.masterFingerprint.equals(root.fingerprint))
            return false;
          if (!root.derivePath(d.path).publicKey.equals(d.pubkey))
            return false;
          return true;
        };
      }
      function check32Bit(num) {
        if (typeof num !== "number" || num !== Math.floor(num) || num > 4294967295 || num < 0) {
          throw new Error("Invalid 32 bit integer");
        }
      }
      function checkFees(psbt, cache, opts) {
        const feeRate = cache.__FEE_RATE || psbt.getFeeRate();
        const vsize = cache.__EXTRACTED_TX.virtualSize();
        const satoshis = feeRate * vsize;
        if (feeRate >= opts.maximumFeeRate) {
          throw new Error(
            `Warning: You are paying around ${(satoshis / 1e8).toFixed(8)} in fees, which is ${feeRate} satoshi per byte for a transaction with a VSize of ${vsize} bytes (segwit counted as 0.25 byte per byte). Use setMaximumFeeRate method to raise your threshold, or pass true to the first arg of extractTransaction.`
          );
        }
      }
      function checkInputsForPartialSig(inputs, action) {
        inputs.forEach((input) => {
          const throws = (0, psbtutils_1.checkInputForSig)(input, action);
          if (throws)
            throw new Error("Can not modify transaction, signatures exist.");
        });
      }
      function checkPartialSigSighashes(input) {
        if (!input.sighashType || !input.partialSig)
          return;
        const { partialSig, sighashType } = input;
        partialSig.forEach((pSig) => {
          const { hashType } = bscript.signature.decode(pSig.signature);
          if (sighashType !== hashType) {
            throw new Error("Signature sighash does not match input sighash type");
          }
        });
      }
      function checkScriptForPubkey(pubkey, script, action) {
        if (!(0, psbtutils_1.pubkeyInScript)(pubkey, script)) {
          throw new Error(
            `Can not ${action} for this input with the key ${pubkey.toString("hex")}`
          );
        }
      }
      function checkTxEmpty(tx) {
        const isEmpty = tx.ins.every(
          (input) => input.script && input.script.length === 0 && input.witness && input.witness.length === 0
        );
        if (!isEmpty) {
          throw new Error("Format Error: Transaction ScriptSigs are not empty");
        }
      }
      function checkTxForDupeIns(tx, cache) {
        tx.ins.forEach((input) => {
          checkTxInputCache(cache, input);
        });
      }
      function checkTxInputCache(cache, input) {
        const key = (0, bufferutils_1.reverseBuffer)(Buffer.from(input.hash)).toString("hex") + ":" + input.index;
        if (cache.__TX_IN_CACHE[key])
          throw new Error("Duplicate input detected.");
        cache.__TX_IN_CACHE[key] = 1;
      }
      function scriptCheckerFactory(payment, paymentScriptName) {
        return (inputIndex, scriptPubKey, redeemScript, ioType) => {
          const redeemScriptOutput = payment({
            redeem: { output: redeemScript }
          }).output;
          if (!scriptPubKey.equals(redeemScriptOutput)) {
            throw new Error(
              `${paymentScriptName} for ${ioType} #${inputIndex} doesn't match the scriptPubKey in the prevout`
            );
          }
        };
      }
      var checkRedeemScript = scriptCheckerFactory(payments2.p2sh, "Redeem script");
      var checkWitnessScript = scriptCheckerFactory(
        payments2.p2wsh,
        "Witness script"
      );
      function getTxCacheValue(key, name, inputs, c) {
        if (!inputs.every(isFinalized))
          throw new Error(`PSBT must be finalized to calculate ${name}`);
        if (key === "__FEE_RATE" && c.__FEE_RATE)
          return c.__FEE_RATE;
        if (key === "__FEE" && c.__FEE)
          return c.__FEE;
        let tx;
        let mustFinalize = true;
        if (c.__EXTRACTED_TX) {
          tx = c.__EXTRACTED_TX;
          mustFinalize = false;
        } else {
          tx = c.__TX.clone();
        }
        inputFinalizeGetAmts(inputs, tx, c, mustFinalize);
        if (key === "__FEE_RATE")
          return c.__FEE_RATE;
        else if (key === "__FEE")
          return c.__FEE;
      }
      function getFinalScripts(inputIndex, input, script, isSegwit, isP2SH, isP2WSH) {
        const scriptType = classifyScript(script);
        if (!canFinalize(input, script, scriptType))
          throw new Error(`Can not finalize input #${inputIndex}`);
        return prepareFinalScripts(
          script,
          scriptType,
          input.partialSig,
          isSegwit,
          isP2SH,
          isP2WSH
        );
      }
      function prepareFinalScripts(script, scriptType, partialSig, isSegwit, isP2SH, isP2WSH) {
        let finalScriptSig;
        let finalScriptWitness;
        const payment = getPayment(script, scriptType, partialSig);
        const p2wsh = !isP2WSH ? null : payments2.p2wsh({ redeem: payment });
        const p2sh = !isP2SH ? null : payments2.p2sh({ redeem: p2wsh || payment });
        if (isSegwit) {
          if (p2wsh) {
            finalScriptWitness = (0, psbtutils_1.witnessStackToScriptWitness)(
              p2wsh.witness
            );
          } else {
            finalScriptWitness = (0, psbtutils_1.witnessStackToScriptWitness)(
              payment.witness
            );
          }
          if (p2sh) {
            finalScriptSig = p2sh.input;
          }
        } else {
          if (p2sh) {
            finalScriptSig = p2sh.input;
          } else {
            finalScriptSig = payment.input;
          }
        }
        return {
          finalScriptSig,
          finalScriptWitness
        };
      }
      function getHashAndSighashType(inputs, inputIndex, pubkey, cache, sighashTypes) {
        console.log("fuck checkForInput0");
        const input = (0, utils_1.checkForInput)(inputs, inputIndex);
        console.log("fuck checkForInput1");
        const { hash, sighashType, script } = getHashForSig(
          inputIndex,
          input,
          cache,
          false,
          sighashTypes
        );
        checkScriptForPubkey(pubkey, script, "sign");
        return {
          hash,
          sighashType
        };
      }
      function getHashForSig(inputIndex, input, cache, forValidate, sighashTypes) {
        const unsignedTx = cache.__TX;
        const sighashType = input.sighashType || transaction_1.Transaction.SIGHASH_ALL;
        checkSighashTypeAllowed(sighashType, sighashTypes);
        let hash;
        let prevout;
        if (input.nonWitnessUtxo) {
          const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
            cache,
            input,
            inputIndex
          );
          const prevoutHash = unsignedTx.ins[inputIndex].hash;
          const utxoHash = nonWitnessUtxoTx.getHash();
          if (!prevoutHash.equals(utxoHash)) {
            throw new Error(
              `Non-witness UTXO hash for input #${inputIndex} doesn't match the hash specified in the prevout`
            );
          }
          const prevoutIndex = unsignedTx.ins[inputIndex].index;
          prevout = nonWitnessUtxoTx.outs[prevoutIndex];
        } else if (input.witnessUtxo) {
          prevout = input.witnessUtxo;
        } else {
          throw new Error("Need a Utxo input item for signing");
        }
        const { meaningfulScript, type } = getMeaningfulScript(
          prevout.script,
          inputIndex,
          "input",
          input.redeemScript,
          input.witnessScript
        );
        if (["p2sh-p2wsh", "p2wsh"].indexOf(type) >= 0) {
          hash = unsignedTx.hashForWitnessV0(
            inputIndex,
            meaningfulScript,
            prevout.value,
            sighashType
          );
        } else if ((0, psbtutils_1.isP2WPKH)(meaningfulScript)) {
          const signingScript = payments2.p2pkh({
            hash: meaningfulScript.slice(2)
          }).output;
          hash = unsignedTx.hashForWitnessV0(
            inputIndex,
            signingScript,
            prevout.value,
            sighashType
          );
        } else {
          if (input.nonWitnessUtxo === void 0 && cache.__UNSAFE_SIGN_NONSEGWIT === false)
            throw new Error(
              `Input #${inputIndex} has witnessUtxo but non-segwit script: ${meaningfulScript.toString("hex")}`
            );
          if (!forValidate && cache.__UNSAFE_SIGN_NONSEGWIT !== false)
            console.warn(
              "Warning: Signing non-segwit inputs without the full parent transaction means there is a chance that a miner could feed you incorrect information to trick you into paying large fees. This behavior is the same as Psbt's predecesor (TransactionBuilder - now removed) when signing non-segwit scripts. You are not able to export this Psbt with toBuffer|toBase64|toHex since it is not BIP174 compliant.\n*********************\nPROCEED WITH CAUTION!\n*********************"
            );
          hash = unsignedTx.hashForSignature(
            inputIndex,
            meaningfulScript,
            sighashType
          );
        }
        return {
          script: meaningfulScript,
          sighashType,
          hash
        };
      }
      function checkSighashTypeAllowed(sighashType, sighashTypes) {
        if (sighashTypes && sighashTypes.indexOf(sighashType) < 0) {
          const str = sighashTypeToString(sighashType);
          throw new Error(
            `Sighash type is not allowed. Retry the sign method passing the sighashTypes array of whitelisted types. Sighash type: ${str}`
          );
        }
      }
      function getPayment(script, scriptType, partialSig) {
        let payment;
        switch (scriptType) {
          case "multisig":
            const sigs = getSortedSigs(script, partialSig);
            payment = payments2.p2ms({
              output: script,
              signatures: sigs
            });
            break;
          case "pubkey":
            payment = payments2.p2pk({
              output: script,
              signature: partialSig[0].signature
            });
            break;
          case "pubkeyhash":
            payment = payments2.p2pkh({
              output: script,
              pubkey: partialSig[0].pubkey,
              signature: partialSig[0].signature
            });
            break;
          case "witnesspubkeyhash":
            payment = payments2.p2wpkh({
              output: script,
              pubkey: partialSig[0].pubkey,
              signature: partialSig[0].signature
            });
            break;
        }
        return payment;
      }
      function getScriptFromInput(inputIndex, input, cache) {
        const unsignedTx = cache.__TX;
        const res = {
          script: null,
          isSegwit: false,
          isP2SH: false,
          isP2WSH: false
        };
        res.isP2SH = !!input.redeemScript;
        res.isP2WSH = !!input.witnessScript;
        if (input.witnessScript) {
          res.script = input.witnessScript;
        } else if (input.redeemScript) {
          res.script = input.redeemScript;
        } else {
          if (input.nonWitnessUtxo) {
            const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
              cache,
              input,
              inputIndex
            );
            const prevoutIndex = unsignedTx.ins[inputIndex].index;
            res.script = nonWitnessUtxoTx.outs[prevoutIndex].script;
          } else if (input.witnessUtxo) {
            res.script = input.witnessUtxo.script;
          }
        }
        if (input.witnessScript || (0, psbtutils_1.isP2WPKH)(res.script)) {
          res.isSegwit = true;
        }
        return res;
      }
      function getSignersFromHD(inputIndex, inputs, hdKeyPair) {
        const input = (0, utils_1.checkForInput)(inputs, inputIndex);
        if (!input.bip32Derivation || input.bip32Derivation.length === 0) {
          throw new Error("Need bip32Derivation to sign with HD");
        }
        const myDerivations = input.bip32Derivation.map((bipDv) => {
          if (bipDv.masterFingerprint.equals(hdKeyPair.fingerprint)) {
            return bipDv;
          } else {
            return;
          }
        }).filter((v) => !!v);
        if (myDerivations.length === 0) {
          throw new Error(
            "Need one bip32Derivation masterFingerprint to match the HDSigner fingerprint"
          );
        }
        const signers = myDerivations.map((bipDv) => {
          const node = hdKeyPair.derivePath(bipDv.path);
          if (!bipDv.pubkey.equals(node.publicKey)) {
            throw new Error("pubkey did not match bip32Derivation");
          }
          return node;
        });
        return signers;
      }
      function getSortedSigs(script, partialSig) {
        const p2ms = payments2.p2ms({ output: script });
        return p2ms.pubkeys.map((pk) => {
          return (partialSig.filter((ps) => {
            return ps.pubkey.equals(pk);
          })[0] || {}).signature;
        }).filter((v) => !!v);
      }
      function scriptWitnessToWitnessStack(buffer) {
        let offset = 0;
        function readSlice(n) {
          offset += n;
          return buffer.slice(offset - n, offset);
        }
        function readVarInt() {
          const vi = varuint.decode(buffer, offset);
          offset += varuint.decode.bytes;
          return vi;
        }
        function readVarSlice() {
          return readSlice(readVarInt());
        }
        function readVector() {
          const count = readVarInt();
          const vector = [];
          for (let i = 0; i < count; i++)
            vector.push(readVarSlice());
          return vector;
        }
        return readVector();
      }
      function sighashTypeToString(sighashType) {
        let text = sighashType & transaction_1.Transaction.SIGHASH_ANYONECANPAY ? "SIGHASH_ANYONECANPAY | " : "";
        const sigMod = sighashType & 31;
        switch (sigMod) {
          case transaction_1.Transaction.SIGHASH_ALL:
            text += "SIGHASH_ALL";
            break;
          case transaction_1.Transaction.SIGHASH_SINGLE:
            text += "SIGHASH_SINGLE";
            break;
          case transaction_1.Transaction.SIGHASH_NONE:
            text += "SIGHASH_NONE";
            break;
        }
        return text;
      }
      function addNonWitnessTxCache(cache, input, inputIndex) {
        cache.__NON_WITNESS_UTXO_BUF_CACHE[inputIndex] = input.nonWitnessUtxo;
        const tx = transaction_1.Transaction.fromBuffer(input.nonWitnessUtxo);
        cache.__NON_WITNESS_UTXO_TX_CACHE[inputIndex] = tx;
        const self2 = cache;
        const selfIndex = inputIndex;
        delete input.nonWitnessUtxo;
        Object.defineProperty(input, "nonWitnessUtxo", {
          enumerable: true,
          get() {
            const buf = self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex];
            const txCache = self2.__NON_WITNESS_UTXO_TX_CACHE[selfIndex];
            if (buf !== void 0) {
              return buf;
            } else {
              const newBuf = txCache.toBuffer();
              self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = newBuf;
              return newBuf;
            }
          },
          set(data) {
            self2.__NON_WITNESS_UTXO_BUF_CACHE[selfIndex] = data;
          }
        });
      }
      function inputFinalizeGetAmts(inputs, tx, cache, mustFinalize) {
        let inputAmount = 0;
        inputs.forEach((input, idx) => {
          if (mustFinalize && input.finalScriptSig)
            tx.ins[idx].script = input.finalScriptSig;
          if (mustFinalize && input.finalScriptWitness) {
            tx.ins[idx].witness = scriptWitnessToWitnessStack(
              input.finalScriptWitness
            );
          }
          if (input.witnessUtxo) {
            inputAmount += input.witnessUtxo.value;
          } else if (input.nonWitnessUtxo) {
            const nwTx = nonWitnessUtxoTxFromCache(cache, input, idx);
            const vout = tx.ins[idx].index;
            const out = nwTx.outs[vout];
            inputAmount += out.value;
          }
        });
        const outputAmount = tx.outs.reduce((total, o) => total + o.value, 0);
        const fee = inputAmount - outputAmount;
        if (fee < 0) {
          throw new Error("Outputs are spending more than Inputs");
        }
        const bytes = tx.virtualSize();
        cache.__FEE = fee;
        cache.__EXTRACTED_TX = tx;
        cache.__FEE_RATE = Math.floor(fee / bytes);
      }
      function nonWitnessUtxoTxFromCache(cache, input, inputIndex) {
        const c = cache.__NON_WITNESS_UTXO_TX_CACHE;
        if (!c[inputIndex]) {
          addNonWitnessTxCache(cache, input, inputIndex);
        }
        return c[inputIndex];
      }
      function getScriptFromUtxo(inputIndex, input, cache) {
        const { script } = getScriptAndAmountFromUtxo(inputIndex, input, cache);
        return script;
      }
      function getScriptAndAmountFromUtxo(inputIndex, input, cache) {
        if (input.witnessUtxo !== void 0) {
          return {
            script: input.witnessUtxo.script,
            value: input.witnessUtxo.value
          };
        } else if (input.nonWitnessUtxo !== void 0) {
          const nonWitnessUtxoTx = nonWitnessUtxoTxFromCache(
            cache,
            input,
            inputIndex
          );
          const o = nonWitnessUtxoTx.outs[cache.__TX.ins[inputIndex].index];
          return { script: o.script, value: o.value };
        } else {
          throw new Error("Can't find pubkey in input without Utxo data");
        }
      }
      function pubkeyInInput(pubkey, input, inputIndex, cache) {
        const script = getScriptFromUtxo(inputIndex, input, cache);
        const { meaningfulScript } = getMeaningfulScript(
          script,
          inputIndex,
          "input",
          input.redeemScript,
          input.witnessScript
        );
        return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
      }
      function pubkeyInOutput(pubkey, output, outputIndex, cache) {
        const script = cache.__TX.outs[outputIndex].script;
        const { meaningfulScript } = getMeaningfulScript(
          script,
          outputIndex,
          "output",
          output.redeemScript,
          output.witnessScript
        );
        return (0, psbtutils_1.pubkeyInScript)(pubkey, meaningfulScript);
      }
      function redeemFromFinalScriptSig(finalScript) {
        if (!finalScript)
          return;
        const decomp = bscript.decompile(finalScript);
        if (!decomp)
          return;
        const lastItem = decomp[decomp.length - 1];
        if (!Buffer.isBuffer(lastItem) || isPubkeyLike(lastItem) || isSigLike(lastItem))
          return;
        const sDecomp = bscript.decompile(lastItem);
        if (!sDecomp)
          return;
        return lastItem;
      }
      function redeemFromFinalWitnessScript(finalScript) {
        if (!finalScript)
          return;
        const decomp = scriptWitnessToWitnessStack(finalScript);
        const lastItem = decomp[decomp.length - 1];
        if (isPubkeyLike(lastItem))
          return;
        const sDecomp = bscript.decompile(lastItem);
        if (!sDecomp)
          return;
        return lastItem;
      }
      function isPubkeyLike(buf) {
        return buf.length === 898 && bscript.isCanonicalPubKey(buf);
      }
      function isSigLike(buf) {
        return bscript.isCanonicalScriptSignature(buf);
      }
      function getMeaningfulScript(script, index, ioType, redeemScript, witnessScript) {
        console.log(script);
        const isP2SH = (0, psbtutils_1.isP2SHScript)(script);
        const isP2SHP2WSH = isP2SH && redeemScript && (0, psbtutils_1.isP2WSHScript)(redeemScript);
        const isP2WSH = (0, psbtutils_1.isP2WSHScript)(script);
        console.log(isP2SH, isP2SHP2WSH, isP2WSH);
        if (isP2SH && redeemScript === void 0)
          throw new Error("scriptPubkey is P2SH but redeemScript missing");
        if ((isP2WSH || isP2SHP2WSH) && witnessScript === void 0)
          throw new Error(
            "scriptPubkey or redeemScript is P2WSH but witnessScript missing"
          );
        let meaningfulScript;
        if (isP2SHP2WSH) {
          meaningfulScript = witnessScript;
          checkRedeemScript(index, script, redeemScript, ioType);
          checkWitnessScript(index, redeemScript, witnessScript, ioType);
          checkInvalidP2WSH(meaningfulScript);
        } else if (isP2WSH) {
          meaningfulScript = witnessScript;
          checkWitnessScript(index, script, witnessScript, ioType);
          checkInvalidP2WSH(meaningfulScript);
        } else if (isP2SH) {
          meaningfulScript = redeemScript;
          checkRedeemScript(index, script, redeemScript, ioType);
        } else {
          meaningfulScript = script;
        }
        return {
          meaningfulScript,
          type: isP2SHP2WSH ? "p2sh-p2wsh" : isP2SH ? "p2sh" : isP2WSH ? "p2wsh" : "raw"
        };
      }
      function checkInvalidP2WSH(script) {
        if ((0, psbtutils_1.isP2WPKH)(script) || (0, psbtutils_1.isP2SHScript)(script)) {
          throw new Error("P2WPKH or P2SH can not be contained within P2WSH");
        }
      }
      function classifyScript(script) {
        if ((0, psbtutils_1.isP2WPKH)(script))
          return "witnesspubkeyhash";
        if ((0, psbtutils_1.isP2PKH)(script))
          return "pubkeyhash";
        if ((0, psbtutils_1.isP2MS)(script))
          return "multisig";
        if ((0, psbtutils_1.isP2PK)(script))
          return "pubkey";
        return "nonstandard";
      }
      function range(n) {
        return [...Array(n).keys()];
      }
    }
  });

  // node_modules/tidecoinjs-lib/src/index.js
  var require_src2 = __commonJS({
    "node_modules/tidecoinjs-lib/src/index.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Transaction = exports.opcodes = exports.Psbt = exports.Block = exports.script = exports.payments = exports.networks = exports.crypto = exports.address = void 0;
      var address = require_address();
      exports.address = address;
      var crypto2 = require_crypto2();
      exports.crypto = crypto2;
      var networks = require_networks();
      exports.networks = networks;
      var payments2 = require_payments();
      exports.payments = payments2;
      var script = require_script();
      exports.script = script;
      var block_1 = require_block();
      Object.defineProperty(exports, "Block", {
        enumerable: true,
        get: function() {
          return block_1.Block;
        }
      });
      var psbt_1 = require_psbt2();
      Object.defineProperty(exports, "Psbt", {
        enumerable: true,
        get: function() {
          return psbt_1.Psbt;
        }
      });
      var ops_1 = require_ops();
      Object.defineProperty(exports, "opcodes", {
        enumerable: true,
        get: function() {
          return ops_1.OPS;
        }
      });
      var transaction_1 = require_transaction();
      Object.defineProperty(exports, "Transaction", {
        enumerable: true,
        get: function() {
          return transaction_1.Transaction;
        }
      });
    }
  });

  // node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/networks.js
  var require_networks2 = __commonJS({
    "node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/networks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mainnet = void 0;
      exports.mainnet = {
        messagePrefix: "Tidecoin Signed Message:\n",
        bech32: "tbc",
        bip32: {
          public: 124300510,
          private: 124321457
        },
        pubKeyHash: 33,
        scriptHash: 65,
        wif: 176
      };
    }
  });

  // node_modules/rust-falcon/dist/wasm.js
  var require_wasm = __commonJS({
    "node_modules/rust-falcon/dist/wasm.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var baseToUint = (s) => {
        if (typeof window !== "undefined") {
          return new Uint8Array(window.atob(s).split("").map(charCodeAt));
        } else {
          return Buffer.from(s, "base64");
        }
      };
      var charCodeAt = (c) => {
        return c.charCodeAt(0);
      };
      exports.default = baseToUint("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EHciByALIBVqIgYgGXNBEHciBCAYaiICIAtzQQx3IiUgBmoiCSAEc0EIdyIGIAJqIgtqIgQgDHNBDHciAiAIaiIXIAdzQQh3IhQgBGoiGCACc0EHdyEMICEgBiAFIA4gInNBCHciCCAjaiIFICRzQQd3IgJqIgdzQRB3IgZqIgQgAnNBDHciAiAHaiIWIAZzQQh3IhkgBGoiDiACc0EHdyECIAUgICAJIAogD2oiCSANc0EHdyIEaiIFc0EQdyIHaiIGIARzQQx3IgQgBWoiFSAHc0EIdyIPIAZqIg0gBHNBB3chCiALICVzQQd3IgQgH2oiBSAIc0EQdyIHIAlqIgYgBHNBDHciBCAFaiIFIAdzQQh3IgggBmoiCSAEc0EHdyELIANBAWshAwwBBSABIA82AjAgASAMNgIQIAEgBTYCACABIA42AiAgASAZNgI0IAEgCzYCFCABIBU2AgQgASAYNgIkIAEgFDYCOCABIAo2AhggASAWNgIIIAEgCTYCKCABIAg2AjwgASACNgIcIAEgFzYCDCABIA02AixBACEDA0AgA0EQRgRAQQAhAwNAIANBKEYEQCABIAEoAjggACgCqAQgHnNqNgI4IAEgASgCPCAAKAKsBCAdc2o2AjwgJkIBfCEmIBNBAWohEyABIQJBACEDA0AgA0GABEYEQCASQQRqIRIgEUEEayERIBBBBGshEAwJCyADIBxHBEAgAyASaiACKAIANgIAIANBIGohAyACQQRqIQIMAQsLIAMgEWtBgARByKrBABBSAAUgASADakEQaiICIAMgGmooAgAgAigCAGo2AgAgA0EEaiEDDAELAAsABSABIANqIgIgA0HYqsEAaigCACACKAIAajYCACADQQRqIQMMAQsACwALAAsACwsgAEEANgKABiAAICY3A7AEIAFBQGskAAumBwEFfyAAEM8BIgAgABDAASIBEMwBIQICQAJAIAAQwQENACAAKAIAIQMgABC3AUUEQCABIANqIQEgACADEM0BIgBBlOzCACgCAEYEQCACKAIEQQNxQQNHDQJBjOzCACABNgIAIAAgASACEJABDwsgA0GAAk8EQCAAECwMAgsgAEEMaigCACIEIABBCGooAgAiBUcEQCAFIAQ2AgwgBCAFNgIIDAILQYTswgBBhOzCACgCAEF+IANBA3Z3cTYCAAwBCyABIANq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p0H/////B3E2AgAMBwsgByADQYCRwAAQUgALIAcgAUGgkMAAEFIACyACIAxqIBM+AgAgACABIAYgBCAFIBRCP4inEDAgAiADIAYgBCAFIBNCP4inEDAPCyABIAFBwJDAABBSAAsgAyADQdCQwAAQUgALIAUgBUHgkMAAEFIACyAHIAFB8JDAABBSAAsgDEEEaiEMIAdBAWohByATQh+HIRMgFEIfhyEUDAALAAtBAEEAQZCQwAAQUgALQQBBAEGAkMAAEFIAC9cEAQR/IAAgARDMASECAkACQAJAIAAQwQENACAAKAIAIQMgABC3AUUEQCABIANqIQEgACADEM0BIgBBlOzCACgCAEYEQCACKAIEQQNxQQNHDQJBjOzCACABNgIAIAAgASACEJABDwsgA0GAAk8EQCAAECwMAgsgAEEMaigCACIEIABBCGooAgAiBUcEQCAFIAQ2AgwgBCAFNgIIDAILQYTswgBBhOzCACgCAEF+IANBA3Z3cTYCAAwBCyABIANqQRBqIQAMAQsgAhCzAQRAIAAgASACEJABDAILAkBBmOzCACgCACACRwRAIAJBlOzCACgCAEYNASACEMABIgMgAWohAQJAIANBgAJPBEAgAhAsDAELIAJBDGooAgAiBCACQQhqKAIAIgJHBEAgAiAENgIMIAQgAjYCCAwBC0GE7MIAQYTswgAoAgBBfiADQQN2d3E2AgALIAAgARCiASAAQZTswgAoAgBHDQNBjOzCACABNgIADAILQZjswgAgADYCAEGQ7MIAQZDswgAoAgAgAWoiATYCACAAIAFBAXI2AgQgAEGU7MIAKAIARw0BQYzswgBBADYCAEGU7MIAQQA2AgAPC0GU7MIAIAA2AgBBjOzCAEGM7MIAKAIAIAFqIgE2AgAgACABEKIBDwsPCyABQYACTwRAIAAgARAuDwsgAUF4cUH86cIAaiECAn9BhOzCACgCACIDQQEgAUEDdnQiAXEEQCACKAIIDAELQYTswgAgASADcjYCACACCyEBIAIgADYCCCABIAA2AgwgACACNgIMIAAgATYCCAuVBAIVfwd+IwBBMGsiAyQAQQEgAiACQQFNGyEOQQEgAnRBAXYiBkEDdCEPQQIhByAGIQVBASELAkACQAJAAkACQANAIAsgDkYNASAFQQN0IRAgB0EBdiERIAVBAXYiCEEDdCESIAYgCGoiE0EDdCEUQQAhCSAAIQxBACEKA0AgCiARRgRAIAdBAXQhByALQQFqIQsgCCEFDAILIAcgCmpBAXQiAkH/D0sNAyAIIAlqIRUgAkEDdCICQcDgwQBqKQMAIRkgAkEIckHA4MEAaikDACEaIAwhBCAJIQIDQCACIBVPBEAgDCAQaiEMIAUgCWohCSAKQQFqIQoMAgsgASACTQ0FIAIgBmoiDSABTw0GIAIgCGogAU8NByABIAIgE2pLBEAgA0EgaiAEIBJqIg0pAwAgBCAUaiIWKQMAIBkgGhCEASADQRBqIAQpAwAiGCAEIA9qIhcpAwAiGyADKQMgIhwgAykDKCIdEJ8BIAMpAxghHiAEIAMpAxA3AwAgFyAeNwMAIAMgGCAbIBwgHRCSASADKQMIIRggDSADKQMANwMAIBYgGDcDACAEQQhqIQQgAkEBaiECDAELCwsLIAYgBUEBdmogAmogAUHwrsEAEFIACyADQTBqJAAPCyACQYAQQbCuwQAQUgALIAIgAUHArsEAEFIACyANIAFB0K7BABBSAAsgBUEBdiACaiABQeCuwQAQUgALjwQBEH9BASACdCIMIQZBASEHAkACQANAIAZBAU0EQEH7HyECIAwhAwNAIANBAU0EQAJAQQAhAwNAIAMgDEYNASABIANHBEAgACACIAAvAQBsIgVB/98AbEH//wNxQYHgAGwgBWoiCEEQdiIFIAVB/58DaiAIQYCAhIADSRs7AQAgAEECaiEAIANBAWohAwwBCwsgASABQZTLwQAQUgALBSADQQF2IQNBACACQQFxa0GB4ABxIAJqQQF2IQIMAQsLDwtBACEJQYAIIAZBAXYiBmsiAkEAIAJBgAhNGyEOIAdBAnQhDyAHQQF0IQggACEFQQAhCgNAIAYgCUYEQCAIIQcMAgsgBiAJaiECIAkgDkYNAiAJQQFqIQkgByAKaiEQIAJBAXRBpMvBAGovAQAhESAFIQMgCiECA0AgAiAQTwRAIAUgD2ohBSAIIApqIQoMAgsgASACTQ0EIAEgAiAHaiIESwRAIAMgAyAIaiISLwEAIgsgAy8BACIEaiINIA1B/58DaiANQYHgAEkbOwEAIBIgBCALayIEQR91QYHgAHEgBGogEWwiBEH/3wBsQf//A3FBgeAAbCAEaiILQRB2IgQgBEH/nwNqIAtBgICEgANJGzsBACACQQFqIQIgA0ECaiEDDAELCwsLIAQgAUHE28EAEFIACyACQYAIQaTbwQAQUgALIAIgAUG028EAEFIAC+oHAg5/Bn4jAEEQayIPJAAgBwRAIAZBgbD//wc2AgBBASACIAJBAU0bIRJBASEJAkADQCAJIBJGBEAgBUUNAkEAIQkDQCAEUA0DIA8gACABIAlBgI7AABBuIA8oAgghDiAPKAIMIQhBACESQQAhCkEBIAJrIQUgAkEBayEQIAJBAnRBBGshDAJAAkACQANAIAVBAUcEQCAIIBBNDQIgByAQTQ0DIBIgEkEBcUEBa0EAIApBHnQgBiAMaigCACILQQF2ciAMIA5qKAIAayIKa0EfdiAKQR91cnFyIRIgDEEEayEMIAVBAWohBSALQQFxIQoMAQsLIA4hCiAIIQ4gBiEFQQAhDEEAIBJBH3ZrIQtBACEIAkACQANAIAIgDEYNAiAMIA5GDQEgByAMRwRAIAogCigCACIQIAggBSgCAGprIghB/////wdxIBBzIAtxIBBzNgIAIAxBAWohDCAFQQRqIQUgCkEEaiEKIAhBH3YhCAwBCwsgByAHQeCMwAAQUgALIA4gDkHQjMAAEFIACwwCC0EAIAVrIAhB0I3AABBSAAtBACAFayAHQeCNwAAQUgALIARCAX0hBCADIAlqIQkMAAsACyAJQYoERwRAIAlBAWohDkECQQJBAkECIAlBDGwiCkHI48AAaigCACINayIIIA1sayAIbCIIIA1sayAIbCIIIA1sayAIbCIIIA1sQf7///8HaiAIbCIIrSEYIApB0OPAAGo1AgAhGSANrSEaQQAhFCANIAhB/////wdxIgwQLSEQIAQhFgNAIBZQBEAgBiAHIAkgDRBZIQggByAJRwRAIAYgCUECdGogCDYCACAOIQkMBAsgByAHQaCOwAAQUgALIA8gACABIBRBsI7AABBuIA8oAgwiESAJTQRAIAkgEUHAjsAAEFIABSAGIQpBACEVIA8oAggiCCAJQQJ0aigCACAIIBEgCSANIAwgEBA6ayILQR91IA1xIAtqrSAZfiIXIBh+Qv////8HgyAafiAXfEIfiKciCyALIA1rIgsgC0EASButIRtBACETIAghCwJAAkACQANAAkAgCSATRgRAIAkgEUkNASAJIBFBoI3AABBSAAsgESATRg0CIAcgE0YN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fwh+IAEgAUI/hyIIIAggAUIKhkKA+P///////z+DQoCAgICAgICAwACEhSABQj+IfCIIQiCHIAhBPSABQjSIpyIDayIEQSBxGyAEQR9xrYcgA0H+D3FB/gdJGyINEEJCgICAgICAgICAf4UQIkKAgICAgICAgIB/hSEOIAIgAhApQoCAgICAgIAIfSIBQjSIQv8Pg0IBfEILiEIBfSABgyEPIAIgACkDiAYQKSECAkADQCAAKAKABiIDQfcDTwRAIAAQD0EAIQMLIAAgA0EJajYCgAYgACADaiIDQQZqLwAAIANBCGotAABBEHRyIQUgA0EDai8AACADQQVqLQAAQRB0ciEGIAMvAAAgA0ECai0AAEEQdHIhB0EAIQNBqH4hBAN/IAQEfyAFIARBiKLBAGooAgBrIAYgBEGMosEAaigCAGsgByAEQZCiwQBqKAIAa0EfdWpBH3VqQR92IANqIQMgBEEMaiEEDAEFIAMLCxogACgCgAYiBEH/A0sNASAAIARqLQAAIQUgACAEQQFqIgQ2AoAGIARBgARGBEAgABAPCwJ/IAVBAXEiBEEBdEEBayADbCAEaiIFrBBCIA4QIiIBIAEQKSAPECkgAyADbKwQQkLC946MvPHT4T8QKUKAgICAgICAgIB/hRAiIgEgAUL+ha6p9qjF+z8QKSIBQgqGQoD4////////P4NCgICAgICAgIDAAIQiCEIgiCAIQT0gAUI0iKciA2siBEEgcRsgBEEfca2IQgAgA0H+D3FB/QdLGyABQj+HhSABQj+IfCIMxBBCQu/z6PevyIvzPxApQoCAgICAgICAgH+FECJCgICAgICAgPDDABApIgFCCoZCgPj///////8/g0KAgICAgICAgMAAhCIIQiCIIAhBPSABQjSIpyIDayIEQSBxGyAEQR9xrYhCACADQf4PcUH9B0sbIAFCP4eFIAFCP4h8QgGGIgFCIIghCCABQv7///8PgyEJQqOHxqDHACEBQQghAwN+IANB6ABGBH4gAkKAgICAgICA8MMAECkiCEIKhkKA+P///////z+DQoCAgICAgICAwACEIglCIIggCUE9IAhCNIinIgNrIgRBIHEbIARBH3GtiEIAIANB/g9xQf0HSxsgCEI/h4UgCEI/iHxCAYYiCEIgiCIJIAFC/////w+DIgp+IgtCIIggCSABQiCIIgF+fCAIQv7///8PgyIIIAp+QiCIIAEgCH58IgFCIIh8IAFC/////w+DIAtC/////w+DfEIgiHwFIANB2N/BAGopAwAgAUIgiCIKIAh+IAFC/////w+DIgEgCH4iC0IgiHwgCSAKfiABIAl+QiCIfCIBQiCIfCABQv////8PgyALQv////8Pg3xCIIh8fSEBIANBCGohAwwBCwtCAYZCAX1CPyAMQj+DIAynQUBqQQBOG4ghCEI4IQECQANAIAAoAoAGIgNB/wNLDQEgACADai0AACEEIAAgA0EBaiIDNgKABiADQYAERgRAIAAQDwsgCCABiKciA0H/AXEgBEYEQCABQgBSIAFCCH0hAQ0BCwsgA0H/AXEgBEsMAQsgA0GABEGglcEAEFIAC0UNAAsgBSANp2oPCyAEQYAEQaCVwQAQUgALuwIBBX8gACgCGCEDAkACQCAAIAAoAgxGBEAgAEEUQRAgAEEUaiIBKAIAIgQbaigCACICDQFBACEBDAILIAAoAggiAiAAKAIMIgE2AgwgASACNgIIDAELIAEgAEEQaiAEGyEEA0AgBCEFIAIiAUEUaiICIAFBEGogAigCACICGyEEIAFBFEEQIAIbaigCACICDQALIAVBADYCAAsCQCADRQ0AAkAgACAAKAIcQQJ0QezowgBqIgIoAgBHBEAgA0EQQRQgAygCECAARhtqIAE2AgAgAQ0BDAILIAIgATYCACABDQBBiOzCAEGI7MIAKAIAQX4gACgCHHdxNgIADwsgASADNgIYIAAoAhAiAgRAIAEgAjYCECACIAE2AhgLIABBFGooAgAiAEUNACABQRRqIAA2AgAgACABNgIYCwuJAgIDfgF/IABBACAArSIEQQAgAEEBdGsgAEF9bCIFIAVBAEgbrSIDIAN+IgIgAa0iA35C/////weDfiACfEIfiKciASABIABrIgEgAUEASButIgIgAn4iAiADfkL/////B4MgBH4gAnxCH4inIgEgASAAayIBIAFBAEgbrSICIAJ+IgIgA35C/////weDIAR+IAJ8Qh+IpyIBIAEgAGsiASABQQBIG60iAiACfiICIAN+Qv////8HgyAEfiACfEIfiKciASABIABrIgEgAUEASButIgIgAn4iAiADfkL/////B4MgBH4gAnxCH4inIgEgASAAayIAIABBAEgbIgBBAXFrcSAAakEBdgujAgEEfyAAQgA3AhAgAAJ/QQAgAUGAAkkNABpBHyABQf///wdLDQAaIAFBBiABQQh2ZyICa3ZBAXEgAkEBdGtBPmoLIgM2AhwgA0ECdEHs6MIAaiECAkACQAJAAkBBiOzCACgCACIEQQEgA3QiBXEEQCACKAIAIQIgAxChASEDIAIQwAEgAUcNASACIQMMAgtBiOzCACAEIAVyNgIAIAIgADYCAAwDCyABIAN0IQQDQCACIARBHXZBBHFqQRBqIgUoAgAiA0UNAiAEQQF0IQQgAyICEMABIAFHDQALCyADKAIIIgEgADYCDCADIAA2AgggACADNgIMIAAgATYCCCAAQQA2AhgPCyAFIAA2AgALIAAgAjYCGCAAIAA2AgggACAANgIMC+MBAgR+AX8gAEL/////////B4NCgICAgICAgAiEIQJCgICAgICAgAghAUE3IQUDfiAFBH4gBUEBayEFIAEgAn1CP4hCAX0iBEIBgyADhEIBhiEDIAEgAiAEg31CAYYhAQwBBSAAQoCAgICAgID4P4VCgICAgICAgICAf4NCACADQjeIIgJ9IAMgAUIAUq0iAYQiBCADQgGIIAGEhYMgBIUgAqcgAEI0iKdB/w9xa0H8D2oiBUEfdq1CAX2DIgBCAoiEIAVBACAAQjaIp2txrUI0hnxByAEgAKdBB3F2QQFxrXwLCwuSAgEFfyAEIAIgAiAESxsiByABIAEgB0sbIQogAyEHIAAhCAJAAkACQANAIAIgBkYEQEEAIQZBACAFa0EBdiEHQQAgCUUgBXJrIQgDQCACIAZGDQMgASAGRg0EIAQgBkcEQCAAIAAoAgAgBSADKAIAIAdzIAhxamsiBUH/////B3E2AgAgBkEBaiEGIANBBGohAyAAQQRqIQAgBUEfdiEFDAELCyAEIARB0I/AABBSAAsgASAGRg0DIAQgBkcEQCAGQQFqIQYgCCgCACAJIAcoAgBqa0EfdiEJIAdBBGohByAIQQRqIQgMAQsLIAogBEHwj8AAEFIACw8LIAEgAUHAj8AAEFIACyAKIAFB4I/AABBSAAubAgIBfgR/IANBASAGdEEBdiIIIAMgCEkbIANrIQogBSAIIAUgCEkbIAVrIQsgCEEDdCEJQQAhBgJAAkACQAJAAkADQCAGIAhqRQ0BIAMgBmpFDQIgBiAKRg0DIAIpAwAiByAHECkgAiAJaikDACIHIAcQKRAiIAUgBmpFDQQgBiALRg0FIAQpAwAiByAHECkgBCAJaikDACIHIAcQKRAiECIQLyEHIAEgBmoEQCAAIAc3AwAgAkEIaiECIARBCGohBCAGQQFrIQYgAEEIaiEADAELCyABIAFBwLLBABBSAAsPCyADIANBgLLBABBSAAsgCCAGayADQZCywQAQUgALIAUgBUGgssEAEFIACyAIIAZrIAVBsLLBABBSAAuQAgELfyAAKALIASEDIAIhBQJAAkADQCAFRQ0BIAQgAiACIARLGyEJIANBA3QhCkHIASADIANByAFPG0HIAWshC0GIASADayIGIAUgBSAGSxsiDCENIAQhByADIQYDQCANRQRAIAUgDGshBSAEIAxqIQQgAyAMaiIDQYgBRw0CIAAQDEEAIQMMAgsgAiAJRg0DIAZBA3YhCCALBEAgACAIQQN0aiIIIAgpAwAgASAHajEAACAKQThxrYaFNwMAIA1BAWshDSAJQQFqIQkgB0EBaiEHIAtBAWohCyAGQQFqIQYgCkEIaiEKDAELCwsgCEEZQeCJwAAQUgALIAAgA603A8gBDwsgByACQdCJwAAQUgALXQEMf0H06cIAKAIAIgIEQEHs6cIAIQYDQCACIgEoAgghAiABKAIEIQMgASgCACEEIAEoAgwaIAEhBiAFQQFqIQUgAg0ACwtBrOzCAEH/HyAFIAVB/x9NGzYCACAIC/4BAgJ/BH4gAkEBa0EfcSEHIAOtIQkgBK0hCiAFrSELQQAhBCAAIQVBACECAkACQAJAA0AgAiAHdg0BIAEgBE0NAiAEQQFqIAFPDQMgASACRwRAIAUgADUCACAAQQRqNQIAfiIIIAp+Qv////8HgyAJfiAIfEIfiKciBiAGIANrIgYgBkEASButIAt+IgggCn5C/////weDIAl+IAh8Qh+IpyIGIAYgA2siBiAGQQBIGzYCACACQQFqIQIgAEEIaiEAIARBAmohBCAFQQRqIQUMAQsLIAEgAUHAjMAAEFIACw8LIAQgAUGgjMAAEFIACyAEQQFqIAFBsIzAABBSAAuQAgIGfwF+IwBBEGsiBiQAIAFBASAEdEEBdiIFIAEgBUkbIAFrIQggAyAFIAMgBUkbIANrIQkgBUEDdCEHQQAhBAJAAkACQAJAA0AgBCAFakUNASABIARqRQ0CIAQgCEYNAyADIARqRQ0EIAQgCUcEQCAGIAApAwAgACAHaiIKKQMAIAIpAwAgAiAHaikDAEKAgICAgICAgIB/hRCEASAGKQMIIQsgACAGKQMANwMAIAogCzcDACAAQQhqIQAgBEEBayEEIAJBCGohAgwBCwsgBSAEayADQcCxwQAQUgALIAZBEGokAA8LIAEgAUGQscEAEFIACyAFIARrIAFBoLHBABBSAAsgAyADQbCxwQAQUgALhAICBn8BfiMAQRBrIgYkACABQQEgBHRBAXYiBSABIAVJGyABayEIIAMgBSADIAVJGyADayEJIAVBA3QhB0EAIQQCQAJAAkACQANAIAQgBWpFDQEgASAEakUNAiAEIAhGDQMgAyAEakUNBCAEIAlHBEAgBiAAKQMAIAAgB2oiCikDACACKQMAIAIgB2opAwAQhAEgBikDCCELIAAgBikDADcDACAKIAs3AwAgAEEIaiEAIARBAWshBCACQQhqIQIMAQsLIAUgBGsgA0GAscEAEFIACyAGQRBqJAAPCyABIAFB0LDBABBSAAsgBSAEayABQeCwwQAQUgALIAMgA0HwsMEAEFIAC4IEAhV/An4jAEEQayINJABBASAMdCIaQQFrIRsCQANAIA8gGkcEQCAJIA9GDQIgD0EBaiEcIAMgD2whF0EAIRhBACAIIA9BAnRqKAIAayETIBshDANAIAxBf0YEQCAcIQ8MAwUgDSAAIAEgF0HAlcAAEG4gDSgCDCESIA0oAgghECANIAQgBSAYQdCVwAAQbiANKAIIIRQgDSgCDCEVQQAhDkIAISICQCAGRQ0AAkAgFSAGQQFrIhZLBEAgAiAKayIRQQAgAiARTxshHSALQR9xIR4gECAKQQJ0aiERQR8gC2tBH3EhHyAKIBIgCiASSxsiICAKayEhQQAgFCAWQQJ0aigCAEEedmtBAXYhFiATrCEjQQAhGQNAIA4gHUYNAyAWIRAgBiAOSwRAIA4gFU8NAyAUKAIAIRALIA4gIUcEQCARIBE1AgAgIsQgECAedEH/////B3EgGXKtICN+fHwiIqdB/////wdxNgIAIBRBBGohFCAOQQFqIQ4gEUEEaiERIBAgH3YhGSAiQh+IISIMAQsLICAgEkGQlMAAEFIACyAWIBVB8JPAABBSAAsgDiAVQYCUwAAQUgALQQAgAyAXaiAMIA9GIhIbIRdBACATayATIBIbIRMgDEEBayEMIAcgGGohGAwBCwALAAsLIA1BEGokAA8LIAkgCUGwlcAAEFIAC98BAQh/IAAoAsgBIQMgAiEFAkACQANAIAVFDQEgA0GIAUYEQCAAEAxBACEDCyAFQYgBIANrIgYgBSAFIAZLGyIGayEFIAQgAiACIARJGyEIQcgBIAMgA0HIAU0bIQogA0EDdCEHA0AgBkUNASADQQN2IQkgAyAKRg0DIAQgCEcEQCABIARqIAAgCUEDdGopAwAgB0E4ca2IPAAAIAdBCGohByAGQQFrIQYgA0EBaiEDIARBAWohBAwBCwsLIAggAkGQisAAEFIACyAAIAOtNwPIAQ8LIAlBGUGAisAAEFIAC/wBAgR/AX4jAEEwayICJAAgAUEEaiEEIAEoAgRFBEAgASgCACEDIAJBKGoiBUEANgIAIAJCATcDICACIAJBIGo2AiwgAkEsakHUhMAAIAMQFxogAkEYaiAFKAIAIgM2AgAgAiACKQMgIgY3AxAgBEEIaiADNgIAIAQgBjcCAAsgAkEIaiIDIARBCGooAgA2AgAgAUEMakEANgIAIAQpAgAhBiABQgE3AgRBsejCAC0AABogAiAGNwMAQQxBBBCtASIBRQRAQQRBDBDFAQALIAEgAikDADcCACABQQhqIAMoAgA2AgAgAEGEhsAANgIEIAAgATYCACACQTBqJAALvAECAX8EfkEBIAJrIQYgAkECdCAAakEEayEAIAOtIQcgBK0hCCAFrSEJIAJBAWsgAU8hBEEAIQICQANAIAZBAUYNASAERQRAIAAoAgAiBSAFIANrIgUgBUEASBsgAq0gCX4iCiAIfkL/////B4MgB34gCnxCH4inIgIgAiADayICIAJBAEgbaiICIAIgA2siAiACQQBIGyECIABBBGshACAGQQFqIQYMAQsLQQAgBmsgAUGAjcAAEFIACyACC8wBAQJ/IwBBIGsiAyQAAkACQCABIAEgAmoiAUsNAEEIIABBBGooAgAiAkEBdCIEIAEgASAESRsiASABQQhNGyIEQX9zQR92IQECQCACBEAgAyACNgIYIANBATYCFCADIAAoAgA2AhAMAQsgA0EANgIUCyADIAEgBCADQRBqED4gAygCBCEBIAMoAgBFBEAgACABNgIAIABBBGogBDYCAAwCCyABQYGAgIB4Rg0BIAFFDQAgASADQQhqKAIAEMUBAAsQgAEACyADQSBqJAAL/QEBAn8jAEEgayIFJABB6OjCAEHo6MIAKAIAIgZBAWo2AgACQAJAIAZBAEgNAEG07MIALQAADQBBtOzCAEEBOgAAQbDswgBBsOzCACgCAEEBajYCACAFIAI2AhQgBUHMhsAANgIMIAVB7ITAADYCCCAFIAQ6ABggBSADNgIQQdjowgAoAgAiAkEASA0AQdjowgAgAkEBajYCAEHY6MIAQeDowgAoAgAEfyAFIAAgASgCEBEAACAFIAUpAwA3AwhB4OjCACgCACAFQQhqQeTowgAoAgAoAhQRAABB2OjCACgCAEEBawUgAgs2AgBBtOzCAEEAOgAAIAQNAQsACwALrgECBH4Cf0GAgICAeCABayEIIABBAWshCSABrSEFIAKtIQZBACEAA0AgCSAAdgRAAkAgCSAAdkEBcUUEQCADrSEEDAELIAOtIgQgCK1+IgcgBn5C/////weDIAV+IAd8Qh+IpyICIAIgAWsiAiACQQBIGyEICyAEIAR+IgQgBn5C/////weDIAV+IAR8Qh+IpyICIAIgAWsiAiACQQBIGyEDIABBAWohAAwBCwsgCAuuAQEBfwJAAkAgAQRAIAJBAEgNAQJ/IAMoAgQEQAJAIANBCGooAgAiBEUEQAwBCyADKAIAIAQgASACEKcBDAILCyABIAJFDQAaQbHowgAtAAAaIAIgARCtAQsiAwRAIAAgAzYCBCAAQQhqIAI2AgAgAEEANgIADwsgACABNgIEIABBCGogAjYCAAwCCyAAQQA2AgQgAEEIaiACNgIADAELIABBADYCBAsgAEEBNgIAC7QBAgR/AX4gAUEBIAR0QQF2IgRrIgZBACABIAZPGyEGIARBA3QhBwJAAkACQANAIAQgBUYNASABIAVGDQIgAyAFRg0DIAAgACkDACACKQMAIgkQKTcDACAFIAZHBEAgACAHaiIIIAgpAwAgCRApNwMAIAVBAWohBSACQQhqIQIgAEEIaiEADAELCyAEIAVqIAFBkLTBABBSAAsPCyABIAFB8LPBABBSAAsgAyADQYC0wQAQUgALugECAX8BfiAAIAIgAUL/////D1YiA0EFdGogASABQiCGIAMbIgFC////////P1YiAkEEdGogASABQhCGIAIbIgFC//////////8AViICQQN0aiABIAFCCIYgAhsiAUL//////////w9WIgJBAnRqIAEgAUIEhiACGyIBQv//////////P1YiAkEBdGogASABQgKGIAIbIgFCP4giBKdqQT9rNgIIIAAgBEIBfSABQgGGIAGFgyABhTcDAAu1AQEFfyMAQRBrIgMkAAJAIAIgAUEHakF4cSABa0ECdiIESQRAQQAhBEHQuMEAIQVB0LjBACEGDAELIAMgASACIAQQciADQQxqKAIAIgFBAXEhByABQQF2IQQgAygCCCIFIAFB/v///wNxQQJ0aiEGIAMoAgQhAiADKAIAIQELIAAgBjYCECAAIAU2AgggACACNgIEIAAgATYCACAAQRRqIAc2AgAgAEEMaiAENgIAIANBEGokAAucAQICfwJ+IwBBEGsiASQAIAEgAEI/hyAAhSAAQj+IfCIEQQkQQCABKQMAIQMgASgCCCECIAFBEGokACAAQoCAgICAgICAgH+DQbQIIAJBtAhqIARQIgEbIgJBH3atQgF9QgAgAyADQv8Dg0L/A3yEQgmIIAEbgyIAQgKIhCACQQAgAEI2iKdrca1CNIZ8QcgBIACnQQdxdkEBca18C6sBAQV/IwBBEGsiAyQAAkAgAiABQQFqQX5xIAFrIgRJBEBBACEEQdC4wQAhBUHQuMEAIQYMAQsgAyABIAIgBBB3IANBDGooAgAiAUEBcSEHIAFBAXYhBCADKAIIIgUgAUF+cWohBiADKAIEIQIgAygCACEBCyAAIAY2AhAgACAFNgIIIAAgAjYCBCAAIAE2AgAgAEEUaiAHNgIAIABBDGogBDYCACADQRBqJAALmgECBH8BfiABQQEgAnRBAXYiAmsiBEEAIAEgBE8bIQQgAkEDdCEFAkACQANAIAIgA0YNASABIANGDQIgAyAERwRAIAAgACkDACIHIAcQKSAAIAVqIgYpAwAiByAHECkQIjcDACAGQgA3AwAgA0EBaiEDIABBCGohAAwBCwsgAiADaiABQeCxwQAQUgALDwsgASABQdCxwQAQUgALlQEBAn8jAEGgAmsiAiQAIAIgATYCDCACQRBqIAJBDGoQZyACKAIYQTBGBEAgAkEgaiIDIAIoAhBBMBDHASACQdAAaiIBQdABEMgBGiABIANBMBAyIAEQYSAAIAFB0AEQxgEaIAJBEGoQvAEgAkEMahCjASACQaACaiQADwtBxIDAAEEjEMoBQa+AwABBBUH0gMAAEHQAC4kBAQV/QQAgBGshBwNAAkACQAJAIAVBCXYiCA0AIAMgBUYNASACKAIAIgZBAXRBgICAgHhxIAZyIgkgB0gNACAEIAlODQILIAhBAEcPCyADIANBkJXAABBSAAsgASAFRwRAIAAgBWogBjoAACAFQQFqIQUgAkEEaiECDAELCyABIAFBoJXAABBSAAuaAQEDfyAEQR9xIQZBACEEAkACQANAIAQgBnYNASABIARGDQIgAyAERwRAIAAgAi8BACAALwEAbCIFQf/fAGxB//8DcUGB4ABsIAVqIgVBEHYiByAHQf+fA2ogBUGAgISAA0kbOwEAIARBAWohBCACQQJqIQIgAEECaiEADAELCyADIANBxNzBABBSAAsPCyABIAFBtNzBABBSAAt5AQR/IwBBEGsiAiQAAkACQAJAIAFFBEBBBCEDDAELIAFB/////wFLDQEgAUECdCIEQQBIDQEgAiABQYCAgIACSUECdCIFIAQQfiACKAIAIgNFDQILIAAgATYCBCAAIAM2AgAgAkEQaiQADwsQgAEACyAFIAQQxQEAC5YBAgN/AX4jAEEgayICJAAgAUEEaiEDIAEoAgRFBEAgASgCACEBIAJBGGoiBEEANgIAIAJCATcDECACIAJBEGo2AhwgAkEcakHUhMAAIAEQFxogAkEIaiAEKAIAIgE2AgAgAiACKQMQIgU3AwAgA0EIaiABNgIAIAMgBTcCAAsgAEGEhsAANgIEIAAgAzYCACACQSBqJAALhQEBA38jAEEQayIEJABBASADdCEDAkADQCADRQ0BIARBADsBDiAAIARBDmpBAhA4IAQtAA8gBC0ADkEIdHIiBkGE4ANLDQAgAiAFSwRAIAEgBUEBdGogBkGB4ABwOwEAIANBAWshAyAFQQFqIQUMAQsLIAUgAkGgrMEAEFIACyAEQRBqJAAL4AICCn8CfgJAA0AgBUGABEYNAQNAQQAhBkEAIQcjAEEQayIEJAADQCAGQQF2RQRAIARCADcDCCAAIARBCGoiA0EIEDggBCkDCCENIARCADcDCCAAIANBCBA4IAQpAwhC////////////AIMhDiANQvj//////////wCDQtjWyu+C+83oEX1CP4inIQhBACEJQQEhA0GgwcAAIQoDQCADQRtGBEAgByANQj+IpyIDaiAJQQAgA2tzaiEHIAZBAWohBgwDBSAIIA4gCikDAH1CAFkiDEF/c3JBAWogA3EgCXIhCSAKQQhqIQogA0EBaiEDIAggDHIhCAwBCwALAAsLIARBEGokACAHIgRBgAFrQYF+SQ0AIARBAXEhAwJAIAVB/wNHBEAgAyALcyELDAELIAMgC0YNAQsLIAIgBUcEQCABIAVqIAQ6AAAgBUEBaiEFDAELCyACIAJBsL/AABBSAAsLpwEBAX8jAEEgayIGJAACQCACIANNBEAgASADTw0BIAMgASAFEFQACyACIAMgBRBVAAsgBiADNgIEIAYgAjYCACAEIAEgBigCBCAGKAIAIgJrIgFrTQRAIAAgBEECdGogACACQQJ0aiABQQJ0EMcBIAZBIGokAA8LIAZBFGpCADcCACAGQQE2AgwgBkHouMEANgIIIAZB0LjBADYCECAGQQhqIAUQgQEAC3kBA39BASACdCICIAJBAXYiAmshAyABIAIgASACSxsiBSACayEEIAAgAkEDdGohAgJAA0AgA0UNASAEBEAgAiACKQMAQoCAgICAgICAgH+FNwMAIANBAWshAyAEQQFrIQQgAkEIaiECDAELCyAFIAFBwLDBABBSAAsLegEBfyMAQUBqIgIkACACQQ42AgwgAiAANgIIIAIgAToAFyACQSRqQgI3AgAgAkE8akEgNgIAIAJBAjYCHCACQeyqwQA2AhggAkEhNgI0IAIgAkEwajYCICACIAJBF2o2AjggAiACQQhqNgIwIAJBGGpB4KvBABCBAQALewEDfyACQR9xIQRBACECAkADQCACIAR2DQEgASACRwRAIAAgAC8BACIDQbiqAWxB+P8DcUGB4ABsIANByNUAbGoiA0EQdiIFIAVB/58DaiADQYCAhIADSRs7AQAgAEECaiEAIAJBAWohAgwBCwsgASABQdS6wQAQUgALC3sBAX8gBEEfcSEFQQAhBAJAAkADQCAEIAV2DQEgASAERg0CIAMgBEcEQCAAIAApAwAgAikDAEKAgICAgICAgIB/hRAiNwMAIARBAWohBCACQQhqIQIgAEEIaiEADAELCyADIANBoLDBABBSAAsPCyABIAFBkLDBABBSAAtvAQF/IARBH3EhBUEAIQQCQAJAA0AgBCAFdg0BIAEgBEYNAiADIARHBEAgACAAKQMAIAIpAwAQIjcDACAEQQFqIQQgAkEIaiECIABBCGohAAwBCwsgAyADQYCwwQAQUgALDwsgASABQfCvwQAQUgALbQEBfyMAQTBrIgMkACADIAE2AgQgAyAANgIAIANBFGpCAjcCACADQSxqQQ82AgAgA0ECNgIMIANBsOPCADYCCCADQQ82AiQgAyADQSBqNgIQIAMgAzYCKCADIANBBGo2AiAgA0EIaiACEIEBAAttAQF/IwBBMGsiAyQAIAMgADYCACADIAE2AgQgA0EUakICNwIAIANBLGpBDzYCACADQQI2AgwgA0H05sIANgIIIANBDzYCJCADIANBIGo2AhAgAyADQQRqNgIoIAMgAzYCICADQQhqIAIQgQEAC20BAX8jAEEwayIDJAAgAyAANgIAIAMgATYCBCADQRRqQgI3AgAgA0EsakEPNgIAIANBAjYCDCADQZTnwgA2AgggA0EPNgIkIAMgA0EgajYCECADIANBBGo2AiggAyADNgIgIANBCGogAhCBAQALbQEBfyMAQTBrIgMkACADIAA2AgAgAyABNgIEIANBFGpCAjcCACADQSxqQQ82AgAgA0ECNgIMIANByOfCADYCCCADQQ82AiQgAyADQSBqNgIQIAMgA0EEajYCKCADIAM2AiAgA0EIaiACEIEBAAttAQF/IwBBMGsiAyQAIAMgATYCBCADIAA2AgAgA0EUakICNwIAIANBLGpBDzYCACADQQM2AgwgA0GY6MIANgIIIANBDzYCJCADIANBIGo2AhAgAyADNgIoIAMgA0EEajYCICADQQhqIAIQgQEAC50EAQN/IwBBIGsiAyQAIAMgABDLASIENgIAIAMgAjYCBCACIARGBEAjAEEQayIEJAAgBBAKIgU2AgggBCAFEAMiBTYCDCAFIAEgAhAEIQEgBEEIahCjASAEQQxqEKMBIARBEGokACADIAE2AgggACADQQhqIgBBABCuASAAEKMBIANBIGokAA8LIANBADYCCCMAQSBrIgEkACABIANBBGo2AgQgASADNgIAIAFBGGogA0EIaiIAQRBqKQIANwMAIAFBEGogAEEIaikCADcDACABIAApAgA3AwgjAEHwAGsiACQAIABBrIPAADYCDCAAIAE2AgggAEGsg8AANgIUIAAgAUEEajYCECAAQcDjwgA2AhggAEECNgIcAkAgAUEIaiIBKAIARQRAIABBzABqQSQ2AgAgAEHEAGpBJDYCACAAQeQAakIDNwIAIABBBDYCXCAAQYTkwgA2AlggAEElNgI8IAAgAEE4ajYCYAwBCyAAQTBqIAFBEGopAgA3AwAgAEEoaiABQQhqKQIANwMAIAAgASkCADcDICAAQeQAakIENwIAIABB1ABqQSY2AgAgAEHMAGpBJDYCACAAQcQAakEkNgIAIABBBDYCXCAAQajkwgA2AlggAEElNgI8IAAgAEE4ajYCYCAAIABBIGo2AlALIAAgAEEQajYCSCAAIABBCGo2AkAgACAAQRhqNgI4IABB2ABqQeCBwAAQgQEAC1ACAn8BfiMAQRBrIgBCgZa0uJDhwIIPNwMIIABBCGotAAAhAUEQIQADQAJAIAANACABQQF0IQEgAK0iAiACfiICQiCIpw0AIAKnIQAMAQsLC2UCAX8CfiADrSEFQQAhAwJAA0AgAiADRg0BIAEgA0cEQCAAIAStIAA1AgAgBX58IganQf////8HcTYCACAAQQRqIQAgA0EBaiEDIAZCH4inIQQMAQsLIAEgAUHwjMAAEFIACyAEC1sBAX8CQAJAA0AgBEEJdg0BIAMgBEYNAiABIARHBEAgACACIARqMAAAEEI3AwAgBEEBaiEEIABBCGohAAwBCwsgASABQYCYwAAQUgALDwsgAyADQfCXwAAQUgALZgEBfyAEQR9xIQVBACEEAkACQANAIAQgBXYNASADIARGDQIgASAERwRAIAAgAiAEajAAABBCNwMAIARBAWohBCAAQQhqIQAMAQsLIAEgAUHwlcEAEFIACw8LIAMgA0HglcEAEFIAC10BAX8jAEEgayICJAAgACgCACEAIAJBGGogAUEQaikCADcDACACQRBqIAFBCGopAgA3AwAgAiABKQIANwMIIAIgADYCBCACQQRqQdSEwAAgAkEIahAXIAJBIGokAAtNAQN/AkADQCACQQl2DQEgASACRwRAIAQgAyAAIAJqLAAAIgMgA2xqIgNyIQQgAkEBaiECDAELCyABIAFB4JfAABBSAAsgAyAEQR91cgtfAQJ/QQAgA2tBAXYhBQJAA0AgAiAERg0BIAEgBEcEQCAAIAAoAgAgBXMgA2oiA0H/////B3E2AgAgAEEEaiEAIARBAWohBCADQR92IQMMAQsLIAEgAUHQjsAAEFIACwtoACMAQTBrIgAkAEGw6MIALQAABEAgAEEUakIBNwIAIABBAjYCDCAAQZCFwAA2AgggAEEPNgIkIAAgATYCLCAAIABBIGo2AhAgACAAQSxqNgIgIABBCGpBuIXAABCBAQALIABBMGokAAtSACACRQRAQQAPCyAAIAEgAiADIAQgBRA6IAEgAkEBayICTQRAIAIgAUGQjcAAEFIAC0EAIAAgAkECdGooAgBBHnZrIAZxayIAQR91IANxIABqC2gCAn8BfiAAKQPIASIDpyICQQN2IQEgAkHHAU0EQCAAIAFBA3RqIgEgASkDAEIfIANCA4aGhTcDACAAQogBNwPIASAAIAApA4ABQoCAgICAgICAgH+FNwOAAQ8LIAFBGUHwicAAEFIAC6gBAQN/IwBBMGsiAiQAIAIgADYCDCACQRxqQgE3AgAgAkEBNgIUIAJBmOHCADYCECACQSI2AiwgAiACQShqNgIYIAIgAkEMajYCKCMAQSBrIgAkACABQRhqKAIAIQMgASgCFCAAQRhqIAJBEGoiAUEQaikCADcDACAAQRBqIAFBCGopAgA3AwAgACABKQIANwMIIAMgAEEIahAXIABBIGokACACQTBqJAALWAEBfyMAQRBrIgMkACADQYEHEAY2AgggA0EIaiABQYEHEFcgA0GBChAGNgIMIANBDGogAkGBChBXIAMoAgghASAAIAMoAgw2AgQgACABNgIAIANBEGokAAuEAwEFfyMAQSBrIggkACABRQRAQfCBwABBMhC+AQALIAhBEGoiBiABIAMgBCAFIAIoAhARBAAjAEEQayIEJAAgBigCCCIBIAYoAgRJBEAgBEEIaiEFIwBBIGsiAiQAAkAgASAGKAIEIgNNBEACfyADBEAgBigCACEHIANBAnQhCSMAQRBrIgokAAJ/IAFBAnQiA0UEQCAHIAkQqAFBBAwBCyAHIAlBBCADEKcBCyEHIApBEGokAEEEIAdFDQEaIAYgATYCBCAGIAc2AgALQYGAgIB4CyEBIAUgAzYCBCAFIAE2AgAgAkEgaiQADAELIAJBFGpCADcCACACQQE2AgwgAkHIgsAANgIIIAJBpILAADYCECACQQhqQZyDwAAQgQEACyAEKAIMIQICQAJAIAQoAggiAUGBgICAeEcEQCABRQ0BIAEgAhDFAQALDAELEIABAAsLIARBEGokACAIQQhqIgEgBigCCDYCBCABIAYoAgA2AgAgACAIKQMINwMAIAhBIGokAAtWAQF/IAJBH3EhA0EAIQICQANAIAIgA3YNASABIAJHBEAgACAAKQMAQoCAgICAgICAgH+FNwMAIABBCGohACACQQFqIQIMAQsLIAEgAUGwsMEAEFIACwtOAQF/IANBH3EhBEEAIQMCQANAIAMgBHYNASABIANHBEAgACAAKQMAIAIQKTcDACAAQQhqIQAgA0EBaiEDDAELCyABIAFB8LHBABBSAAsLqgIBCH8jAEEQayIGJAAgBkEIaiEEIAEQywEhAiMAQRBrIgUkAAJAAkACQAJAIAJFBEBBASEDDAELIAJBAE4iB0UNASMAQRBrIgMkACADQQhqIAcgAkEAEH8gAygCDCEIIAVBCGoiCSADKAIINgIAIAkgCDYCBCADQRBqJAAgBSgCCCIDRQ0CCyAEIAI2AgQgBCADNgIAIAVBEGokAAwCCxCAAQALIAcgAhDFAQALIAYoAgwhAyAGKAIIIQUjAEEQayICJAAgAhAKIgQ2AgQgAiAEEAMiBDYCDCACIAQQBTYCCCACQQxqEKMBIAJBCGoiBCABIAUQrgEgBBCjASACQQRqEKMBIAJBEGokACAAIAEQywE2AgggACADNgIEIAAgBTYCACAGQRBqJAALRwEBfyACIAAoAgAiACgCBCAAKAIIIgNrSwRAIAAgAyACEDsgACgCCCEDCyAAKAIAIANqIAEgAhDGARogACACIANqNgIIQQALPgACQCADIARNBEAgAiAESQ0BIAAgBCADazYCBCAAIAEgA0ECdGo2AgAPCyADIAQgBRBVAAsgBCACIAUQVAALPQACQCABIAJNBEAgAiAETQ0BIAIgBCAFEFQACyABIAIgBRBVAAsgACACIAFrNgIEIAAgAyABQQJ0ajYCAAs9AAJAIAEgAk0EQCACIARNDQEgAiAEIAUQVAALIAEgAiAFEFUACyAAIAIgAWs2AgQgACADIAFBA3RqNgIAC08BAn9BsejCAC0AABogASgCBCECIAEoAgAhA0EIQQQQrQEiAUUEQEEEQQgQxQEACyABIAI2AgQgASADNgIAIABBlIbAADYCBCAAIAE2AgALPwAgAiADTwRAIAAgAzYCBCAAIAE2AgAgAEEMaiACIANrNgIAIAAgASADQQN0ajYCCA8LQaCKwABBIyAEEHQACz8AIAIgA08EQCAAIAM2AgQgACABNgIAIABBDGogAiADazYCACAAIAEgA0ECdGo2AggPC0GgisAAQSMgBBB0AAs/ACACIANPBEAgACADNgIEIAAgATYCACAAQQxqIAIgA2s2AgAgACABIANBA3RqNgIIDwtBwJTBAEEjIAQQdAALPwAgAiADTwRAIAAgAzYCBCAAIAE2AgAgAEEMaiACIANrNgIAIAAgASADQQF0ajYCCA8LQZiiwQBBIyAEEHQAC0IAIAIgA08EQCAAIAM2AgQgACABNgIAIABBDGogAiADazYCACAAIAEgA0EBdGo2AggPC0HQucEAQSNBwLnBABB0AAtCACACIANPBEAgACADNgIEIAAgATYCACAAQQxqIAIgA2s2AgAgACABIANBAnRqNgIIDwtB0LnBAEEjQcC5wQAQdAALPwEBf0EBIQMCQAJAIAFBAXEEQEEAIQMMAQsgAkEBcUUNAQtBlrrBACADEE4ACyAAIAE2AgAgACACQQF2NgIEC0gBAX8jAEEgayIDJAAgA0EMakIANwIAIANBATYCBCADQejiwgA2AgggAyABNgIcIAMgADYCGCADIANBGGo2AgAgAyACEIEBAAs8AQJ/IwBBEGsiASQAIAFBCGogABB9IAEoAgwhACABKAIIQQRqEMkBIAAgACgCAEEBazYCACABQRBqJAALPAAgAiADTwRAIAAgAzYCBCAAIAE2AgAgAEEMaiACIANrNgIAIAAgASADajYCCA8LQZiiwQBBIyAEEHQACz8AIAIgA08EQCAAIAM2AgQgACABNgIAIABBDGogAiADazYCACAAIAEgA2o2AggPC0HQucEAQSNBwLnBABB0AAs5AQJ/IwBBEGsiASQAIAFBCGogABB9IAEoAgwhACABKAIIEMkBIAAgACgCAEEBazYCACABQRBqJAALPQEBfyMAQRBrIgUkACAFQQhqQQAgAyABIAIgBBBqIAUoAgwhASAAIAUoAgg2AgAgACABNgIEIAVBEGokAAs9AQF/IwBBEGsiBSQAIAVBCGpBACADIAEgAiAEEGsgBSgCDCEBIAAgBSgCCDYCACAAIAE2AgQgBUEQaiQACzkAAkACfyACQYCAxABHBEBBASAAIAIgASgCEBEBAA0BGgsgAw0BQQALDwsgACADIAQgASgCDBEFAAttAgJ/AX4jAEEQayIBJAAjAEEQayICJAAgABCrASACQQhqIAAQiAEgAigCDEEANgIAIAApAgQhAyAAEBAgASADNwMAIAJBEGokACABIAEpAwA3AwggAUEIaiIAEKMBIABBBHIQowEgAUEQaiQAC2kBA38jAEEQayICJAAgARCrASACQQhqIQMCQCABKAIAIgRBf0cEQCABIARBAWo2AgAgAyABNgIEIAMgAUEEajYCAAwBCxC/AQALIAIoAgwhASAAIAIoAgg2AgAgACABNgIEIAJBEGokAAs5AQF/IwBBEGsiAyQAIANBCGogASACQQEQfyADKAIMIQEgACADKAIINgIAIAAgATYCBCADQRBqJAALYwACQCACRQ0AIANFBEBBsejCAC0AABogAiABEK0BIQEMAQsCQAJ/IAFBCU8EQCABIAIQJAwBCyACEAsLIgFFDQAgARDPARC3AQ0AIAEgAhDIARoLCyAAIAI2AgQgACABNgIAC0ABAX8jAEEgayIAJAAgAEEUakIANwIAIABBATYCDCAAQdDiwgA2AgggAEGg4sIANgIQIABBCGpB2OLCABCBAQALugIBAn8jAEEgayICJAAgAiAANgIUIAJB7OLCADYCDCACQejiwgA2AgggAkEBOgAYIAIgATYCECMAQRBrIgAkAAJAIAJBCGoiASgCCCICBEAgASgCDCIDRQ0BIAAgAjYCCCAAIAE2AgQgACADNgIAIwBBEGsiASQAIAAoAgAiAkEMaigCACEDAkACfwJAAkAgAigCBA4CAAEDCyADDQJBACECQeyEwAAMAQsgAw0BIAIoAgAiAygCBCECIAMoAgALIQMgASACNgIEIAEgAzYCACABQaSGwAAgACgCBCIBKAIMIAAoAgggAS0AEBA8AAsgAUEANgIEIAEgAjYCACABQbiGwAAgACgCBCIBKAIMIAAoAgggAS0AEBA8AAtBpoTAAEErQeSFwAAQdAALQaaEwABBK0H0hcAAEHQAC8UCAQN/IAAoAgAhAiABLQAcQRBxQQR2RQRAIAEtABxBIHFBBXZFBEAgAiABELsBDwtBACEAIwBBgAFrIgMkACACKAIAIQIDQCAAIANqQf8AakEwQTcgAkEPcSIEQQpJGyAEajoAACAAQQFrIQAgAkEQSSACQQR2IQJFDQALIABBgAFqIgJBgQFP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tMAAEFIACyAEQTBqJAAgBUGAAkkNA0EAIQgjAEEgayIKJABBgbD//wdB/6//zQcQLSESIApBCGoiACAfICBBgAJBoLTAABBuIAooAgwhBiAKKAIIIQwgACAKKAIQIApBFGoiBSgCAEGAAkGwtMAAEG4gCigCDCECIAooAgghDiAAIAooAhAgBSgCAEGABEHAtMAAEG4gCigCDCEBIAooAgghCSAAIAooAhAgBSgCAEGABEHQtMAAEG4gCigCDCEDIAooAgghCyAAIAooAhAgBSgCAEGABEHgtMAAEG4gCigCCCINIAooAgwiBCAKKAIQIg8gBSgCACIRQQlBxdratgFBgbD//wdB/6//zQcQH0EAIQACQAJAA0AgCEGAAkYEQCAMIAYgDSAEQQhBgbD//wdB/6//zQcQpQEgDiACIA0gBEEIQYGw//8HQf+v/80HEKUBQQAhAEEAIQgCQAJAAkADQCAIQYAERgRAIAkgASANIARBCUGBsP//B0H/r//NBxClASALIAMgDSAEQQlBgbD//wdB/6//zQcQpQFBgAIhDSASrSFOQQAhAEEAIQgDQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQAJAAkACQCANRQRAIAkgASAPIBFBCUGBsP//B0H/r//NBxCmASALIAMgDyARQQlBgbD//wdB/6//zQcQpgEgCkEIaiIAIB8gIEGABEHwtMAAEG4gCigCDCEOIAooAgghDSAAIAooAhAgCkEUaiICKAIAQYAEQYC1wAAQbiAKKAIMIQQgCigCCCERIAAgCigCECITIAIoAgAiFUGABEGQtcAAEG4gAigCACEHIAooAhAhECAKKAIMIQsgCigCCCEDIA0gDiARIARBoLXAABCLASARIAQgAyALQbC1wAAQiwEgACAQIAdBgARBwLXAABBuIAooAgwhBSAKKAIIIQEgACAKKAIQIhYgAigCACIaQYAEQdC1wAAQbiAKKAIMIRIgCigCCCEGIAAgCigCECACKAIAQYAEQeC1wAAQbiACKAIAIQwgCigCECEUIAooAgwhAiAKKAIIIQ8gAyALIAEgBUEJQcXa2rYBQYGw//8HQf+v/80HEB8gDSAOIAMgC0EJQYGw//8HQf+v/80HEKUBIBEgBCADIAtBCUGBsP//B0H/r//NBxClASAhRQ0BIAJFDQIgDyAsLAAAIgBBH3VBgbD//wdxIABqIgA2AgAgDEUNAyAUIAA2AgAgIUEBayEZIAJBAWshHCAPQQRqIQAgLEEBaiElIBRB/A9qIQlBACEIA0AgCEH/A0YEQCAPIAIgAyALQQlBgbD//wdB/6//zQcQpQEgFCAMIAMgC0EJQYGw//8HQf+v/80HEKUBQQAhCEEAIQADQCAIQYB8RgRAICJFDQggDyAtLAAAIgBBH3VBgbD//wdxIABqIgA2AgAgFCAANgIAICJBAWshGSACQQFrIRwgD0EEaiEAIC1BAWohJSAUQfwPaiEJQQAhCANAIAhB/wNGBEAgDyACIAMgC0EJQYGw//8HQf+v/80HEKUBIBQgDCADIAtBCUGBsP//B0H/r//NBxClAUEAIQhBACEAA0AgCEGAfEYEQCADIAsgDyACQQlBxdratgFBgbD//wdB/6//zQcQHyABIAUgDyACQQlBgbD//wdB/6//zQcQpgEgBiASIA8gAkEJQYGw//8HQf+v/80HEKYBQQAhCCABIQAgAyECA0AgCEGABEYEQCAKQQhqIgAgFiAaEEEgACAKKAIQIApBFGooAgBBgARBsLbAABBtIAooAgwhBiAKKAIIIgIhAEEAIQgDQCAIQYAERgRAIAIgBkEJEBwgCkEIaiIAIBAgBxBBIAAgCigCECAKQRRqIgAoAgBBgAJBwLbAABBtIAAoAgAiAkGAAkkNESAKKAIIIgUgCigCDCIJIAooAhAiAEGAAkHgtsAAEIkBIAMhBiAAIQFBACEIA0AgCEGABEYEQCAAIAJBCRAcIAAhBkEAIQEgAkGAAmsiDEEAIAIgDE8bIQwCQAJAAkADQCABQYACRg0DIAEgCUYNASAFKQMAEC8hTSABIAJGDQIgBiAGKQMAIE0QKTcDACABIAxHBEAgBkGAEGoiDyAPKQMAIE0QKTcDACABQQFqIQEgBUEIaiEFIAZBCGohBgwBCwsgAUGAAmogAkHAtMEAEFIACyAJIAlBoLTBABBSAAsgAiACQbC0wQAQUgALIAAgAkEJEBhBACEIA0AgCEGABEYEQCAKQQhqIgAgEyAVQYAEQfC2wAAQbiAKKAIMIQYgCigCCCESIAAgCigCECAKQRRqIgEoAgBBgARBgLfAABBuIAooAgwhAiAKKAIIIQUgACAKKAIQIAEoAgBBgARBkLfAABBuIAooAgwhCSAKKAIIIQsgACAKKAIQIAEoAgBBgARBoLfAABBuIAEoAgAhASAKKAIQIQwgCigCDCEDIAooAgghDyAFIAIgCyAJQQlBxdratgFBgbD//wdB/6//zQcQH0EAIQBBACEIA0AgCEGABEYEQCASIAYgBSACQQlBgbD//wdB/6//zQcQpQEgDyADIAUgAkEJQYGw//8HQf+v/80HEKUBIAwgASAFIAJBCUGBsP//B0H/r//NBxClAUEAIQhBACEAA0AgCEGAfEYEQCANIA4gCyAJQQlBgbD//wdB/6//zQcQpgEgESAEIAsgCUEJQYGw//8HQf+v/80HEKYBQQAhCANAIAhBgARGDRsgCCAORg0cIA0gDSgCACIAIABBgdj//wNrQR92QQFrQYGw//8HcWs2AgAgBCAIRwRAIBEgESgCACIAIABBgdj//wNrQR92QQFrQYGw//8HcWs2AgAgCEEBaiEIIA1BBGohDSARQQRqIREMAQsLIAQgBEHAt8AAEFIACyAGIAhqRQ0bIAggDmpFDRwgAyAIakUNHSAAIA1qIgIgAigCACAAIBJqNQIAIE5+Ik1C/6//zQd+Qv////8Hg0KBsP//B34gTXxCH4inIgIgAkGBsP//B2siAiACQQBIG60iTSAAIA9qNQIAfiJPQv+v/80HfkL/////B4NCgbD//wd+IE98Qh+IpyICIAJBgbD//wdrIgIgAkEASBtrIgJBH3VBgbD//wdxIAJqNgIAIAQgCGpFDR4gASAIagRAIAAgEWoiAiACKAIAIAAgDGo1AgAgTX4iTUL/r//NB35C/////weDQoGw//8HfiBNfEIfiKciAiACQYGw//8HayICIAJBAEgbayICQR91QYGw//8HcSACajYCACAIQQFrIQggAEEEaiEADAELCyABIAFBkLjAABBSAAsgCCAhRg0dIAMgCEYNHiAAIA9qIAggLGosAAAiFEEfdUGBsP//B3EgFGo2AgAgCCAiRg0fIAEgCEcEQCAAIAxqIAggLWosAAAiFEEfdUGBsP//B3EgFGo2AgAgCEEBaiEIIABBBGohAAwBCwsgASABQdC4wAAQUgALIAIgCEYNHiAIIAtHBEAgAyAAKQMAIk9CCoZCgPj///////8/g0KAgICAgICAgMAAhEIAIE9CNIinIgFB/g9xQf0HSxsiTUIgiCBNhUEAQT0gAWsiAUE/cSIGQQV2a6yDIE2FIAFBH3GtiEHIAUEAQQAgBkE/cyIBQQV2a6wgTUIghiBNhYMgTYUgAUEfca2GIk1CIIinQf////8BcSBNpyIBcmsgAXJBH3YgTUI9iKdydkEBca18IE9CP4eFIE9CP4h8pyIBQR91QYGw//8HcSABajYCACAIQQFqIQggA0EEaiEDIABBCGohAAwBCwsgCyALQfC4wAAQUgALIAggC0YNHSACIAhHBEAgASAGNAIAEEI3AwAgCEEBaiEIIAZBBGohBiABQQhqIQEMAQsLIAIgAkGQucAAEFIACyAFIAhGDRwgBiAIRwRAIAAgATQCABBCNwMAIAhBAWohCCABQQRqIQEgAEEIaiEADAELCyAGIAZBsLnAABBSAAsgBSAIRg0bIAggC0YNHCACIAAoAgAiCSAJQYHY//8Da0EfdkEBa0GBsP//B3FrNgIAIAggEkcEQCAAIAYoAgAiCSAJQYHY//8Da0EfdkEBa0GBsP//B3FrNgIAIAhBAWohCCAAQQRqIQAgAkEEaiECIAZBBGohBgwBCwsgEiASQeC5wAAQUgALIAggDGpFDRsgBSAIakUNHCAEIAhqRQ0dIAAgAWoiCSAJKAIAIAAgFGo1AgAgTn4iTUL/r//NB35C/////weDQoGw//8HfiBNfEIfiKciCSAJQYGw//8HayIJIAlBAEgbrSJNIAAgEWo1AgB+Ik9C/6//zQd+Qv////8Hg0KBsP//B34gT3xCH4inIgkgCUGBsP//B2siCSAJQQBIG2oiCSAJQYGw//8HayIJIAlBAEgbNgIAIAggEmpFDR4gAiAIagRAIAAgBmoiCSAJKAIAIAAgD2o1AgAgTX4iTUL/r//NB35C/////weDQoGw//8HfiBNfEIfiKciCSAJQYGw//8HayIJIAlBAEgbaiIJIAlBgbD//wdrIgkgCUEASBs2AgAgCEEBayEIIABBBGohAAwBCwsgAiACQbC6wAAQUgALIAggGUYNHSAIIBxGDR4gACAIICVqLAAAIhdBH3VBgbD//wdxIBdqNgIAIAxB/wNLBEAgCUGBsP//B0EAIBdBAEobIBdrNgIAIAlBBGshCSAAQQRqIQAgCEEBaiEIDAELC0H/AyAIayAMQeC6wAAQUgALIAggDGpFDR0gCCAOakUNHiAFIAhqRQ0fIAAgAWogACAUajUCACBOfiJNQv+v/80HfkL/////B4NCgbD//wd+IE18Qh+IpyIJIAlBgbD//wdrIgkgCUEASButIk0gACANajUCAH4iT0L/r//NB35C/////weDQoGw//8HfiBPfEIfiKciCSAJQYGw//8HayIJIAlBAEgbNgIAIAIgCGpFDSAgCCASagRAIAAgBmogACAPajUCACBNfiJNQv+v/80HfkL/////B4NCgbD//wd+IE18Qh+IpyIJIAlBgbD//wdrIgkgCUEASBs2AgAgCEEBayEIIABBBGohAAwBCwsgEiASQbC7wAAQUgALIAggGUYNHyAIIBxGDSAgACAIICVqLAAAIhdBH3VBgbD//wdxIBdqNgIAIAxB/wNLBEAgCUGBsP//B0EAIBdBAEobIBdrNgIAIAlBBGshCSAAQQRqIQAgCEEBaiEIDAELC0H/AyAIayAMQeC7wAAQUgALIAEgCE0NHyAIQQFqIgUgAU8NICADIAhNDSEgAyAFTQ0iIAYgCEEBdiIFTQRAIAUgBkGwvMAAEFIACyACIAVLDSMgBSACQcC8wAAQUgALQQBBAEHwtcAAEFIAC0EAQQBBgLbAABBSAAtBAEEAQZC2wAAQUgALQQBBAEGgtsAAEFIAC0GAAiACQdC2wAAQVAALIApBIGokAAwnCyAOIA5BsLfAABBSAAsgBiAGQdC3wAAQUgALIA4gDkHgt8AAEFIACyADIANB8LfAABBSAAsgBCAEQYC4wAAQUgALICEgIUGguMAAEFIACyADIANBsLjAABBSAAsgIiAiQcC4wAAQUgALIAIgAkHguMAAEFIACyALIAtBgLnAABBSAAsgBSAFQaC5wAAQUgALIAUgBUHAucAAEFIACyALIAtB0LnAABBSAAsgDCAMQfC5wAAQUgALIAUgBUGAusAAEFIACyAEIARBkLrAABBSAAsgEiASQaC6wAAQUgALICIgIkHAusAAEFIACyACIAJB0LrAABBSAAsgDCAMQfC6wAAQUgALIA4gDkGAu8AAEFIACyAFIAVBkLvAABBSAAsgAiACQaC7wAAQUgALICEgIUHAu8AAEFIACyACIAJB0LvAABBSAAsgCCABQfC7wAAQUgALIAhBAWogAUGAvMAAEFIACyAI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QZCowAAQUgALICQgJ0GgqMAAEFIACyABIChBsKjAABBSAAsgAiAnQdCowAAQUgALIB4gHkHgqMAAEFIACyACIChB8KjAABBSAAUCQAJAIABBigRHBEAgAEEBaiEDQQJBAkECQQIgAEEMbEHI48AAaigCACIGayIBIAZsayABbCIBIAZsayABbCIBIAZsayABbCIBIAZsQf7///8HaiABbEH/////B3EhCkEAIQIgCSAGIAogBiAKEC0iERA9IRIgDyEBQQAhBQNAIAFFDQMgB0EoaiIZIBogFiAFQeCpwAAQbiAHKAI0IRwgBygCMCAZIAggFyAFQfCpwAAQbiAHKAI0IRkgBygCMCEoIBwgCSAGIAogESASEGAhHCAAIAtPDQIgAiAOaiAcNgIAICggGSAJIAYgCiARIBIQYCEZIAAgDUkEQCACICZqIBk2AgAgAiAUaiECIAAgBGohACABQQFrIQEgBSAJaiEFDAELCyAAIA1BkKrAABBSAAtBigRBigRB0KnAABBSAAsgACALQYCqwAAQUgALIA5BBGohDiAmQQRqISYgAyEADAELAAsAC0ELQQtBoKDAABBSAAsgEEELQZCgwAAQUgALDQALDAELICtBCGoiASAfICBBgARBsL3AABBuICsoAgwhAyArKAIIIQAgASArKAIQICtBFGoiDigCAEGABEHAvcAAEG4gKygCDCEGICsoAgghCSABICsoAhAgDigCAEGABEHQvcAAEG4gKygCDCECICsoAgghCiABICsoAhAgDigCAEGABEHgvcAAEG4gDigCACELICsoAhAhBCArKAIMIQUgKygCCCENIwBBEGsiDCQAEFggDCAKIAJBABByIAxBDGooAgAhESAMKQMAIU4gDCgCCCEPIAFBFGpBADYCACABQQxqIBFBAnQiETYCACABIA82AgggASBONwIAIAEgDyARajYCECAMQRBqJAAgDigCACEMICsoAhAhDiA7IDUgACADID8QRkUNACAOIAwgCSAGID8QRkUNACAEIAsgACADQQlBxdratgFBgbD//wdB/6//zQcQH0EAIRAgACEBAkACQAJAAkACQAJAAkACQAJAA0AgEEGABEYEQEEAIQFBACEQA0AgEEGABEYEQCAJIAYgBCALQQlBgbD//wdB/6//zQcQpQEgCiACIAQgC0EJQYGw//8HQf+v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EHEgBEEMaigCACEIIAQpAwAhEiAEKAIIIQcgAUEUakEANgIAIAUgCEEBdCIINgIAIAEgBzYCCCABIBI3AgAgASAHIAhqNgIQIARBEGokACAGIAogDSAMIA8gDiACIAEoAgggBSgCABANRQ0AIAsgAjoAACALQQQgESACQQJJGyAGIAogAhAnCyABQSBqJAAgA0EIaiALIAAQYyADKQMIIANBGGoQvAEgA0EUahCjATcDACADQbCNAWokACAJKAIIIAkoAgwQnQEgCUEQaiQACycAIAAgACgCBEEBcSABckECcjYCBCAAIAFqIgAgACgCBEEBcjYCBAsoACABKAIARQRAIAFBfzYCACAAIAE2AgQgACABQQRqNgIADwsQvwEACyEAIAEgA0YEQCAAIAIgAUEDdBDGARoPCyABIAMgBBBWAAshACABIANGBEAgACACIAFBAXQQxgEaDwsgASADIAQQVgALIQAgASADRgRAIAAgAiABQQJ0EMYBGg8LIAEgAyAEEFYAC1cBA38jAEEQayIBJAAjAEEQayICJAAgABCrASACQQhqIAAQiAEgAigCDEEANgIAIAAoAgQhAyAAEBAgAkEQaiQAIAEgAzYCDCABQQxqEKMBIAFBEGokAAsgAQF/AkAgACgCBCIBRQ0AIABBCGooAgBFDQAgARAQCwsiACABIANNBEAgACABNgIEIAAgAjYCAA8LIAEgAyAEEFQACyQBAX9BsejCAC0AABogAEEEEK0BIgEEQCABDwtBBCAAEMUBAAsjACACIAIoAgRBfnE2AgQgACABQQFyNgIEIAAgAWogATYCAAshACACIANJBEAgAyACIAQQVAALIAAgAzYCBCAAIAE2AgALNAAgASADQoCAgICAgICAgH+FECIhASAAIAIgBEKAgICAgICAgIB/hRAiNwMIIAAgATcDAAslACAARQRAQfCBwABBMhC+AQALIAAgAiADIAQgBSABKAIQEQoACyMAIABFBEBB8IHAAEEyEL4BAAsgACACIAMgBCABKAIQEQwACyMAIABFBEBB8IHAAEEyEL4BAAsgACACIAMgBCABKAIQER8ACyMAIABFBEBB8IHAAEEyEL4BAAsgACACIAMgBCABKAIQESEACyMAIABFBEBB8IHAAEEyEL4BAAsgACACIAMgBCABKAIQEQcACyMAIABFBEBB8IHAAEEyEL4BAAsgACACIAMgBCABKAIQESMACx4AIAAgAUEDcjYCBCAAIAFqIgAgACgCBEEBcjYCBAshACAARQRAQfCBwABBMhC+AQALIAAgAiADIAEoAhARAgALFAAgAEEEaigCAARAIAAoAgAQEAsLGwEBfyAAKAIEIgEEQCAAKAIAIAFBAnQQqAELCyABAX9BDBCPASICIAE2AgggAiAANgIEIAJBADYCACACCx8AIABFBEBB8IHAAEEyEL4BAAsgACACIAEoAhARAQALHAAgASADECIhASAAIAIgBBAiNwMIIAAgATcDAAsZAQF/IAAoAhAiAQR/IAEFIABBFGooAgALCxIAQRkgAEEBdmtBACAAQR9HGwsWACAAIAFBAXI2AgQgACABaiABNgIACxQAIAAoAgAiAEGEAU8EQCAAEAALCxAAIAAgAWpBAWtBACABa3ELFAAgACABQQEgAiADIAQgBSAGECELFAAgACABQQEgAiADIAQgBSAGEBkLpgYBBn8CfyAAIQUCQAJAAkACQAJAIAJBCU8EQCACIAMQJCIHDQFBAAwGC0EIQQgQpAEhAEEUQQgQpAEhAUEQQQgQpAEhAkEAQRBBCBCkAUECdGsiBEGAgHwgAiAAIAFqamtBd3FBA2siACAAIARLGyADTQ0DQRAgA0EEakEQQQgQpAFBBWsgA0sbQQgQpAEhAiAFEM8BIgAgABDAASIEEMwBIQECQAJAAkACQAJAAkAgABC3AUUEQCACIARNDQQgAUGY7MIAKAIARg0GIAFBlOzCACgCAEYNAyABELMBDQkgARDAASIGIARqIgggAkkNCSAIIAJrIQQgBkGAAkkNASABECwMAgsgABDAASEBIAJBgAJJDQggASACa0GBgAhJIAJBBGogAU1xDQQgASAAKAIAIgFqQRBqIQQgAkEfakGAgAQQpAEhAgwICyABQQxqKAIAIgkgAUEIaigCACIBRwRAIAEgCTYCDCAJIAE2AggMAQtBhOzCAEGE7MIAKAIAQX4gBkEDdndxNgIAC0EQQQgQpAEgBE0EQCAAIAIQzAEhASAAIAIQhwEgASAEEIcBIAEgBBAbIAANCQwHCyAAIAgQhwEgAA0IDAYLQYzswgAoAgAgBGoiBCACSQ0FAkBBEEEIEKQBIAQgAmsiAUsEQCAAIAQQhwFBACEBQQAhBAwBCyAAIAIQzAEiBCABEMwBIQYgACACEIcBIAQgARCiASAGIAYoAgRBfnE2AgQLQZTswgAgBDYCAEGM7MIAIAE2AgAgAA0HDAULQRBBCBCkASAEIAJrIgFLDQAgACACEMwBIQQgACACEIcBIAQgARCHASAEIAEQGwsgAA0FDAMLQZDswgAoAgAgBGoiBCACSw0BDAILIAcgBSABIAMgASADSRsQxgEaIAUQEAwCCyAAIAIQzAEhASAAIAIQhwEgASAEIAJrIgJBAXI2AgRBkOzCACACNgIAQZjswgAgATYCACAADQILIAMQCyIBRQ0AIAEgBSAAEMABQXhBfCAAELcBG2oiACADIAAgA0kbEMYBIAUQEAwCCyAHDAELIAAQtwEaIAAQzgELCwsAIAEEQCAAEBALCw8AIABBAXQiAEEAIABrcgsTACABKAIUIAFBGGooAgAgABAXCxMAIAAEQA8LQbyDwABBGxC+AQALFAAgACgCACABIAAoAgQoAgwRAQALGQACfyABQQlPBEAgASAAECQMAQsgABALCwsQACAAKAIAIAEoAgAgAhAICyEAIABCtqihu7bJ6pEkNwMIIABCvpy2lJylnri2fzcDAAsgACAAQuTex4WQ0IXefTcDCCAAQsH3+ejMk7LRQTcDAAshACAAQqXR5cm6386O3QA3AwggAELlq+K4peb/53g3AwALEwAgAEGUhsAANgIEIAAgATYCAAsNACAALQAEQQJxQQF2CxAAIAEgACgCACAAKAIEEBILrzACK38CfiMAQYDAAmsiESQAIBEgATYCFCARIAA2AhAgEUEYaiARQRRqEGcgEUEoaiARQRBqEGcgEUE4aiImIAIQRSARKAIgIQ0gESgCGCEAIBEoAjAhBCARKAIoIQMgEUGJAmoiHkHwBRDIARogEUH5B2oiFUGHuAIQyAEaIBFBCGohJyMAQYAEayIJJAAgCUEYaiIBQdABEMgBGiAJQegBaiICQSgQyAEaICYgAkEoEDggAUHQARDIASACQSgQMiABIAMgBBAyQXohAQJAAn8CQAJAIA0EQCAALQAAIgJB8AFxQdAARw0EIAJBD3EiBEELa0F2SUEKIARBAXZrIARBHmp0QQEgBHRqQQMgBHQgBEEETxtBgApHQc4AIAR0QQdqQYe4Aktycg0EIAlBkAJqIgIgFUGHuAJBASAEdCIVQbykwQAQ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AEEBdGouAQAiAEEIdkGAAXEgAUEIdHIgACAAQR91IgFzIAFrIgBB/wBxciAAQQd2QQFqIgB0QQFyIQEgBEEIciAAaiEEA0AgBEEISQRAIAIhAAwDCyAEQQhrIQQgA0HHBU8NBQJAIANBKWoiAEHwBUkEQCADIAZqIAEgBHY6AAAMAQsgAEHwBUGMqMEAEFIACyADQQFqIQMMAAsACwsgBSAFQfynwQAQUgALIANBAWoiAyAARwRAIAQvAQAgBEECaiEEQYAQa0H//wNxQYHgA08NAQwCCwsgBSAFQZyowQAQUgALQQAMAgsgA0EBagsLIgANAQwCC0EAQQBBrKTBABBSAAsgAEEpaiElQQAMAQtBegshASAJQeADaiIAKAIEIgIEQCAAKAIAIAJBAXQQqAELCyAnICU2AgQgJyABNgIAIAlBgARqJAAgESgCDCIBQfEFTwRAIAFB8AVBjIDAABBUAAsjAEEQayIAJAAgACABEAY2AgwgAEEMaiARQYkCaiABEFcgACgCDCEBIABBEGokACARQShqELwBIBFBGGoQvAEgEUEUahCjASARQRBqEKMBIBFBgMACaiQAQQgQjwEiACABNgIEIABBADYCACAACwoAQQAgAGsgAHELCwAgAC0ABEEDcUULDAAgACABQQNyNgIECw0AIAAoAgAgACgCBGoLDgAgACgCABoDQAwACwALxQICBH8CfiAANQIAIQYjAEEwayIDJABBJyEAAkAgBkKQzgBUBEAgBiEHDAELA0AgA0EJaiAAaiICQQRrIAYgBkKQzgCAIgdCkM4Afn2nIgRB//8DcUHkAG4iBUEBdEH25MIAai8AADsAACACQQJrIAQgBUHkAGxrQf//A3FBAXRB9uTCAGovAAA7AAAgAEEEayEAIAZC/8HXL1YgByEGDQALCyAHpyICQeMASwRAIABBAmsiACADQQlqaiAHpyICIAJB//8DcUHkAG4iAkHkAGxrQf//A3FBAXRB9uTCAGovAAA7AAALAkAgAkEKTwRAIABBAmsiACADQQlqaiACQQF0QfbkwgBqLwAAOwAADAELIABBAWsiACADQQlqaiACQTBqOgAACyABQejiwgBBACADQQlqIABqQScgAGsQFCADQTBqJAALGAEBfyAAKAIEIgEEQCAAKAIAIAEQqAELC4MOARx/IwBBwCBrIggkACAI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AAAAsEoQAC0AAACxAAAABQAAALBKEAAtAAAAsQAAAB8AAACwShAALQAAALEAAAAOAAAAsEoQAC0AAACyAAAABQAAALBKEAAtAAAAsgAAAB8AAACwShAALQAAALIAAAAOAAAAsEoQAC0AAACzAAAABQAAALBKEAAtAAAAswAAACAAAACwShAALQAAALMAAAAPAAAAsEoQAC0AAAC0AAAABQAAALBKEAAtAAAAtAAAACQAAACwShAALQAAALQAAAATAAAAsEoQAC0AAAC2AAAAGgAAALBKEAAtAAAAtwAAAB0AAACwShAALQAAALkAAAAcAAAAsEoQAC0AAAC6AAAAHAAAALBKEAAtAAAAvAAAACEAAACwShAALQAAAL8AAAAdAAAAsEoQAC0AAADAAAAAHQAAALBKEAAtAAAAwQAAABwAAACwShAALQAAAMIAAAAIAAAAsEoQAC0AAADEAAAACAAAALBKEAAtAAAAxwAAABkAAACwShAALQAAAMgAAAAZAAAAsEoQAC0AAADLAAAAHAAAALBKEAAtAAAAywEAABwAAACwShAALQAAAMwBAAAeAAAAsEoQAC0AAADNAQAAHAAAALBKEAAtAAAA2gEAABsAAACwShAALQAAANsBAAAbAAAAsEoQAC0AAADcAQAAGAAAALBKEAAtAAAA3QEAAAgAAACwShAALQAAAN8BAAAIAAAAsEoQAC0AAADkAQAACAAAALBKEAAtAAAA6QEAAAgAAACwShAALQAAAO0BAAAcAAAAsEoQAC0AAADuAQAAHgAAALBKEAAtAAAA7wEAAB4AAACwShAALQAAAPABAAAeAAAAsEoQAC0AAADxAQAAIgAAALBKEAAtAAAA8gEAAB4AAACwShAALQAAAPoBAAAFAAAAsEoQAC0AAAD6AQAADQAAALBKEAAtAAAAAAIAAAkAAACwShAALQAAAAECAAAaAAAAsEoQAC0AAAABAgAACQAAALBKEAAtAAAACAIAABwAAACwShAALQAAAAkCAAAeAAAAsEoQAC0AAAAKAgAAHgAAALBKEAAtAAAACwIAAB4AAACwShAALQAAAAwCAAAdAAAAsEoQAC0AAAANAgAAHQAAALBKEAAtAAAADwIAAAgAAACwShAALQAAABACAAAIAAAAsEoQAC0AAAAcAgAAGwAAALBKEAAtAAAAHQIAABcAAACw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IGlzIAAAfLEQACAAAACcsRAAEgAAAD09IT1tYXRjaGVzYXNzZXJ0aW9uIGZhaWxlZDogYChsZWZ0ICByaWdodClgCiAgbGVmdDogYGAsCiByaWdodDogYGAAy7EQABkAAADksRAAEgAAAPaxEAAMAAAAArIQAAEAAABgOiAAy7EQABkAAADksRAAEgAAAPaxEAAMAAAAJLIQAAMAAABsaWJyYXJ5L2NvcmUvc3JjL2ZtdC9udW0ucnMASLIQABsAAABpAAAAFAAAADB4MDAwMTAyMDMwNDA1MDYwNzA4MDkxMDExMTIxMzE0MTUxNjE3MTgxOTIwMjEyMjIzMjQyNTI2MjcyODI5MzAzMTMyMzMzNDM1MzYzNzM4Mzk0MDQxNDI0MzQ0NDU0NjQ3NDg0OTUwNTE1MjUzNTQ1NTU2NTc1ODU5NjA2MTYyNjM2NDY1NjY2NzY4Njk3MDcxNzI3Mzc0NzU3Njc3Nzg3OTgwODE4MjgzODQ4NTg2ODc4ODg5OTA5MTkyOTM5NDk1OTY5Nzk4OTlyYW5nZSBzdGFydCBpbmRleCAgb3V0IG9mIHJhbmdlIGZvciBzbGljZSBvZiBsZW5ndGggAAA+sxAAEgAAAFCzEAAiAAAAcmFuZ2UgZW5kIGluZGV4IISzEAAQAAAAULMQACIAAABzbGljZSBpbmRleCBzdGFydHMgYXQgIGJ1dCBlbmRzIGF0IACksxAAFgAAALqzEAANAAAAc291cmNlIHNsaWNlIGxlbmd0aCAoKSBkb2VzIG5vdCBtYXRjaCBkZXN0aW5hdGlvbiBzbGljZSBsZW5ndGggKNizEAAVAAAA7bMQACsAAABosRAAAQB7CXByb2R1Y2VycwIIbGFuZ3VhZ2UBBFJ1c3QADHByb2Nlc3NlZC1ieQMFcnVzdGMdMS43Mi4wICg1NjgwZmExOGYgMjAyMy0wOC0yMykGd2FscnVzBjAuMTkuMAx3YXNtLWJpbmRnZW4SMC4yLjg3IChmMGE4YWUzYjkpACwPdGFyZ2V0X2ZlYXR1cmVzAisPbXV0YWJsZS1nbG9iYWxzKwhzaWduLWV4dA==");
    }
  });

  // node_modules/rust-falcon/dist/index.js
  var require_dist4 = __commonJS({
    "node_modules/rust-falcon/dist/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { "default": mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.Signature = exports.KeyPair = exports.verify = exports.keypairFromPrivate = exports.sign = exports.falconKeypair = void 0;
      var wasm_js_1 = __importDefault(require_wasm());
      var wasm = initSync(wasm_js_1.default);
      var heap = new Array(128).fill(void 0);
      heap.push(void 0, null, true, false);
      function getObject(idx) {
        return heap[idx];
      }
      var heap_next = heap.length;
      function dropObject(idx) {
        if (idx < 132)
          return;
        heap[idx] = heap_next;
        heap_next = idx;
      }
      function takeObject(idx) {
        const ret = getObject(idx);
        dropObject(idx);
        return ret;
      }
      function addHeapObject(obj) {
        if (heap_next === heap.length)
          heap.push(heap.length + 1);
        const idx = heap_next;
        heap_next = heap[idx];
        heap[idx] = obj;
        return idx;
      }
      var cachedTextDecoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-8", { ignoreBOM: true, fatal: true }) : {
        decode: () => {
          throw Error("TextDecoder not available");
        }
      };
      if (typeof TextDecoder !== "undefined") {
        cachedTextDecoder.decode();
      }
      var cachedUint8Memory0 = null;
      function getUint8Memory0() {
        if (cachedUint8Memory0 === null || cachedUint8Memory0.byteLength === 0) {
          cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachedUint8Memory0;
      }
      function getStringFromWasm0(ptr, len) {
        ptr = ptr >>> 0;
        return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
      }
      function falconKeypair(_seed) {
        const ret = wasm.falconKeypair(addHeapObject(_seed));
        return KeyPair.__wrap(ret);
      }
      exports.falconKeypair = falconKeypair;
      function sign(_message, _secretKey, _seed) {
        const ret = wasm.sign(addHeapObject(_message), addHeapObject(_secretKey), addHeapObject(_seed));
        return Signature.__wrap(ret);
      }
      exports.sign = sign;
      function keypairFromPrivate(_secretKey) {
        const ret = wasm.keypairFromPrivate(addHeapObject(_secretKey));
        return KeyPair.__wrap(ret);
      }
      exports.keypairFromPrivate = keypairFromPrivate;
      function verify(_signature, _message, _publicKey) {
        const ret = wasm.verify(addHeapObject(_signature), addHeapObject(_message), addHeapObject(_publicKey));
        return takeObject(ret);
      }
      exports.verify = verify;
      var KeyPair = class _KeyPair {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(_KeyPair.prototype);
          obj.__wbg_ptr = ptr;
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_keypair_free(ptr);
        }
        get public() {
          const ret = wasm.keypair_public(this.__wbg_ptr);
          return takeObject(ret);
        }
        get secret() {
          const ret = wasm.keypair_secret(this.__wbg_ptr);
          return takeObject(ret);
        }
      };
      exports.KeyPair = KeyPair;
      var Signature = class _Signature {
        static __wrap(ptr) {
          ptr = ptr >>> 0;
          const obj = Object.create(_Signature.prototype);
          obj.__wbg_ptr = ptr;
          return obj;
        }
        __destroy_into_raw() {
          const ptr = this.__wbg_ptr;
          this.__wbg_ptr = 0;
          return ptr;
        }
        free() {
          const ptr = this.__destroy_into_raw();
          wasm.__wbg_signature_free(ptr);
        }
        get sign() {
          const ret = wasm.keypair_public(this.__wbg_ptr);
          return takeObject(ret);
        }
      };
      exports.Signature = Signature;
      function __wbg_get_imports() {
        const imports = {};
        imports.wbg = {};
        imports.wbg.__wbindgen_object_drop_ref = function(arg0) {
          takeObject(arg0);
        };
        imports.wbg.__wbindgen_object_clone_ref = function(arg0) {
          const ret = getObject(arg0);
          return addHeapObject(ret);
        };
        imports.wbg.__wbg_log_233cc96097d5ec7d = function(arg0, arg1) {
          console.log(getStringFromWasm0(arg0, arg1));
        };
        imports.wbg.__wbg_buffer_085ec1f694018c4f = function(arg0) {
          const ret = getObject(arg0).buffer;
          return addHeapObject(ret);
        };
        imports.wbg.__wbg_newwithbyteoffsetandlength_6da8e527659b86aa = function(arg0, arg1, arg2) {
          const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);
          return addHeapObject(ret);
        };
        imports.wbg.__wbg_new_8125e318e6245eed = function(arg0) {
          const ret = new Uint8Array(getObject(arg0));
          return addHeapObject(ret);
        };
        imports.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function(arg0) {
          const ret = new Uint8Array(arg0 >>> 0);
          return addHeapObject(ret);
        };
        imports.wbg.__wbg_length_72e2208bbc0efc61 = function(arg0) {
          const ret = getObject(arg0).length;
          return ret;
        };
        imports.wbg.__wbg_set_5cf90238115182c3 = function(arg0, arg1, arg2) {
          getObject(arg0).set(getObject(arg1), arg2 >>> 0);
        };
        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
          throw new Error(getStringFromWasm0(arg0, arg1));
        };
        imports.wbg.__wbindgen_memory = function() {
          const ret = wasm.memory;
          return addHeapObject(ret);
        };
        return imports;
      }
      function __wbg_init_memory(imports, maybe_memory) {
      }
      function initSync(module2) {
        const imports = __wbg_get_imports();
        __wbg_init_memory(imports);
        if (!(module2 instanceof WebAssembly.Module)) {
          module2 = new WebAssembly.Module(module2);
        }
        const instance = new WebAssembly.Instance(module2, imports);
        return instance.exports;
      }
    }
  });

  // node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/utils.js
  var require_utils4 = __commonJS({
    "node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/utils.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encodeWIF = exports.decodeWIF = void 0;
      var bs58check_1 = __importDefault(require_bs58check());
      var decodeWIF = (wif, version) => {
        const buffer = bs58check_1.default.decode(wif);
        if (version !== void 0 && buffer[0] !== version)
          throw new Error("Invalid network version");
        if (buffer.length === 33) {
          return {
            version: buffer[0],
            privateKey: buffer.slice(1, 33),
            compressed: false
          };
        }
        if (buffer.length !== 2180)
          throw new Error("Invalid WIF length");
        return {
          version: buffer[0],
          privkey: buffer.slice(1, 1282),
          pubkey: buffer.slice(1283, 2181),
          compressed: true
        };
      };
      exports.decodeWIF = decodeWIF;
      var encodeWIF = (publicKey, privateKey, version) => {
        const wifArray = Buffer.from(
          concat([privateKey, new Uint8Array([1]), publicKey])
        );
        var payload = Buffer.allocUnsafe(wifArray.length + 1);
        payload.writeUInt8(version, 0);
        wifArray.copy(payload, 1);
        return bs58check_1.default.encode(payload);
      };
      exports.encodeWIF = encodeWIF;
      function concat(arrays) {
        let totalLength = arrays.reduce((acc, value) => acc + value.length, 0);
        if (!arrays.length)
          return null;
        let result = new Uint8Array(totalLength);
        let length = 0;
        for (let array of arrays) {
          result.set(array, length);
          length += array.length;
        }
        return result;
      }
    }
  });

  // node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/falconpair.js
  var require_falconpair = __commonJS({
    "node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/falconpair.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function() {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.falconPairFactory = void 0;
      var networks = __importStar(require_networks2());
      var rust_falcon_1 = require_dist4();
      var utils_1 = require_utils4();
      var FalconPair = class {
        constructor(__D, __Q, options) {
          this.__D = __D;
          this.__Q = __Q;
          if (options === void 0)
            options = {};
          this.network = options.network ?? networks.mainnet;
        }
        get privateKey() {
          return this.__D;
        }
        get publicKey() {
          return this.__Q;
        }
        toWIF2() {
          throw new Error("Inactive currently");
        }
        toWIF() {
          return (0, utils_1.encodeWIF)(this.__Q, this.__D, this.network.wif);
        }
        sign(hash, seed) {
          if (!this.__D)
            throw new Error("Missing private key");
          return (0, rust_falcon_1.sign)(hash, this.__D, seed).sign;
        }
        verify(hash, signature) {
          if (!this.__Q)
            throw new Error("Missing public key");
          return (0, rust_falcon_1.verify)(signature, hash, this.__Q);
        }
      };
      function falconPairFactory2() {
        function fromPrivateKey(privateKey, options) {
          const importedKeyPair = (0, rust_falcon_1.keypairFromPrivate)(
            Uint8Array.from(privateKey)
          );
          return new FalconPair(privateKey, importedKeyPair.public, options);
        }
        function fromWIF2(wifString, network) {
          wifString + network?.wif;
          throw new Error("Inactive currently");
        }
        function fromWIF(wifString, network) {
          const decoded = (0, utils_1.decodeWIF)(wifString);
          const { version } = decoded;
          network = network || networks.mainnet;
          if (version !== network.wif)
            throw new Error("Invalid network version");
          return new FalconPair(decoded.privkey, decoded.pubkey, { network });
        }
        function makeRandom(seed, options) {
          const { public: _public, secret: _secret } = (0, rust_falcon_1.falconKeypair)(seed);
          return new FalconPair(_secret, _public, options);
        }
        return {
          makeRandom,
          fromPrivateKey,
          fromWIF2,
          fromWIF
        };
      }
      exports.falconPairFactory = falconPairFactory2;
    }
  });

  // node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/types.js
  var require_types3 = __commonJS({
    "node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/index.js
  var require_src3 = __commonJS({
    "node_modules/test-test-test-hd-wallet/node_modules/tidepair/src/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function() {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_falconpair(), exports);
      __exportStar(require_types3(), exports);
      __exportStar(require_networks2(), exports);
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/private.js
  var require_private = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/private.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      var sha512_1 = require_sha512();
      var pbkdf2_1 = require_pbkdf2();
      var utils_1 = require_utils2();
      var consensus_1 = require_consensus();
      var policy_1 = require_policy();
      var common_1 = require_common();
      var types_1 = require_types();
      var mnemonic_1 = __importDefault(require_mnemonic());
      var util_1 = require_util();
      var tidecoinjs_lib_1 = require_src2();
      var tidepair_1 = require_src3();
      var rust_falcon_1 = require_dist4();
      var falconPair2 = (0, tidepair_1.falconPairFactory)();
      var HDPrivateKey2 = class _HDPrivateKey {
        constructor(options) {
          this.type = "private";
          this.childIndex = 0;
          this.chainCode = consensus_1.ZERO_FALCON_HASH;
          this.privateKey = common_1.ZERO_PRIVKEY;
          this.publicKey = common_1.ZERO_KEY;
          if (options)
            this.fromOptions(options);
        }
        async verifyMessage(address, text, sig) {
          const account = this.findAccount(address);
          return account.pair?.verify(
            (0, utils_1.hexToBytes)(text),
            (0, utils_1.hexToBytes)(sig)
          );
        }
        async getAccounts() {
          let current = this;
          const pubKeys = [];
          while (current) {
            pubKeys.push(current.publicKey);
            current = current.child;
          }
          return pubKeys.map(
            (i) => tidecoinjs_lib_1.payments.p2wpkh({ pubkey: Buffer.from(i) }).address
          );
        }
        async addAccounts(number = 1) {
          let current = this;
          let resultPk = [];
          for (let i = 0; i < number; i++) {
            current = current.derive();
            resultPk.push(
              tidecoinjs_lib_1.payments.p2wpkh({
                pubkey: Buffer.from(current.publicKey)
              }).address
            );
          }
          return resultPk;
        }
        findAccount(account) {
          let current = this;
          while (current) {
            if (tidecoinjs_lib_1.payments.p2wpkh({
              pubkey: Buffer.from(current.publicKey)
            }).address === account) {
              return current;
            }
            current = current.child;
          }
          throw new Error(`Account with address ${account} not founded`);
        }
        async exportAccount(address, options) {
          const account = this.findAccount(address);
          const pair = falconPair2.fromPrivateKey(account.privateKey, options);
          return pair.toWIF();
        }
        async signTransaction(psbt, inputs) {
          const cache = /* @__PURE__ */ new Map();
          let account;
          inputs.map((i) => {
            if (cache.has(i.publicKey)) {
              account = cache.get(i.publicKey);
            } else {
              const address = tidecoinjs_lib_1.payments.p2wpkh({
                pubkey: Buffer.from(i.publicKey, "hex")
              }).address;
              account = this.findAccount(address);
            }
            cache.set(i.publicKey, account);
            psbt.signInput(i.index, account.pair, i.sighashTypes);
          });
        }
        async signMessage(address, message, seed) {
          const acc = this.findAccount(address);
          return (0, utils_1.bytesToHex)(
            acc.pair?.sign(new TextEncoder().encode(message), seed)
          );
        }
        async signPersonalMessage(address, message, seed) {
          return await this.signMessage(address, message, seed);
        }
        fromOptions(options) {
          if (options.childIndex)
            this.childIndex = options.childIndex;
          if (options.chainCode)
            this.chainCode = options.chainCode;
          if (options.privateKey) {
            this.privateKey = options.privateKey;
            this.pair = falconPair2.fromPrivateKey(options.privateKey);
            this.publicKey = this.pair.publicKey;
          }
          return this;
        }
        static fromOptions(options) {
          return new this().fromOptions(options);
        }
        getChild() {
          if (!this.child)
            return void 0;
          return new Proxy(this.child, {
            get: (target, name) => {
              if (!types_1.DISALLOWED_CHILD_METHODS.includes(name))
                return target[name];
              throw new Error(
                `Method "${name}" allowed only in the root HDWallet instance`
              );
            }
          });
        }
        derive() {
          const index = this.childIndex + 1;
          const bw = (0, utils_1.concatBytes)(
            this.privateKey,
            new Uint8Array([index])
          );
          const hash = (0, pbkdf2_1.pbkdf2)(sha512_1.sha512, bw, this.chainCode, {
            dkLen: 96,
            c: 10
          });
          const left = hash.subarray(0, 48);
          const right = hash.subarray(48, 96);
          const keys = (0, rust_falcon_1.falconKeypair)(left);
          const child = new _HDPrivateKey();
          child.childIndex = index;
          child.chainCode = right;
          child.privateKey = keys.secret;
          child.publicKey = (0, utils_1.concatBytes)(
            new Uint8Array([7]),
            keys.public
          );
          child.pair = falconPair2.fromPrivateKey(keys.secret);
          this.child = child;
          return child;
        }
        fromSeed(seed) {
          if (seed.length * 8 < common_1.MIN_ENTROPY || seed.length * 8 > common_1.MAX_ENTROPY) {
            throw new Error("Entropy not in the range.");
          }
          this.seed = seed;
          const hash = (0, pbkdf2_1.pbkdf2)(
            sha512_1.sha512,
            seed,
            common_1.SEED_SALT,
            {
              dkLen: 96,
              c: 10
            }
          );
          const left = hash.subarray(0, 48);
          this.chainCode = hash.subarray(48, 96);
          const keys = (0, rust_falcon_1.falconKeypair)(left);
          this.privateKey = keys.secret;
          this.publicKey = (0, utils_1.concatBytes)(
            new Uint8Array([7]),
            keys.public
          );
          return this;
        }
        static fromSeed(seed) {
          return new this().fromSeed(seed);
        }
        fromMnemonic(mnemonic, passphrase) {
          return this.fromSeed(mnemonic.toSeed(passphrase));
        }
        static fromMnemonic(mnemonic, passphrase) {
          return new this().fromMnemonic(mnemonic, passphrase);
        }
        fromPhrase(phrase) {
          const mnemonic = mnemonic_1.default.fromPhrase(phrase);
          this.fromMnemonic(mnemonic);
          return this;
        }
        static fromPhrase(phrase) {
          return new this().fromPhrase(phrase);
        }
        fromPrivateKey(key, entropy) {
          (0, common_1.assert)(key.length === policy_1.PRIVKEY_SIZE);
          (0, common_1.assert)(entropy.length === 48);
          this.childIndex = 0;
          this.chainCode = entropy;
          this.privateKey = key;
          this.publicKey = (0, utils_1.concatBytes)(
            new Uint8Array([7]),
            falconPair2.fromPrivateKey(key).publicKey
          );
          return this;
        }
        static fromPrivateKey(key, entropy) {
          return new this().fromPrivateKey(key, entropy);
        }
        derivePath(path) {
          const indexes = (0, util_1.parsePath)(path);
          let key = this;
          for (const index of indexes)
            key = key.derive(index);
          return key;
        }
        static generate(seed, entropy) {
          if (seed.length !== 48 || entropy.length !== 48)
            throw new Error(
              "Generate HDPrivateKey: Seed and entropy should have leghth 48"
            );
          const keys = (0, rust_falcon_1.falconKeypair)(seed);
          return _HDPrivateKey.fromPrivateKey(keys.secret, entropy);
        }
        getChildCount() {
          let count = 0;
          let current = this;
          while (current.child) {
            count += 1;
            current = current.child;
          }
          return count;
        }
        async serialize() {
          if (this.childIndex !== 0)
            throw new Error("You should use only root wallet to serializing");
          return {
            numberOfAccounts: this.getChildCount(),
            seed: (0, utils_1.bytesToHex)(this.seed)
          };
        }
        static deserialize(opts) {
          if (opts.numberOfAccounts === void 0 || !opts.seed) {
            throw new Error(
              "HDPrivateKey: Deserialize method cannot be called with an opts value for numberOfAccounts and no seed"
            );
          }
          const root = _HDPrivateKey.fromSeed((0, utils_1.hexToBytes)(opts.seed));
          if (!opts.numberOfAccounts)
            return root;
          let current = root;
          for (let i = 1; i <= opts.numberOfAccounts; i++) {
            current = current.derive();
          }
          return root;
        }
        async deserialize(state) {
          const deserialized = _HDPrivateKey.deserialize(state);
          this.fromOptions(deserialized);
        }
      };
      exports.default = HDPrivateKey2;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/simple.js
  var require_simple = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/simple.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      var tidecoinjs_lib_1 = require_src2();
      var common_1 = require_common();
      var tidepair_1 = require_src3();
      var utils_1 = require_utils2();
      var tidePair = (0, tidepair_1.falconPairFactory)();
      var HDSimpleKey = class {
        constructor(privateKey) {
          this.type = "Simple";
          this.privateKey = common_1.ZERO_PRIVKEY;
          this.publicKey = common_1.ZERO_KEY;
          this.privateKey = privateKey;
          this.pair = tidePair.fromPrivateKey(privateKey);
          this.publicKey = this.pair.publicKey;
        }
        async verifyMessage(_address, text, sig) {
          return this.pair?.verify(
            (0, utils_1.hexToBytes)(text),
            (0, utils_1.hexToBytes)(sig)
          );
        }
        async getAccounts() {
          return [
            tidecoinjs_lib_1.payments.p2wpkh({ pubkey: Buffer.from(this.publicKey) }).address
          ];
        }
        async addAccounts(_number) {
          return [];
        }
        async serialize() {
          return {
            privateKey: (0, utils_1.bytesToHex)(this.privateKey)
          };
        }
        async deserialize(_state) {
          await this.init();
        }
        static async deserialize(state) {
          return await new this(
            (0, utils_1.hexToBytes)(state.privateKey)
          ).deserialize(state);
        }
        async init() {
          return;
        }
        async removeAccount(_address) {
          return;
        }
        async exportAccount(_address, _options) {
          return this.pair.toWIF();
        }
        async signTransaction(psbt, inputs) {
          inputs.forEach((i) => {
            psbt.signInput(i.index, this.pair, i.sighashTypes);
          });
        }
        async signMessage(_address, message, seed) {
          const encoded = new TextEncoder().encode(message);
          return (0, utils_1.bytesToHex)(this.pair?.sign(encoded, seed));
        }
        async signPersonalMessage(address, message, seed) {
          return await this.signMessage(address, message, seed);
        }
      };
      exports.default = HDSimpleKey;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/hd/index.js
  var require_hd = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/hd/index.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.SimpleKey = exports.HDPrivateKey = exports.from = exports.fromMnemonic = exports.fromSeed = exports.generate = void 0;
      var private_1 = __importDefault(require_private());
      exports.HDPrivateKey = private_1.default;
      var simple_1 = __importDefault(require_simple());
      exports.SimpleKey = simple_1.default;
      function generate(seed, entropy) {
        return private_1.default.generate(seed, entropy);
      }
      exports.generate = generate;
      function fromSeed(options) {
        return private_1.default.fromSeed(options);
      }
      exports.fromSeed = fromSeed;
      function fromMnemonic2(mnemonic) {
        return private_1.default.fromMnemonic(mnemonic);
      }
      exports.fromMnemonic = fromMnemonic2;
      function from(options) {
        if (options instanceof private_1.default)
          return options;
        if (options && typeof options === "object")
          return fromMnemonic2(options);
        throw new Error("Cannot create HD key from bad options.");
      }
      exports.from = from;
    }
  });

  // node_modules/test-test-test-hd-wallet/src/index.js
  var require_src4 = __commonJS({
    "node_modules/test-test-test-hd-wallet/src/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function() {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_hd(), exports);
    }
  });

  // node_modules/tidepair/src/networks.js
  var require_networks3 = __commonJS({
    "node_modules/tidepair/src/networks.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.mainnet = void 0;
      exports.mainnet = {
        messagePrefix: "Tidecoin Signed Message:\n",
        bech32: "tbc",
        bip32: {
          public: 124300510,
          private: 124321457
        },
        pubKeyHash: 33,
        scriptHash: 65,
        wif: 176
      };
    }
  });

  // node_modules/tidepair/src/utils.js
  var require_utils5 = __commonJS({
    "node_modules/tidepair/src/utils.js"(exports) {
      "use strict";
      var __importDefault = exports && exports.__importDefault || function(mod) {
        return mod && mod.__esModule ? mod : { default: mod };
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.encodeWIF = exports.decodeWIF = void 0;
      var bs58check_1 = __importDefault(require_bs58check());
      var decodeWIF = (wif, version) => {
        const buffer = Buffer.from(bs58check_1.default.decode(wif));
        if (version !== void 0 && buffer[0] !== version)
          throw new Error("Invalid network version");
        if (buffer.length === 33) {
          return {
            version: buffer[0],
            privateKey: buffer.slice(1, 33),
            compressed: false
          };
        }
        if (buffer.length !== 2180)
          throw new Error("Invalid WIF length");
        return {
          version: buffer[0],
          privkey: buffer.slice(1, 1282),
          pubkey: buffer.slice(1283, 2181),
          compressed: true
        };
      };
      exports.decodeWIF = decodeWIF;
      var encodeWIF = (publicKey, privateKey, version) => {
        const wifArray = Buffer.from(
          concat([privateKey, new Uint8Array([1]), publicKey])
        );
        var payload = Buffer.allocUnsafe(wifArray.length + 1);
        payload.writeUInt8(version, 0);
        wifArray.copy(payload, 1);
        return bs58check_1.default.encode(payload);
      };
      exports.encodeWIF = encodeWIF;
      function concat(arrays) {
        let totalLength = arrays.reduce((acc, value) => acc + value.length, 0);
        if (!arrays.length)
          return null;
        let result = new Uint8Array(totalLength);
        let length = 0;
        for (let array of arrays) {
          result.set(array, length);
          length += array.length;
        }
        return result;
      }
    }
  });

  // node_modules/tidepair/src/falconpair.js
  var require_falconpair2 = __commonJS({
    "node_modules/tidepair/src/falconpair.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function() {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
        Object.defineProperty(o, "default", { enumerable: true, value: v });
      } : function(o, v) {
        o["default"] = v;
      });
      var __importStar = exports && exports.__importStar || function(mod) {
        if (mod && mod.__esModule)
          return mod;
        var result = {};
        if (mod != null) {
          for (var k in mod)
            if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
              __createBinding(result, mod, k);
        }
        __setModuleDefault(result, mod);
        return result;
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      exports.falconPairFactory = void 0;
      var networks = __importStar(require_networks3());
      var rust_falcon_1 = require_dist4();
      var utils_1 = require_utils5();
      var FalconPair = class {
        constructor(__D, __Q, options) {
          this.__D = __D;
          this.__Q = __Q;
          if (options === void 0)
            options = {};
          this.network = options.network ?? networks.mainnet;
        }
        get privateKey() {
          return this.__D;
        }
        get publicKey() {
          return this.__Q;
        }
        toWIF2() {
          throw new Error("Inactive currently");
        }
        toWIF() {
          return (0, utils_1.encodeWIF)(this.__Q, this.__D, this.network.wif);
        }
        sign(hash, seed) {
          if (!this.__D)
            throw new Error("Missing private key");
          return Buffer.from((0, rust_falcon_1.sign)(hash, this.__D, seed).sign);
        }
        verify(hash, signature) {
          if (!this.__Q)
            throw new Error("Missing public key");
          return (0, rust_falcon_1.verify)(signature, hash, this.__Q);
        }
      };
      function falconPairFactory2() {
        function fromPrivateKey(privateKey, options) {
          const importedKeyPair = (0, rust_falcon_1.keypairFromPrivate)(privateKey);
          return new FalconPair(
            privateKey,
            Buffer.from(importedKeyPair.public),
            options
          );
        }
        function fromWIF2(wifString, network) {
          wifString + network?.wif;
          throw new Error("Inactive currently");
        }
        function fromWIF(wifString, network) {
          const decoded = (0, utils_1.decodeWIF)(wifString);
          const { version } = decoded;
          network = network || networks.mainnet;
          if (version !== network.wif)
            throw new Error("Invalid network version");
          return new FalconPair(decoded.privkey, decoded.pubkey, { network });
        }
        function makeRandom(seed, options) {
          const { public: _public, secret: _secret } = (0, rust_falcon_1.falconKeypair)(seed);
          return new FalconPair(Buffer.from(_secret), Buffer.from(_public), options);
        }
        return {
          makeRandom,
          fromPrivateKey,
          fromWIF2,
          fromWIF
        };
      }
      exports.falconPairFactory = falconPairFactory2;
    }
  });

  // node_modules/tidepair/src/types.js
  var require_types4 = __commonJS({
    "node_modules/tidepair/src/types.js"(exports) {
      "use strict";
      Object.defineProperty(exports, "__esModule", { value: true });
    }
  });

  // node_modules/tidepair/src/index.js
  var require_src5 = __commonJS({
    "node_modules/tidepair/src/index.js"(exports) {
      "use strict";
      var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        var desc = Object.getOwnPropertyDescriptor(m, k);
        if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
          desc = {
            enumerable: true,
            get: function() {
              return m[k];
            }
          };
        }
        Object.defineProperty(o, k2, desc);
      } : function(o, m, k, k2) {
        if (k2 === void 0)
          k2 = k;
        o[k2] = m[k];
      });
      var __exportStar = exports && exports.__exportStar || function(m, exports2) {
        for (var p in m)
          if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p))
            __createBinding(exports2, m, p);
      };
      Object.defineProperty(exports, "__esModule", { value: true });
      __exportStar(require_falconpair2(), exports);
      __exportStar(require_types4(), exports);
      __exportStar(require_networks3(), exports);
    }
  });

  // src/shared/constant/index.ts
  var CHAINS = {
    ["BTC" /* BTC */]: {
      name: "BTC",
      enum: "BTC" /* BTC */,
      logo: "",
      network: "mainnet"
    }
  };
  var KEYRING_TYPE = {
    HdKeyring: "HD Key Tree",
    SimpleKeyring: "Simple Key Pair",
    WatchAddressKeyring: "Watch Address",
    WalletConnectKeyring: "WalletConnect",
    Empty: "Empty"
  };
  var KEYRING_TYPE_TEXT = {
    [KEYRING_TYPE.HdKeyring]: "Created by Mnemonic",
    [KEYRING_TYPE.SimpleKeyring]: "Imported by Private Key",
    [KEYRING_TYPE.WatchAddressKeyring]: "Watch Mode"
  };
  var BRAND_ALIAN_TYPE_TEXT = {
    [KEYRING_TYPE.HdKeyring]: "Account",
    [KEYRING_TYPE.SimpleKeyring]: "Private Key",
    [KEYRING_TYPE.WatchAddressKeyring]: "Watch"
  };
  var IS_CHROME = /Chrome\//i.test(navigator.userAgent);
  var IS_FIREFOX = /Firefox\//i.test(navigator.userAgent);
  var IS_LINUX = /linux/i.test(navigator.userAgent);
  var chromeVersion = null;
  if (IS_CHROME) {
    const matches = navigator.userAgent.match(/Chrome\/(\d+[^.\s])/);
    if (matches && matches.length >= 2) {
      chromeVersion = Number(matches[1]);
    }
  }
  var IS_AFTER_CHROME91 = IS_CHROME ? chromeVersion && chromeVersion >= 91 : false;
  var IS_WINDOWS = /windows/i.test(navigator.userAgent);
  var ADDRESS_TYPES = [
    {
      value: 0 /* P2PKH */,
      label: "P2PKH",
      name: "Legacy (P2PKH)",
      hdPath: "m/44'/0'/0'/0",
      displayIndex: 3,
      isUnisatLegacy: false
    },
    {
      value: 1 /* P2WPKH */,
      label: "P2WPKH",
      name: "Native Segwit (P2WPKH)",
      hdPath: "m/84'/0'/0'/0",
      displayIndex: 0,
      isUnisatLegacy: false
    },
    {
      value: 2 /* P2TR */,
      label: "P2TR",
      name: "Taproot (P2TR)",
      hdPath: "m/86'/0'/0'/0",
      displayIndex: 2,
      isUnisatLegacy: false
    },
    {
      value: 3 /* P2SH_P2WPKH */,
      label: "P2SH-P2WPKH",
      name: "Nested Segwit (P2SH-P2WPKH)",
      hdPath: "m/49'/0'/0'/0",
      displayIndex: 1,
      isUnisatLegacy: false
    },
    {
      value: 4 /* M44_P2WPKH */,
      label: "P2WPKH",
      name: "Native SegWit (P2WPKH)",
      hdPath: "m/44'/0'/0'/0",
      displayIndex: 4,
      isUnisatLegacy: true
    },
    {
      value: 5 /* M44_P2TR */,
      label: "P2TR",
      name: "Taproot (P2TR)",
      hdPath: "m/44'/0'/0'/0",
      displayIndex: 5,
      isUnisatLegacy: true
    }
  ];
  var RESTORE_WALLETS = [
    {
      value: 0 /* UNISAT */,
      name: "UniSat Wallet",
      addressTypes: [
        1 /* P2WPKH */,
        3 /* P2SH_P2WPKH */,
        2 /* P2TR */,
        0 /* P2PKH */,
        4 /* M44_P2WPKH */,
        5 /* M44_P2TR */
      ]
    },
    {
      value: 1 /* SPARROW */,
      name: "Sparrow Wallet",
      addressTypes: [0 /* P2PKH */, 1 /* P2WPKH */, 3 /* P2SH_P2WPKH */, 2 /* P2TR */]
    },
    {
      value: 2 /* XVERSE */,
      name: "Xverse Wallet",
      addressTypes: [3 /* P2SH_P2WPKH */, 2 /* P2TR */]
    },
    {
      value: 3 /* OTHERS */,
      name: "Other Wallet",
      addressTypes: [
        0 /* P2PKH */,
        1 /* P2WPKH */,
        3 /* P2SH_P2WPKH */,
        2 /* P2TR */,
        4 /* M44_P2WPKH */,
        5 /* M44_P2TR */
      ]
    }
  ];
  var NETWORK_TYPES = [
    { value: 0 /* MAINNET */, label: "LIVENET", name: "livenet", validNames: [0, "livenet", "mainnet"] },
    { value: 1 /* TESTNET */, label: "TESTNET", name: "testnet", validNames: ["testnet"] }
  ];
  var EVENTS = {
    broadcastToUI: "broadcastToUI",
    broadcastToBackground: "broadcastToBackground",
    SIGN_FINISHED: "SIGN_FINISHED",
    WALLETCONNECT: {
      STATUS_CHANGED: "WALLETCONNECT_STATUS_CHANGED",
      INIT: "WALLETCONNECT_INIT",
      INITED: "WALLETCONNECT_INITED"
    }
  };
  var SORT_WEIGHT = {
    [KEYRING_TYPE.HdKeyring]: 1,
    [KEYRING_TYPE.SimpleKeyring]: 2,
    [KEYRING_TYPE.WalletConnectKeyring]: 4,
    [KEYRING_TYPE.WatchAddressKeyring]: 5
  };
  var TDC_API_URL = "https://tdc.cash/api/";
  var TDC_MAINNET_URL = TDC_API_URL + "TDC/mainnet/";

  // src/shared/eventBus.ts
  var EventBus = class {
    events = {};
    emit = (type, params) => {
      const listeners = this.events[type];
      if (listeners) {
        listeners.forEach((fn) => {
          fn(params);
        });
      }
    };
    once = (type, fn) => {
      const listeners = this.events[type];
      const func = (...params) => {
        fn(...params);
        this.events[type] = this.events[type].filter((item) => item !== func);
      };
      if (listeners) {
        this.events[type].push(func);
      } else {
        this.events[type] = [func];
      }
    };
    addEventListener = (type, fn) => {
      const listeners = this.events[type];
      if (listeners) {
        this.events[type].push(fn);
      } else {
        this.events[type] = [fn];
      }
    };
    removeEventListener = (type, fn) => {
      const listeners = this.events[type];
      if (listeners) {
        this.events[type] = this.events[type].filter((item) => item !== fn);
      }
    };
    removeAllEventListeners = (type) => {
      this.events[type] = [];
    };
  };
  var eventBus_default = new EventBus();

  // src/shared/utils/browser.ts
  var browser = chrome;
  async function browserStorageLocalGet(val) {
    return await browser.storage.local.get(val);
  }
  async function browserStorageLocalSet(val) {
    return await browser.storage.local.set(val);
  }
  async function browserTabsCreate(params) {
    return await browser.tabs.create(params);
  }
  function browserRuntimeOnConnect(listener) {
    browser.runtime.onConnect.addListener(listener);
  }
  function browserRuntimeOnInstalled(listener) {
    browser.runtime.onInstalled.addListener(listener);
  }
  function browserRuntimeConnect(connectInfo) {
    return browser.runtime.connect(browser.runtime.id, connectInfo);
  }
  var browser_default = browser;

  // src/shared/utils/message/index.ts
  var import_eth_rpc_errors = __toESM(require_dist());
  var import_events = __toESM(require_events());
  var Message = class extends import_events.default {
    // avaiable id list
    // max concurrent request limit
    _requestIdPool = [...Array(500).keys()];
    _EVENT_PRE = "EXTENSION_WALLET_";
    listenCallback;
    _waitingMap = /* @__PURE__ */ new Map();
    request(data) {
      if (!this._requestIdPool.length) {
        throw import_eth_rpc_errors.ethErrors.rpc.limitExceeded();
      }
      const ident = this._requestIdPool.shift();
      return new Promise((resolve, reject) => {
        this._waitingMap.set(ident, {
          data,
          resolve,
          reject
        });
        this.send("request", { ident, data });
      });
    }
    onResponse = async ({ ident, res, err } = {}) => {
      if (!this._waitingMap.has(ident)) {
        return;
      }
      const { resolve, reject } = this._waitingMap.get(ident);
      this._requestIdPool.push(ident);
      this._waitingMap.delete(ident);
      err ? reject(err) : resolve(res);
    };
    onRequest = async ({ ident, data }) => {
      if (this.listenCallback) {
        let res, err;
        try {
          res = await this.listenCallback(data);
        } catch (e) {
          err = {
            message: e.message,
            stack: e.stack
          };
          e.code && (err.code = e.code);
          e.data && (err.data = e.data);
        }
        this.send("response", { ident, res, err });
      }
    };
    _dispose = () => {
      for (const request of this._waitingMap.values()) {
        request.reject(import_eth_rpc_errors.ethErrors.provider.userRejectedRequest());
      }
      this._waitingMap.clear();
    };
  };
  var message_default = Message;

  // src/shared/utils/message/broadcastChannelMessage.ts
  var BroadcastChannelMessage = class extends message_default {
    _channel;
    constructor(name) {
      super();
      if (!name) {
        throw new Error("the broadcastChannel name is missing");
      }
      this._channel = new BroadcastChannel(name);
    }
    connect = () => {
      this._channel.onmessage = ({ data: { type, data } }) => {
        if (type === "message") {
          this.emit("message", data);
        } else if (type === "response") {
          this.onResponse(data);
        }
      };
      return this;
    };
    listen = (listenCallback) => {
      this.listenCallback = listenCallback;
      this._channel.onmessage = ({ data: { type, data } }) => {
        if (type === "request") {
          this.onRequest(data);
        }
      };
      return this;
    };
    send = (type, data) => {
      this._channel.postMessage({
        type,
        data
      });
    };
    dispose = () => {
      this._dispose();
      this._channel.close();
    };
  };

  // src/shared/utils/message/portMessage.ts
  var PortMessage = class extends message_default {
    port = null;
    listenCallback = void 0;
    constructor(port) {
      super();
      if (port) {
        this.port = port;
      }
    }
    connect(name) {
      this.port = browserRuntimeConnect(name ? { name } : void 0);
      this.port.onMessage.addListener(({ _type_, data }) => {
        if (_type_ === `${this._EVENT_PRE}message`) {
          this.emit("message", data);
          return;
        }
        if (_type_ === `${this._EVENT_PRE}response`) {
          this.onResponse(data);
        }
      });
      return this;
    }
    listen(listenCallback) {
      if (!this.port)
        return;
      this.listenCallback = listenCallback;
      this.port.onMessage.addListener(({ _type_, data }) => {
        if (_type_ === `${this._EVENT_PRE}request`) {
          this.onRequest(data);
        }
      });
      return this;
    }
    send(type, data) {
      if (!this.port)
        return;
      try {
        this.port.postMessage({ _type_: `${this._EVENT_PRE}${type}`, data });
      } catch (e) {
      }
    }
    dispose() {
      this._dispose();
      this.port?.disconnect();
    }
  };
  var portMessage_default = PortMessage;

  // src/shared/utils/index.ts
  var import_lodash = __toESM(require_lodash());
  var Message2 = {
    BroadcastChannelMessage,
    PortMessage: portMessage_default
  };
  var chainsDict = (0, import_lodash.keyBy)(CHAINS, "serverId");
  var fetchTDCMainnet = async ({
    path,
    ...props
  }) => {
    try {
      const res = await fetch(`${TDC_MAINNET_URL}${path}`, { ...props });
      if (!res.ok) {
        console.log("ERROR IN RESPONSE");
        console.log(res.body);
      }
      return await res.json();
    } catch (error) {
      console.log(error);
    }
  };

  // src/background/services/session.ts
  var Session = class {
    origin = "";
    icon = "";
    name = "";
    constructor(data) {
      if (data) {
        this.origin = data.origin;
        this.icon = data.icon;
        this.name = data.name;
      }
    }
  };
  var SessionMap = class {
    sessionMap;
    constructor() {
      this.sessionMap = /* @__PURE__ */ new Map();
    }
    getSession(id) {
      return this.sessionMap.get(id);
    }
    getOrCreateSession(id) {
      if (this.sessionMap.has(id)) {
        return this.sessionMap.get(id);
      }
      this.createSession(id);
    }
    createSession(id, data) {
      const session = new Session(data);
      this.sessionMap.set(id, session);
      return session;
    }
    deleteSession(id) {
      this.sessionMap.delete(id);
    }
    broadcastEvent(ev, data, origin) {
      let sessions = [];
      this.sessionMap.forEach((session, key) => {
        sessions.push({
          key,
          ...session
        });
      });
      if (origin) {
        sessions = sessions.filter((session) => session.origin === origin);
      }
    }
  };
  var session_default = new SessionMap();

  // src/background/services/storage.ts
  var encryptorUtils = __toESM(require_dist2());
  var StorageService = class {
    async saveWallets(password, wallets) {
      const walletsToSave = wallets.map((wallet) => {
        return {
          phrase: wallet.phrase,
          name: wallet.name,
          accounts: wallet.accounts.map((account) => ({
            id: account.id,
            name: account.name ?? ""
          }))
        };
      });
      const encrypted = await encryptorUtils.encrypt(
        password,
        JSON.stringify(walletsToSave)
      );
      await browserStorageLocalSet(JSON.parse(encrypted));
    }
    async getLocalValues() {
      const data = await browserStorageLocalGet(void 0);
      return data;
    }
    async importWallets(password) {
      const encrypted = await this.getLocalValues();
      if (!encrypted)
        return [];
      const decrypted = JSON.parse(await encryptorUtils.decrypt(
        password,
        JSON.stringify(encrypted)
      ));
      return decrypted.map((i, index) => ({ ...i, id: index }));
    }
  };
  var storage_default = new StorageService();

  // src/shared/features/tabs.ts
  var import_react = __toESM(require_react());
  var openExtensionInTab = async () => {
    const url = browser_default.runtime.getURL("index.html");
    return await browserTabsCreate({ url });
  };

  // src/background/controllers/walletController.ts
  var import_test_test_test_hd_wallet = __toESM(require_src4());
  var import_mnemonic = __toESM(require_mnemonic());
  var import_tidecoinjs_lib = __toESM(require_src2());
  var import_tidepair = __toESM(require_src5());

  // node_modules/@noble/hashes/esm/utils.js
  var u8a = (a) => a instanceof Uint8Array;
  var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
  if (!isLE)
    throw new Error("Non little-endian hardware is not supported");
  var hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, "0"));
  function bytesToHex(bytes) {
    if (!u8a(bytes))
      throw new Error("Uint8Array expected");
    let hex = "";
    for (let i = 0; i < bytes.length; i++) {
      hex += hexes[bytes[i]];
    }
    return hex;
  }
  function hexToBytes(hex) {
    if (typeof hex !== "string")
      throw new Error("hex string expected, got " + typeof hex);
    const len = hex.length;
    if (len % 2)
      throw new Error("padded hex string expected, got unpadded hex of length " + len);
    const array = new Uint8Array(len / 2);
    for (let i = 0; i < array.length; i++) {
      const j = i * 2;
      const hexByte = hex.slice(j, j + 2);
      const byte = Number.parseInt(hexByte, 16);
      if (Number.isNaN(byte) || byte < 0)
        throw new Error("Invalid byte sequence");
      array[i] = byte;
    }
    return array;
  }
  var toStr = {}.toString;

  // src/background/controllers/walletController.ts
  var falconPair = (0, import_tidepair.falconPairFactory)();
  var WalletController = class {
    async isVaultEmpty() {
      const values = await storage_default.getLocalValues();
      return values.data === void 0;
    }
    async createNewWallet(exportedWallets, phrase, name) {
      const mnemonic = import_mnemonic.default.fromPhrase(phrase);
      const acc = (0, import_test_test_test_hd_wallet.fromMnemonic)(mnemonic);
      const account = {
        id: 0,
        name: "Account 1",
        balance: 0,
        privateKey: bytesToHex(acc.privateKey),
        publicKey: bytesToHex(acc.publicKey),
        address: import_tidecoinjs_lib.payments.p2wpkh({ pubkey: Buffer.from(acc.publicKey) }).address
      };
      const walletId = exportedWallets.length > 0 ? exportedWallets[exportedWallets.length - 1].id + 1 : 0;
      const randomSeed = crypto.getRandomValues(new Uint8Array(16));
      return {
        name: !name ? `Wallet ${walletId + 1}` : name,
        id: walletId,
        accounts: [account],
        currentAccount: account,
        phrase: mnemonic.getPhrase(randomSeed)
      };
    }
    async saveWallets(password, wallets) {
      await storage_default.saveWallets(password, wallets);
    }
    async importWallets(password) {
      return await storage_default.importWallets(password);
    }
    async loadAccountsData(wallet) {
      const result = [];
      const root = (0, import_test_test_test_hd_wallet.fromMnemonic)(import_mnemonic.default.fromPhrase(wallet.phrase));
      const addresses = await root.addAccounts(
        wallet.accounts[-1] ? wallet.accounts[-1].id + 1 : wallet.accounts[0].id + 1
      );
      wallet.accounts.forEach((acc) => {
        if (acc.id === 0)
          result.push({
            ...acc,
            address: import_tidecoinjs_lib.payments.p2wpkh({ pubkey: Buffer.from(root.publicKey) }).address
          });
        else
          result.push({ ...acc, address: addresses[acc.id] });
      });
      return result;
    }
    async loadAccountData(account) {
      const imported = falconPair.fromPrivateKey(
        Buffer.from(hexToBytes(account.privateKey))
      );
      const address = import_tidecoinjs_lib.payments.p2wpkh({ pubkey: imported.publicKey }).address;
      return {
        privateKey: bytesToHex(imported.privateKey),
        publicKey: bytesToHex(imported.publicKey),
        address
      };
    }
    async createNewAccount(wallet, name) {
      const accName = !name?.length ? `Account ${wallet.accounts.length + 1}` : name;
      const account = { id: wallet.accounts[wallet.accounts.length - 1].id + 1 };
      wallet.accounts.push(account);
      return {
        ...account,
        name: accName,
        balance: 0
      };
    }
    generateMnemonicPhrase() {
      const randomSeed = crypto.getRandomValues(new Uint8Array(16));
      return new import_mnemonic.default().getPhrase(randomSeed);
    }
  };
  var walletController_default = new WalletController();

  // src/background/controllers/apiController.ts
  var ApiController = class {
    async getAccountBalance(address) {
      const data = await fetchTDCMainnet({
        path: `address/${address}/balance`,
        method: "GET"
      });
      return data["balance"];
    }
  };
  var apiController_default = new ApiController();

  // src/background/services/keyring/index.ts
  var encryptorUtils2 = __toESM(require_dist2());
  var import_events2 = __toESM(require_events());
  var import_test_test_test_hd_wallet2 = __toESM(require_src4());
  var KeyringController = class extends import_events2.EventEmitter {
    store;
    memStore;
    encryptor;
    keyrings;
    unsupportedKeyrings;
    password;
    constructor({ initState = {}, encryptor = encryptorUtils2 } = {
      initState: {},
      encryptor: encryptorUtils2
    }) {
      super();
      this.store = initState;
      this.memStore = {
        isUnlocked: false,
        keyrings: []
      };
      this.encryptor = encryptor;
      this.keyrings = {};
      this.unsupportedKeyrings = [];
    }
    fullUpdate() {
      this.emit("update", this.memStore);
      return this.memStore;
    }
    async exportAccount(address) {
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.exportAccount) {
        throw new Error("`KeyringController - The keyring for the current address does not support the method exportAccount" /* UnsupportedExportAccount */);
      }
      return await keyring.exportAccount(address.toLowerCase());
    }
    async removeAccount(address) {
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.removeAccount) {
        throw new Error("`KeyringController - The keyring for the current address does not support the method removeAccount" /* UnsupportedRemoveAccount */);
      }
      keyring.removeAccount(address);
      this.emit("removedAccount", address);
      return this.fullUpdate();
    }
    async getAccounts(keyring = "root") {
      return this.keyrings[keyring].getAccounts();
    }
    async getKeyringForAccount(address) {
      if (Object.keys(this.keyrings).includes(address)) {
        return this.keyrings[address];
      }
      return this.keyrings.root;
    }
    async signTransaction(tideTx, rawAddress, opts = {}) {
      const address = rawAddress.toLowerCase();
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.signTransaction) {
        throw new Error("KeyringController - The keyring for the current address does not support the method signTransaction." /* UnsupportedSignTransaction */);
      }
      return await keyring.signTransaction(address, tideTx, opts);
    }
    async signMessage(msgParams, opts = {}) {
      const address = msgParams.from.toLowerCase();
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.signMessage) {
        throw new Error("KeyringController - The keyring for the current address does not support the method signMessage." /* UnsupportedSignMessage */);
      }
      return await keyring.signMessage(address, msgParams.data, opts);
    }
    async signPersonalMessage(msgParams, opts = {}) {
      const address = msgParams.from.toLowerCase();
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.signPersonalMessage) {
        throw new Error("KeyringController - The keyring for the current address does not support the method signPersonalMessage." /* UnsupportedSignPersonalMessage */);
      }
      const normalizedData = msgParams.data.toLowerCase();
      return await keyring.signPersonalMessage(address, normalizedData, opts);
    }
    async getEncryptionPublicKey(address, opts = {}) {
      const normalizedAddress = address.toLowerCase();
      const keyring = await this.getKeyringForAccount(address);
      if (!keyring.getEncryptionPublicKey) {
        throw new Error("KeyringController - The keyring for the current address does not support the method getEncryptionPublicKey." /* UnsupportedGetEncryptionPublicKey */);
      }
      return await keyring.getEncryptionPublicKey(normalizedAddress, opts);
    }
  };
  var keyring_default = new KeyringController();

  // src/background/index.ts
  var { PortMessage: PortMessage2 } = Message2;
  browserRuntimeOnConnect((port) => {
    if (port.name === "popup" || port.name === "notification" || port.name === "tab") {
      const pm2 = new PortMessage2(port);
      pm2.listen((data) => {
        if (data?.type) {
          switch (data.type) {
            case "broadcast":
              eventBus_default.emit(data.method, data.params);
              break;
            case "openapi":
              if (apiController_default[data.method]) {
                return apiController_default[data.method].apply(null, data.params);
              }
              break;
            case "keyring":
              return keyring_default[data.method].apply(null, data.params);
            case "controller":
            default:
              if (data.method) {
                return walletController_default[data.method].apply(null, data.params);
              }
          }
        }
      });
      const broadcastCallback = (data) => {
        pm2.request({
          type: "broadcast",
          method: data.method,
          params: data.params
        });
      };
      if (port.name === "popup") {
      }
      eventBus_default.addEventListener(EVENTS.broadcastToUI, broadcastCallback);
      port.onDisconnect.addListener(() => {
        eventBus_default.removeEventListener(EVENTS.broadcastToUI, broadcastCallback);
      });
      return;
    }
    const pm = new PortMessage2(port);
    pm.listen(async (data) => {
      const sessionId = port.sender?.tab?.id;
      const session = session_default.getOrCreateSession(sessionId);
      const req = { data, session };
      req.session.pushMessage = (event, data2) => {
        pm.send("message", { event, data: data2 });
      };
    });
    port.onDisconnect.addListener(() => {
    });
  });
  var addAppInstalledEvent = () => {
    openExtensionInTab();
    return;
  };
  browserRuntimeOnInstalled((details) => {
    if (details.reason === "install") {
      addAppInstalledEvent();
    }
  });
  var INTERNAL_STAYALIVE_PORT = "CT_Internal_port_alive";
  var alivePort = null;
  setInterval(() => {
    if (alivePort == null) {
      alivePort = chrome.runtime.connect({ name: INTERNAL_STAYALIVE_PORT });
      alivePort.onDisconnect.addListener(() => {
        if (chrome.runtime.lastError) {
        } else {
        }
        alivePort = null;
      });
    }
    if (alivePort) {
      alivePort.postMessage({ content: "keep alive~" });
      if (chrome.runtime.lastError) {
      } else {
      }
    }
  }, 5e3);
})();
/*! Bundled license information:

lodash/lodash.js:
  (**
   * @license
   * Lodash <https://lodash.com/>
   * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
   * Released under MIT license <https://lodash.com/license>
   * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
   * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
   *)

react/cjs/react.development.js:
  (**
   * @license React
   * react.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

ieee754/index.js:
  (*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> *)

buffer/index.js:
  (*!
   * The buffer module from node.js, for the browser.
   *
   * @author   Feross Aboukhadijeh <https://feross.org>
   * @license  MIT
   *)

safe-buffer/index.js:
  (*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)
*/
